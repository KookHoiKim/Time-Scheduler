!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ALT	kbd.h	11;"	d
AS	Makefile	/^AS = $(TOOLPREFIX)gas$/;"	m
ASFLAGS	Makefile	/^ASFLAGS = -m32 -gdwarf-2 -Wa,-divide$/;"	m
ASSERT	lapic.c	25;"	d	file:
Align	umalloc.c	/^typedef long Align;$/;"	t	file:
BACK	sh.c	12;"	d	file:
BACKSPACE	console.c	127;"	d	file:
BBLOCK	fs.h	50;"	d
BCAST	lapic.c	28;"	d	file:
BIG	usertests.asm	/^#define BIG (100*1024*1024)$/;"	d
BIG	usertests.c	1452;"	d	file:
BPB	fs.h	47;"	d
BSIZE	fs.h	6;"	d
BUFSIZE	hugefiletest.c	8;"	d	file:
BUF_PER_FILE	hugefiletest.asm	/^#define BUF_PER_FILE    ((FILESIZE) \/ (BUFSIZE))$/;"	d
BUF_PER_FILE	hugefiletest.c	9;"	d	file:
BUSY	lapic.c	29;"	d	file:
B_DIRTY	buf.h	13;"	d
B_VALID	buf.h	12;"	d
C	console.c	189;"	d	file:
C	kbd.h	32;"	d
C	kernel.asm	/^#define C(x)  ((x)-'@')  \/\/ Control-x$/;"	d
CAPSLOCK	kbd.h	13;"	d
CC	Makefile	/^CC = $(TOOLPREFIX)gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = -fno-pic -static -fno-builtin -fno-strict-aliasing -O0 -Wall -MD -ggdb -m32 -fno-omit-frame-pointer$/;"	m
CMOS_PORT	lapic.c	123;"	d	file:
CMOS_RETURN	lapic.c	124;"	d	file:
CMOS_STATA	lapic.c	163;"	d	file:
CMOS_STATB	lapic.c	164;"	d	file:
CMOS_UIP	lapic.c	165;"	d	file:
CNT_CHILD	test_master.c	10;"	d	file:
CNT_CHILD	test_sample.c	11;"	d	file:
CNT_EXCEED	test_sample.c	12;"	d	file:
CNT_TEST	test_sample.c	9;"	d	file:
COM1	uart.c	15;"	d	file:
CONSOLE	file.h	37;"	d
CONV	kernel.asm	/^#define    CONV(x)     (t1.x = ((t1.x >> 4) * 10) + (t1.x & 0xf))$/;"	d
CONV	lapic.c	214;"	d	file:
CONV	lapic.c	221;"	d	file:
COUNT_PERIOD	test_stride.asm	/^#define COUNT_PERIOD    1000000     \/\/ (iteration)$/;"	d
COUNT_PERIOD	test_stride.c	12;"	d	file:
CPUS	Makefile	/^CPUS := 2$/;"	m
CR0_AM	mmu.h	35;"	d
CR0_CD	mmu.h	37;"	d
CR0_EM	mmu.h	30;"	d
CR0_ET	mmu.h	32;"	d
CR0_MP	mmu.h	29;"	d
CR0_NE	mmu.h	33;"	d
CR0_NW	mmu.h	36;"	d
CR0_PE	mmu.h	28;"	d
CR0_PG	mmu.h	38;"	d
CR0_TS	mmu.h	31;"	d
CR0_WP	mmu.h	34;"	d
CR4_PSE	mmu.h	40;"	d
CRTPORT	console.c	128;"	d	file:
CRTPORT	kernel.asm	/^#define CRTPORT 0x3d4$/;"	d
CTL	kbd.h	10;"	d
ChangeContext	proc.c	/^ChangeContext(struct cpu* c, struct proc* p) {$/;"	f
DAY	kernel.asm	/^#define DAY     0x07$/;"	d
DAY	lapic.c	170;"	d	file:
DEASSERT	lapic.c	26;"	d	file:
DELIVS	lapic.c	24;"	d	file:
DEVSPACE	memlayout.h	5;"	d
DIRSIZ	fs.h	53;"	d
DNINDIRECT	fs.h	26;"	d
DPL_USER	mmu.h	81;"	d
Disassembly	bootblock.asm	/^Disassembly of section .text:$/;"	l
Disassembly	cat.asm	/^Disassembly of section .text:$/;"	l
Disassembly	echo.asm	/^Disassembly of section .text:$/;"	l
Disassembly	entryother.asm	/^Disassembly of section .text:$/;"	l
Disassembly	forktest.asm	/^Disassembly of section .text:$/;"	l
Disassembly	grep.asm	/^Disassembly of section .text:$/;"	l
Disassembly	hugefiletest.asm	/^Disassembly of section .text:$/;"	l
Disassembly	init.asm	/^Disassembly of section .text:$/;"	l
Disassembly	initcode.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kernel.asm	/^Disassembly of section .text:$/;"	l
Disassembly	kill.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ln.asm	/^Disassembly of section .text:$/;"	l
Disassembly	ls.asm	/^Disassembly of section .text:$/;"	l
Disassembly	mkdir.asm	/^Disassembly of section .text:$/;"	l
Disassembly	my_userapp.asm	/^Disassembly of section .text:$/;"	l
Disassembly	rm.asm	/^Disassembly of section .text:$/;"	l
Disassembly	sh.asm	/^Disassembly of section .text:$/;"	l
Disassembly	stressfs.asm	/^Disassembly of section .text:$/;"	l
Disassembly	test_master.asm	/^Disassembly of section .text:$/;"	l
Disassembly	test_mlfq.asm	/^Disassembly of section .text:$/;"	l
Disassembly	test_sample.asm	/^Disassembly of section .text:$/;"	l
Disassembly	test_stride.asm	/^Disassembly of section .text:$/;"	l
Disassembly	threadtest.asm	/^Disassembly of section .text:$/;"	l
Disassembly	usertests.asm	/^Disassembly of section .text:$/;"	l
Disassembly	wc.asm	/^Disassembly of section .text:$/;"	l
Disassembly	zombie.asm	/^Disassembly of section .text:$/;"	l
E0ESC	kbd.h	17;"	d
ELF_MAGIC	elf.h	3;"	d
ELF_PROG_FLAG_EXEC	elf.h	40;"	d
ELF_PROG_FLAG_READ	elf.h	42;"	d
ELF_PROG_FLAG_WRITE	elf.h	41;"	d
ELF_PROG_LOAD	elf.h	37;"	d
EMBRYO	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
ENABLE	lapic.c	19;"	d	file:
EOI	lapic.c	17;"	d	file:
ERROR	lapic.c	38;"	d	file:
ESR	lapic.c	20;"	d	file:
EXEC	sh.c	8;"	d	file:
EXTMEM	memlayout.h	3;"	d
EXTRA	Makefile	/^EXTRA=\\$/;"	m
FD_INODE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon2
FD_NONE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon2
FD_PIPE	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	e	enum:file::__anon2
FILES	Makefile	/^FILES = $(shell grep -v '^\\#' runoff.list)$/;"	m
FILESIZE	hugefiletest.c	7;"	d	file:
FIXED	lapic.c	30;"	d	file:
FL_AC	mmu.h	22;"	d
FL_AF	mmu.h	7;"	d
FL_CF	mmu.h	5;"	d
FL_DF	mmu.h	12;"	d
FL_ID	mmu.h	25;"	d
FL_IF	mmu.h	11;"	d
FL_IOPL_0	mmu.h	15;"	d
FL_IOPL_1	mmu.h	16;"	d
FL_IOPL_2	mmu.h	17;"	d
FL_IOPL_3	mmu.h	18;"	d
FL_IOPL_MASK	mmu.h	14;"	d
FL_NT	mmu.h	19;"	d
FL_OF	mmu.h	13;"	d
FL_PF	mmu.h	6;"	d
FL_RF	mmu.h	20;"	d
FL_SF	mmu.h	9;"	d
FL_TF	mmu.h	10;"	d
FL_VIF	mmu.h	23;"	d
FL_VIP	mmu.h	24;"	d
FL_VM	mmu.h	21;"	d
FL_ZF	mmu.h	8;"	d
FSSIZE	param.h	13;"	d
GDBPORT	Makefile	/^GDBPORT = $(shell expr `id -u` % 5000 + 25000)$/;"	m
HOURS	lapic.c	169;"	d	file:
Header	umalloc.c	/^typedef union header Header;$/;"	t	typeref:union:header	file:
IBLOCK	fs.h	44;"	d
ICRHI	lapic.c	31;"	d	file:
ICRLO	lapic.c	21;"	d	file:
ID	lapic.c	14;"	d	file:
IDE_BSY	ide.c	17;"	d	file:
IDE_CMD_RDMUL	ide.c	24;"	d	file:
IDE_CMD_READ	ide.c	22;"	d	file:
IDE_CMD_WRITE	ide.c	23;"	d	file:
IDE_CMD_WRMUL	ide.c	25;"	d	file:
IDE_DF	ide.c	19;"	d	file:
IDE_DRDY	ide.c	18;"	d	file:
IDE_ERR	ide.c	20;"	d	file:
INIT	lapic.c	22;"	d	file:
INPUT_BUF	console.c	181;"	d	file:
INT_ACTIVELOW	ioapic.c	22;"	d	file:
INT_DISABLED	ioapic.c	20;"	d	file:
INT_LEVEL	ioapic.c	21;"	d	file:
INT_LOGICAL	ioapic.c	23;"	d	file:
IOAPIC	ioapic.c	9;"	d	file:
IO_PIC1	picirq.c	6;"	d	file:
IO_PIC2	kernel.asm	/^#define IO_PIC2         0xA0    \/\/ Slave (IRQs 8-15)$/;"	d
IO_PIC2	picirq.c	7;"	d	file:
IPB	fs.h	41;"	d
IRQ_COM1	traps.h	34;"	d
IRQ_ERROR	traps.h	36;"	d
IRQ_IDE	traps.h	35;"	d
IRQ_KBD	traps.h	33;"	d
IRQ_SPURIOUS	traps.h	37;"	d
IRQ_TIMER	traps.h	32;"	d
KBDATAP	kbd.h	5;"	d
KBSTATP	kbd.h	3;"	d
KBS_DIB	kbd.h	4;"	d
KERNBASE	memlayout.h	8;"	d
KERNLINK	memlayout.h	9;"	d
KEY_DEL	kbd.h	29;"	d
KEY_DN	kbd.h	23;"	d
KEY_END	kbd.h	21;"	d
KEY_HOME	kbd.h	20;"	d
KEY_INS	kbd.h	28;"	d
KEY_LF	kbd.h	24;"	d
KEY_PGDN	kbd.h	27;"	d
KEY_PGUP	kbd.h	26;"	d
KEY_RT	kbd.h	25;"	d
KEY_UP	kbd.h	22;"	d
KSTACKSIZE	param.h	2;"	d
LD	Makefile	/^LD = $(TOOLPREFIX)ld$/;"	m
LEVEL	lapic.c	27;"	d	file:
LIFETIME	test_mlfq.c	12;"	d	file:
LIFETIME	test_stride.asm	/^#define LIFETIME        5000        \/\/ (ticks)$/;"	d
LIFETIME	test_stride.c	11;"	d	file:
LINT0	lapic.c	36;"	d	file:
LINT1	lapic.c	37;"	d	file:
LIST	sh.c	11;"	d	file:
LOGSIZE	param.h	11;"	d
MASKED	lapic.c	39;"	d	file:
MAXARG	param.h	9;"	d
MAXARGS	sh.c	14;"	d	file:
MAXFILE	fs.h	28;"	d
MAXOPBLOCKS	param.h	10;"	d
MEMFSOBJS	Makefile	/^MEMFSOBJS = $(filter-out ide.o,$(OBJS)) memide.o$/;"	m
MINS	lapic.c	168;"	d	file:
MLFQ_LEVEL	test_mlfq.asm	/^#define MLFQ_LEVEL      3$/;"	d
MLFQ_LEVEL	test_mlfq.c	16;"	d	file:
MONTH	kernel.asm	/^#define MONTH   0x08$/;"	d
MONTH	lapic.c	171;"	d	file:
MPBOOT	mp.h	34;"	d
MPBUS	mp.h	50;"	d
MPIOAPIC	mp.h	51;"	d
MPIOINTR	mp.h	52;"	d
MPLINTR	mp.h	53;"	d
MPPROC	mp.h	49;"	d
N	forktest.asm	/^#define N  1000$/;"	d
N	forktest.c	8;"	d	file:
NAME_CHILD_MLFQ	test_master.c	15;"	d	file:
NAME_CHILD_MLFQ	test_sample.c	17;"	d	file:
NAME_CHILD_STRIDE	test_master.c	13;"	d	file:
NAME_CHILD_STRIDE	test_sample.c	15;"	d	file:
NBUF	param.h	12;"	d
NCPU	param.h	3;"	d
NDEV	param.h	7;"	d
NDIRECT	fs.h	24;"	d
NELEM	defs.h	204;"	d
NFILE	param.h	5;"	d
NINDIRECT	fs.h	25;"	d
NINODE	param.h	6;"	d
NINODES	mkfs.c	18;"	d	file:
NO	kbd.h	7;"	d
NOFILE	param.h	4;"	d
NOOP	test_sample.c	18;"	d	file:
NPDENTRIES	mmu.h	123;"	d
NPROC	param.h	1;"	d
NPTENTRIES	mmu.h	124;"	d
NSEGS	mmu.h	50;"	d
NTEST	threadtest.c	6;"	d	file:
NUMLOCK	kbd.h	14;"	d
NUM_STRESS	hugefiletest.asm	/^#define NUM_STRESS      4$/;"	d
NUM_STRESS	hugefiletest.c	10;"	d	file:
NUM_THREAD	threadtest.c	5;"	d	file:
OBJCOPY	Makefile	/^OBJCOPY = $(TOOLPREFIX)objcopy$/;"	m
OBJDUMP	Makefile	/^OBJDUMP = $(TOOLPREFIX)objdump$/;"	m
OBJS	Makefile	/^OBJS = \\$/;"	m
O_CREATE	fcntl.h	4;"	d
O_RDONLY	fcntl.h	1;"	d
O_RDWR	fcntl.h	3;"	d
O_WRONLY	fcntl.h	2;"	d
P2V	memlayout.h	12;"	d
P2V_WO	memlayout.h	15;"	d
PCINT	lapic.c	35;"	d	file:
PDX	mmu.h	114;"	d
PDXSHIFT	mmu.h	129;"	d
PERIODIC	lapic.c	34;"	d	file:
PGADDR	mmu.h	120;"	d
PGROUNDDOWN	mmu.h	132;"	d
PGROUNDUP	mmu.h	131;"	d
PGSHIFT	mmu.h	127;"	d
PGSIZE	mmu.h	125;"	d
PHYSTOP	memlayout.h	4;"	d
PIPE	sh.c	10;"	d	file:
PIPESIZE	pipe.c	11;"	d	file:
PRINT	Makefile	/^PRINT = runoff.list runoff.spec README toc.hdr toc.ftr $(FILES)$/;"	m
PTE_A	mmu.h	140;"	d
PTE_ADDR	mmu.h	146;"	d
PTE_D	mmu.h	141;"	d
PTE_FLAGS	mmu.h	147;"	d
PTE_MBZ	mmu.h	143;"	d
PTE_P	mmu.h	135;"	d
PTE_PCD	mmu.h	139;"	d
PTE_PS	mmu.h	142;"	d
PTE_PWT	mmu.h	138;"	d
PTE_U	mmu.h	137;"	d
PTE_W	mmu.h	136;"	d
PTX	mmu.h	117;"	d
PTXSHIFT	mmu.h	128;"	d
QEMU	Makefile	/^QEMU = $(shell if which qemu > \/dev\/null; \\$/;"	m
QEMUGDB	Makefile	/^QEMUGDB = $(shell if $(QEMU) -help | grep -q '^-gdb'; \\$/;"	m
QEMUOPTS	Makefile	/^QEMUOPTS = -drive file=fs.img,index=1,media=disk,format=raw -drive file=xv6.img,index=0,media=disk,format=raw -smp $(CPUS) -m 512 $(QEMUEXTRA)$/;"	m
REDIR	sh.c	9;"	d	file:
REG_ID	ioapic.c	11;"	d	file:
REG_TABLE	ioapic.c	13;"	d	file:
REG_VER	ioapic.c	12;"	d	file:
ROOTDEV	param.h	8;"	d
ROOTINO	fs.h	5;"	d
RTC_ADDR	usertests.c	1701;"	d	file:
RTC_DATA	usertests.c	1702;"	d	file:
RUNNABLE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
RUNNING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
SCROLLLOCK	kbd.h	15;"	d
SECS	lapic.c	167;"	d	file:
SECTOR_SIZE	ide.c	16;"	d	file:
SECTSIZE	bootmain.c	13;"	d	file:
SEG	mmu.h	71;"	d
SEG16	mmu.h	75;"	d
SEG_ASM	asm.h	11;"	d
SEG_KCODE	mmu.h	43;"	d
SEG_KDATA	mmu.h	44;"	d
SEG_NULLASM	asm.h	5;"	d
SEG_TSS	mmu.h	47;"	d
SEG_UCODE	mmu.h	45;"	d
SEG_UDATA	mmu.h	46;"	d
SETGATE	mmu.h	215;"	d
SHIFT	kbd.h	9;"	d
SLEEPING	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
STARTUP	lapic.c	23;"	d	file:
STA_A	asm.h	21;"	d
STA_A	mmu.h	89;"	d
STA_C	asm.h	18;"	d
STA_C	mmu.h	86;"	d
STA_E	asm.h	17;"	d
STA_E	mmu.h	85;"	d
STA_R	asm.h	20;"	d
STA_R	mmu.h	88;"	d
STA_W	asm.h	19;"	d
STA_W	mmu.h	87;"	d
STA_X	asm.h	16;"	d
STA_X	mmu.h	84;"	d
STS_CG16	mmu.h	95;"	d
STS_CG32	mmu.h	101;"	d
STS_IG16	mmu.h	97;"	d
STS_IG32	mmu.h	102;"	d
STS_LDT	mmu.h	93;"	d
STS_T16A	mmu.h	92;"	d
STS_T16B	mmu.h	94;"	d
STS_T32A	mmu.h	99;"	d
STS_T32B	mmu.h	100;"	d
STS_TG	mmu.h	96;"	d
STS_TG16	mmu.h	98;"	d
STS_TG32	mmu.h	103;"	d
SVR	lapic.c	18;"	d	file:
SYSCALL	usys.S	/^#define SYSCALL(name) \\$/;"	d
SYS_alarm	syscall.h	26;"	d
SYS_chdir	syscall.h	10;"	d
SYS_close	syscall.h	22;"	d
SYS_dup	syscall.h	11;"	d
SYS_exec	syscall.h	8;"	d
SYS_exit	syscall.h	3;"	d
SYS_fork	syscall.h	2;"	d
SYS_fstat	syscall.h	9;"	d
SYS_getlev	syscall.h	28;"	d
SYS_getpid	syscall.h	12;"	d
SYS_getppid	syscall.h	24;"	d
SYS_kill	syscall.h	7;"	d
SYS_link	syscall.h	20;"	d
SYS_mkdir	syscall.h	21;"	d
SYS_mknod	syscall.h	18;"	d
SYS_myfunction	syscall.h	23;"	d
SYS_open	syscall.h	16;"	d
SYS_pipe	syscall.h	5;"	d
SYS_read	syscall.h	6;"	d
SYS_sbrk	syscall.h	13;"	d
SYS_set_cpu_share	syscall.h	25;"	d
SYS_sleep	syscall.h	14;"	d
SYS_thread_create	syscall.h	29;"	d
SYS_thread_exit	syscall.h	31;"	d
SYS_thread_join	syscall.h	30;"	d
SYS_unlink	syscall.h	19;"	d
SYS_uptime	syscall.h	15;"	d
SYS_wait	syscall.h	4;"	d
SYS_write	syscall.h	17;"	d
SYS_yield	syscall.h	27;"	d
TCCR	lapic.c	41;"	d	file:
TDCR	lapic.c	42;"	d	file:
TICR	lapic.c	40;"	d	file:
TIMER	lapic.c	32;"	d	file:
TNINDIRECT	fs.h	27;"	d
TOOLPREFIX	Makefile	/^TOOLPREFIX := $(shell if i386-jos-elf-objdump -i 2>&1 | grep '^elf32-i386$$' >\/dev\/null 2>&1; \\$/;"	m
TPR	lapic.c	16;"	d	file:
T_ALIGN	traps.h	21;"	d
T_BOUND	traps.h	9;"	d
T_BRKPT	traps.h	7;"	d
T_DBLFLT	traps.h	12;"	d
T_DEBUG	traps.h	5;"	d
T_DEFAULT	traps.h	28;"	d
T_DEV	stat.h	3;"	d
T_DEVICE	traps.h	11;"	d
T_DIR	stat.h	1;"	d
T_DIVIDE	traps.h	4;"	d
T_FILE	stat.h	2;"	d
T_FPERR	traps.h	20;"	d
T_GPFLT	traps.h	17;"	d
T_ILLOP	traps.h	10;"	d
T_IRQ0	traps.h	30;"	d
T_MCHK	traps.h	22;"	d
T_NMI	traps.h	6;"	d
T_OFLOW	traps.h	8;"	d
T_PGFLT	traps.h	18;"	d
T_SEGNP	traps.h	15;"	d
T_SIMDERR	traps.h	23;"	d
T_STACK	traps.h	16;"	d
T_SYSCALL	traps.h	27;"	d
T_TSS	traps.h	14;"	d
ULIB	Makefile	/^ULIB = ulib.o usys.o printf.o umalloc.o$/;"	m
UNUSED	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
UPROGS	Makefile	/^UPROGS=\\$/;"	m
V2P	memlayout.h	11;"	d
V2P_WO	memlayout.h	14;"	d
VER	lapic.c	15;"	d	file:
X1	lapic.c	33;"	d	file:
YEAR	kernel.asm	/^#define YEAR    0x09$/;"	d
YEAR	lapic.c	172;"	d	file:
YIELD_PERIOD	test_mlfq.c	13;"	d	file:
ZOMBIE	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	e	enum:procstate
_cat	cat.asm	/^_cat:     file format elf32-i386$/;"	l
_echo	echo.asm	/^_echo:     file format elf32-i386$/;"	l
_forktest	forktest.asm	/^_forktest:     file format elf32-i386$/;"	l
_grep	grep.asm	/^_grep:     file format elf32-i386$/;"	l
_hugefiletest	hugefiletest.asm	/^_hugefiletest:     file format elf32-i386$/;"	l
_init	init.asm	/^_init:     file format elf32-i386$/;"	l
_kill	kill.asm	/^_kill:     file format elf32-i386$/;"	l
_ln	ln.asm	/^_ln:     file format elf32-i386$/;"	l
_ls	ls.asm	/^_ls:     file format elf32-i386$/;"	l
_mkdir	mkdir.asm	/^_mkdir:     file format elf32-i386$/;"	l
_my_userapp	my_userapp.asm	/^_my_userapp:     file format elf32-i386$/;"	l
_rm	rm.asm	/^_rm:     file format elf32-i386$/;"	l
_sh	sh.asm	/^_sh:     file format elf32-i386$/;"	l
_start	entry.S	/^_start = V2P_WO(entry)$/;"	d
_stressfs	stressfs.asm	/^_stressfs:     file format elf32-i386$/;"	l
_test_master	test_master.asm	/^_test_master:     file format elf32-i386$/;"	l
_test_mlfq	test_mlfq.asm	/^_test_mlfq:     file format elf32-i386$/;"	l
_test_sample	test_sample.asm	/^_test_sample:     file format elf32-i386$/;"	l
_test_stride	test_stride.asm	/^_test_stride:     file format elf32-i386$/;"	l
_threadtest	threadtest.asm	/^_threadtest:     file format elf32-i386$/;"	l
_usertests	usertests.asm	/^_usertests:     file format elf32-i386$/;"	l
_wc	wc.asm	/^_wc:     file format elf32-i386$/;"	l
_zombie	zombie.asm	/^_zombie:     file format elf32-i386$/;"	l
a	echo.asm	/^   a:	55                   	push   %ebp$/;"	l
a	hugefiletest.asm	/^   a:	55                   	push   %ebp$/;"	l
a	init.asm	/^   a:	55                   	push   %ebp$/;"	l
a	initcode.asm	/^   a:	6a 00                	push   $0x0$/;"	l
a	kernel.asm	/^	a = (uint*)bp->data;$/;"	d
a	kernel.asm	/^      a = PGADDR(PDX(a) + 1, 0, 0) - PGSIZE;$/;"	d
a	kernel.asm	/^    a = (uint*)bp->data;$/;"	d
a	kernel.asm	/^  a = (char*)PGROUNDDOWN((uint)va);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(newsz);$/;"	d
a	kernel.asm	/^  a = PGROUNDUP(oldsz);$/;"	d
a	kill.asm	/^   a:	55                   	push   %ebp$/;"	l
a	ln.asm	/^   a:	55                   	push   %ebp$/;"	l
a	ls.asm	/^   a:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
a	mkdir.asm	/^   a:	55                   	push   %ebp$/;"	l
a	my_userapp.asm	/^   a:	55                   	push   %ebp$/;"	l
a	rm.asm	/^   a:	55                   	push   %ebp$/;"	l
a	sh.asm	/^       a:	75 05                	jne    11 <runcmd+0x11>$/;"	l
a	stressfs.asm	/^   a:	55                   	push   %ebp$/;"	l
a	test_master.asm	/^   a:	55                   	push   %ebp$/;"	l
a	test_mlfq.asm	/^   a:	55                   	push   %ebp$/;"	l
a	test_sample.asm	/^   a:	55                   	push   %ebp$/;"	l
a	test_stride.asm	/^   a:	55                   	push   %ebp$/;"	l
a	threadtest.asm	/^       a:	55                   	push   %ebp$/;"	l
a	usertests.asm	/^    a = b + 1;$/;"	d
a	usertests.asm	/^  a = sbrk(0);$/;"	d
a	zombie.asm	/^   a:	55                   	push   %ebp$/;"	l
a0	cat.asm	/^  a0:	e8 dd 02 00 00       	call   382 <exit>$/;"	l
a0	ln.asm	/^  a0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a0	mkdir.asm	/^  a0:	89 df                	mov    %ebx,%edi$/;"	l
a0	rm.asm	/^  a0:	89 df                	mov    %ebx,%edi$/;"	l
a0	stressfs.asm	/^  a0:	50                   	push   %eax$/;"	l
a0	test_mlfq.asm	/^  a0:	89 54 85 e0          	mov    %edx,-0x20(%ebp,%eax,4)$/;"	l
a0	threadtest.asm	/^      a0:	e8 c2 15 00 00       	call   1667 <printf>$/;"	l
a0	wc.asm	/^  a0:	83 c4 10             	add    $0x10,%esp$/;"	l
a00	grep.asm	/^ a00:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
a00	ls.asm	/^ a00:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a00	usertests.asm	/^     a00:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
a01	hugefiletest.asm	/^ a01:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
a02	sh.asm	/^     a02:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
a02	threadtest.asm	/^     a02:	0f b6 00             	movzbl (%eax),%eax$/;"	l
a03	grep.asm	/^ a03:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
a04	hugefiletest.asm	/^ a04:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
a04	usertests.asm	/^     a04:	0f 85 89 00 00 00    	jne    a93 <pipe1+0xd2>$/;"	l
a05	ls.asm	/^ a05:	eb 26                	jmp    a2d <morecore+0x5e>$/;"	l
a05	sh.asm	/^     a05:	e8 94 fc ff ff       	call   69e <peek>$/;"	l
a05	threadtest.asm	/^     a05:	0f be c0             	movsbl %al,%eax$/;"	l
a06	grep.asm	/^ a06:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a07	hugefiletest.asm	/^ a07:	8b 00                	mov    (%eax),%eax$/;"	l
a07	ls.asm	/^ a07:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a08	threadtest.asm	/^     a08:	8b 55 f0             	mov    -0x10(%ebp),%edx$/;"	l
a09	grep.asm	/^ a09:	83 c0 08             	add    $0x8,%eax$/;"	l
a09	hugefiletest.asm	/^ a09:	8b 10                	mov    (%eax),%edx$/;"	l
a0a	ls.asm	/^ a0a:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a0a	sh.asm	/^     a0a:	83 c4 10             	add    $0x10,%esp$/;"	l
a0a	usertests.asm	/^     a0a:	8b 45 d8             	mov    -0x28(%ebp),%eax$/;"	l
a0b	hugefiletest.asm	/^ a0b:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
a0b	threadtest.asm	/^     a0b:	83 c2 01             	add    $0x1,%edx$/;"	l
a0c	grep.asm	/^ a0c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a0d	ls.asm	/^ a0d:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a0d	sh.asm	/^     a0d:	85 c0                	test   %eax,%eax$/;"	l
a0d	usertests.asm	/^     a0d:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a0e	hugefiletest.asm	/^ a0e:	89 10                	mov    %edx,(%eax)$/;"	l
a0e	threadtest.asm	/^     a0e:	39 d0                	cmp    %edx,%eax$/;"	l
a0f	grep.asm	/^ a0f:	50                   	push   %eax$/;"	l
a0f	sh.asm	/^     a0f:	75 10                	jne    a21 <parseblock+0x80>$/;"	l
a1	echo.asm	/^  a1:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
a1	forktest.asm	/^  a1:	83 ec 08             	sub    $0x8,%esp$/;"	l
a1	kill.asm	/^  a1:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
a1	sh.asm	/^      a1:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
a1	stressfs.asm	/^  a1:	e8 43 03 00 00       	call   3e9 <open>$/;"	l
a1	test_master.asm	/^  a1:	eb 09                	jmp    ac <main+0xac>$/;"	l
a1	usertests.asm	/^      a1:	83 c4 10             	add    $0x10,%esp$/;"	l
a10	grep.asm	/^ a10:	e8 c8 fe ff ff       	call   8dd <free>$/;"	l
a10	hugefiletest.asm	/^ a10:	eb 0a                	jmp    a1c <free+0x98>$/;"	l
a10	ls.asm	/^ a10:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
a10	threadtest.asm	/^     a10:	74 17                	je     a29 <sbrkthreadmain+0x8a>$/;"	l
a10	usertests.asm	/^     a10:	50                   	push   %eax$/;"	l
a11	sh.asm	/^     a11:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a11	usertests.asm	/^     a11:	e8 08 36 00 00       	call   401e <close>$/;"	l
a12	hugefiletest.asm	/^ a12:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
a12	threadtest.asm	/^     a12:	83 ec 08             	sub    $0x8,%esp$/;"	l
a13	ls.asm	/^ a13:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
a14	sh.asm	/^     a14:	68 fe 14 00 00       	push   $0x14fe$/;"	l
a15	grep.asm	/^ a15:	83 c4 10             	add    $0x10,%esp$/;"	l
a15	hugefiletest.asm	/^ a15:	8b 10                	mov    (%eax),%edx$/;"	l
a15	threadtest.asm	/^     a15:	68 cf 1b 00 00       	push   $0x1bcf$/;"	l
a16	ls.asm	/^ a16:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a16	usertests.asm	/^     a16:	83 c4 10             	add    $0x10,%esp$/;"	l
a17	hugefiletest.asm	/^ a17:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
a18	grep.asm	/^ a18:	a1 48 0e 00 00       	mov    0xe48,%eax$/;"	l
a19	ls.asm	/^ a19:	83 c0 08             	add    $0x8,%eax$/;"	l
a19	sh.asm	/^     a19:	e8 7e f9 ff ff       	call   39c <panic>$/;"	l
a19	usertests.asm	/^     a19:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
a1a	hugefiletest.asm	/^ a1a:	89 10                	mov    %edx,(%eax)$/;"	l
a1a	threadtest.asm	/^     a1a:	6a 01                	push   $0x1$/;"	l
a1c	hugefiletest.asm	/^ a1c:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
a1c	ls.asm	/^ a1c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a1c	threadtest.asm	/^     a1c:	e8 46 0c 00 00       	call   1667 <printf>$/;"	l
a1d	grep.asm	/^ a1d:	c9                   	leave  $/;"	l
a1e	grep.asm	/^ a1e:	c3                   	ret    $/;"	l
a1e	sh.asm	/^     a1e:	83 c4 10             	add    $0x10,%esp$/;"	l
a1f	grep.asm	/^ a1f:	55                   	push   %ebp$/;"	l
a1f	hugefiletest.asm	/^ a1f:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a1f	ls.asm	/^ a1f:	50                   	push   %eax$/;"	l
a2	init.asm	/^  a2:	75 3e                	jne    e2 <main+0xe2>$/;"	l
a2	ls.asm	/^  a2:	53                   	push   %ebx$/;"	l
a2	mkdir.asm	/^  a2:	89 d1                	mov    %edx,%ecx$/;"	l
a2	my_userapp.asm	/^  a2:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
a2	rm.asm	/^  a2:	89 d1                	mov    %edx,%ecx$/;"	l
a2	test_sample.asm	/^  a2:	89 d1                	mov    %edx,%ecx$/;"	l
a2	zombie.asm	/^  a2:	0f b6 00             	movzbl (%eax),%eax$/;"	l
a20	grep.asm	/^ a20:	89 e5                	mov    %esp,%ebp$/;"	l
a20	ls.asm	/^ a20:	e8 c8 fe ff ff       	call   8ed <free>$/;"	l
a20	usertests.asm	/^     a20:	eb 66                	jmp    a88 <pipe1+0xc7>$/;"	l
a21	sh.asm	/^     a21:	6a 00                	push   $0x0$/;"	l
a21	threadtest.asm	/^     a21:	83 c4 10             	add    $0x10,%esp$/;"	l
a22	grep.asm	/^ a22:	83 ec 18             	sub    $0x18,%esp$/;"	l
a22	hugefiletest.asm	/^ a22:	8d 14 c5 00 00 00 00 	lea    0x0(,%eax,8),%edx$/;"	l
a22	usertests.asm	/^     a22:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
a23	sh.asm	/^     a23:	6a 00                	push   $0x0$/;"	l
a24	threadtest.asm	/^     a24:	e8 7f 0a 00 00       	call   14a8 <exit>$/;"	l
a25	grep.asm	/^ a25:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a25	ls.asm	/^ a25:	83 c4 10             	add    $0x10,%esp$/;"	l
a25	sh.asm	/^     a25:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
a28	grep.asm	/^ a28:	83 c0 07             	add    $0x7,%eax$/;"	l
a28	ls.asm	/^ a28:	a1 30 0e 00 00       	mov    0xe30,%eax$/;"	l
a28	sh.asm	/^     a28:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
a29	hugefiletest.asm	/^ a29:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
a29	threadtest.asm	/^     a29:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
a29	usertests.asm	/^     a29:	eb 19                	jmp    a44 <pipe1+0x83>$/;"	l
a2b	grep.asm	/^ a2b:	c1 e8 03             	shr    $0x3,%eax$/;"	l
a2b	sh.asm	/^     a2b:	e8 1d fb ff ff       	call   54d <gettoken>$/;"	l
a2b	usertests.asm	/^     a2b:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a2c	hugefiletest.asm	/^ a2c:	01 d0                	add    %edx,%eax$/;"	l
a2d	ls.asm	/^ a2d:	c9                   	leave  $/;"	l
a2d	threadtest.asm	/^     a2d:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a2e	grep.asm	/^ a2e:	83 c0 01             	add    $0x1,%eax$/;"	l
a2e	hugefiletest.asm	/^ a2e:	3b 45 f8             	cmp    -0x8(%ebp),%eax$/;"	l
a2e	ls.asm	/^ a2e:	c3                   	ret    $/;"	l
a2e	usertests.asm	/^     a2e:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
a2f	ls.asm	/^ a2f:	55                   	push   %ebp$/;"	l
a3	grep.asm	/^  a3:	7e 23                	jle    c8 <grep+0xc8>$/;"	l
a3	ln.asm	/^  a3:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
a3	ls.asm	/^  a3:	6a 20                	push   $0x20$/;"	l
a3	test_master.asm	/^  a3:	e8 6e 02 00 00       	call   316 <wait>$/;"	l
a3	test_stride.asm	/^  a3:	81 7d f4 40 42 0f 00 	cmpl   $0xf4240,-0xc(%ebp)$/;"	l
a3	wc.asm	/^  a3:	89 45 e0             	mov    %eax,-0x20(%ebp)$/;"	l
a30	ls.asm	/^ a30:	89 e5                	mov    %esp,%ebp$/;"	l
a30	sh.asm	/^     a30:	83 c4 10             	add    $0x10,%esp$/;"	l
a30	threadtest.asm	/^     a30:	3b 45 e8             	cmp    -0x18(%ebp),%eax$/;"	l
a31	grep.asm	/^ a31:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
a31	hugefiletest.asm	/^ a31:	75 20                	jne    a53 <free+0xcf>$/;"	l
a31	usertests.asm	/^     a31:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
a32	ls.asm	/^ a32:	83 ec 18             	sub    $0x18,%esp$/;"	l
a33	hugefiletest.asm	/^ a33:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
a33	sh.asm	/^     a33:	83 ec 04             	sub    $0x4,%esp$/;"	l
a33	threadtest.asm	/^     a33:	72 ca                	jb     9ff <sbrkthreadmain+0x60>$/;"	l
a34	grep.asm	/^ a34:	a1 48 0e 00 00       	mov    0xe48,%eax$/;"	l
a34	usertests.asm	/^     a34:	89 c2                	mov    %eax,%edx$/;"	l
a35	ls.asm	/^ a35:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a35	threadtest.asm	/^     a35:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a36	hugefiletest.asm	/^ a36:	8b 50 04             	mov    0x4(%eax),%edx$/;"	l
a36	sh.asm	/^     a36:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
a36	usertests.asm	/^     a36:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a38	ls.asm	/^ a38:	83 c0 07             	add    $0x7,%eax$/;"	l
a38	threadtest.asm	/^     a38:	6a 00                	push   $0x0$/;"	l
a39	grep.asm	/^ a39:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a39	hugefiletest.asm	/^ a39:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
a39	sh.asm	/^     a39:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
a39	usertests.asm	/^     a39:	05 c0 8c 00 00       	add    $0x8cc0,%eax$/;"	l
a3a	threadtest.asm	/^     a3a:	e8 49 0b 00 00       	call   1588 <thread_exit>$/;"	l
a3b	ls.asm	/^ a3b:	c1 e8 03             	shr    $0x3,%eax$/;"	l
a3c	grep.asm	/^ a3c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
a3c	hugefiletest.asm	/^ a3c:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a3c	sh.asm	/^     a3c:	ff 75 f4             	pushl  -0xc(%ebp)$/;"	l
a3e	ls.asm	/^ a3e:	83 c0 01             	add    $0x1,%eax$/;"	l
a3e	usertests.asm	/^     a3e:	88 10                	mov    %dl,(%eax)$/;"	l
a3f	hugefiletest.asm	/^ a3f:	01 c2                	add    %eax,%edx$/;"	l
a3f	sh.asm	/^     a3f:	e8 79 fe ff ff       	call   8bd <parseredirs>$/;"	l
a3f	threadtest.asm	/^     a3f:	55                   	push   %ebp$/;"	l
a4	echo.asm	/^  a4:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
a4	forktest.asm	/^  a4:	68 7f 04 00 00       	push   $0x47f$/;"	l
a4	init.asm	/^  a4:	83 ec 08             	sub    $0x8,%esp$/;"	l
a4	kill.asm	/^  a4:	90                   	nop$/;"	l
a4	mkdir.asm	/^  a4:	fc                   	cld    $/;"	l
a4	rm.asm	/^  a4:	fc                   	cld    $/;"	l
a4	sh.asm	/^      a4:	83 ec 08             	sub    $0x8,%esp$/;"	l
a4	test_mlfq.asm	/^  a4:	81 7d f4 00 65 cd 1d 	cmpl   $0x1dcd6500,-0xc(%ebp)$/;"	l
a4	test_sample.asm	/^  a4:	8d 14 cd 00 00 00 00 	lea    0x0(,%ecx,8),%edx$/;"	l
a4	usertests.asm	/^      a4:	e8 4d 3f 00 00       	call   3ff6 <exit>$/;"	l
a40	grep.asm	/^ a40:	75 23                	jne    a65 <malloc+0x46>$/;"	l
a40	threadtest.asm	/^     a40:	89 e5                	mov    %esp,%ebp$/;"	l
a40	usertests.asm	/^     a40:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
a41	hugefiletest.asm	/^ a41:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
a41	ls.asm	/^ a41:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
a42	grep.asm	/^ a42:	c7 45 f0 40 0e 00 00 	movl   $0xe40,-0x10(%ebp)$/;"	l
a42	threadtest.asm	/^     a42:	83 ec 38             	sub    $0x38,%esp$/;"	l
a44	hugefiletest.asm	/^ a44:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
a44	ls.asm	/^ a44:	a1 30 0e 00 00       	mov    0xe30,%eax$/;"	l
a44	sh.asm	/^     a44:	83 c4 10             	add    $0x10,%esp$/;"	l
a44	usertests.asm	/^     a44:	81 7d f0 08 04 00 00 	cmpl   $0x408,-0x10(%ebp)$/;"	l
a45	threadtest.asm	/^     a45:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
a47	hugefiletest.asm	/^ a47:	8b 45 f8             	mov    -0x8(%ebp),%eax$/;"	l
a47	sh.asm	/^     a47:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a49	grep.asm	/^ a49:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a49	ls.asm	/^ a49:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a4a	hugefiletest.asm	/^ a4a:	8b 10                	mov    (%eax),%edx$/;"	l
a4a	sh.asm	/^     a4a:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a4b	usertests.asm	/^     a4b:	7e de                	jle    a2b <pipe1+0x6a>$/;"	l
a4c	grep.asm	/^ a4c:	a3 48 0e 00 00       	mov    %eax,0xe48$/;"	l
a4c	hugefiletest.asm	/^ a4c:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
a4c	ls.asm	/^ a4c:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
a4c	threadtest.asm	/^     a4c:	eb 41                	jmp    a8f <sbrktest+0x50>$/;"	l
a4d	sh.asm	/^     a4d:	c9                   	leave  $/;"	l
a4d	usertests.asm	/^     a4d:	8b 45 dc             	mov    -0x24(%ebp),%eax$/;"	l
a4e	sh.asm	/^     a4e:	c3                   	ret    $/;"	l
a4e	threadtest.asm	/^     a4e:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a4f	hugefiletest.asm	/^ a4f:	89 10                	mov    %edx,(%eax)$/;"	l
a4f	sh.asm	/^     a4f:	55                   	push   %ebp$/;"	l
a5	cat.asm	/^  a5:	c7 45 f4 01 00 00 00 	movl   $0x1,-0xc(%ebp)$/;"	l
a5	grep.asm	/^  a5:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a5	hugefiletest.asm	/^  a5:	e9 80 00 00 00       	jmp    12a <main+0x12a>$/;"	l
a5	kill.asm	/^  a5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a5	ls.asm	/^  a5:	50                   	push   %eax$/;"	l
a5	mkdir.asm	/^  a5:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
a5	rm.asm	/^  a5:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
a5	threadtest.asm	/^      a5:	83 c4 10             	add    $0x10,%esp$/;"	l
a5	zombie.asm	/^  a5:	38 c2                	cmp    %al,%dl$/;"	l
a50	ls.asm	/^ a50:	75 23                	jne    a75 <malloc+0x46>$/;"	l
a50	sh.asm	/^     a50:	89 e5                	mov    %esp,%ebp$/;"	l
a50	usertests.asm	/^     a50:	83 ec 04             	sub    $0x4,%esp$/;"	l
a51	grep.asm	/^ a51:	a1 48 0e 00 00       	mov    0xe48,%eax$/;"	l
a51	hugefiletest.asm	/^ a51:	eb 08                	jmp    a5b <free+0xd7>$/;"	l
a51	threadtest.asm	/^     a51:	8d 55 cc             	lea    -0x34(%ebp),%edx$/;"	l
a52	ls.asm	/^ a52:	c7 45 f0 28 0e 00 00 	movl   $0xe28,-0x10(%ebp)$/;"	l
a52	sh.asm	/^     a52:	83 ec 28             	sub    $0x28,%esp$/;"	l
a53	hugefiletest.asm	/^ a53:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
a53	usertests.asm	/^     a53:	68 09 04 00 00       	push   $0x409$/;"	l
a54	threadtest.asm	/^     a54:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
a55	sh.asm	/^     a55:	83 ec 04             	sub    $0x4,%esp$/;"	l
a56	grep.asm	/^ a56:	a3 40 0e 00 00       	mov    %eax,0xe40$/;"	l
a56	hugefiletest.asm	/^ a56:	8b 55 f8             	mov    -0x8(%ebp),%edx$/;"	l
a57	threadtest.asm	/^     a57:	c1 e1 02             	shl    $0x2,%ecx$/;"	l
a58	sh.asm	/^     a58:	68 ef 14 00 00       	push   $0x14ef$/;"	l
a58	usertests.asm	/^     a58:	68 c0 8c 00 00       	push   $0x8cc0$/;"	l
a59	hugefiletest.asm	/^ a59:	89 10                	mov    %edx,(%eax)$/;"	l
a59	ls.asm	/^ a59:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a5a	threadtest.asm	/^     a5a:	01 ca                	add    %ecx,%edx$/;"	l
a5b	grep.asm	/^ a5b:	c7 05 44 0e 00 00 00 	movl   $0x0,0xe44$/;"	l
a5b	hugefiletest.asm	/^ a5b:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
a5c	ls.asm	/^ a5c:	a3 30 0e 00 00       	mov    %eax,0xe30$/;"	l
a5c	threadtest.asm	/^     a5c:	83 ec 04             	sub    $0x4,%esp$/;"	l
a5d	sh.asm	/^     a5d:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
a5d	usertests.asm	/^     a5d:	50                   	push   %eax$/;"	l
a5e	hugefiletest.asm	/^ a5e:	a3 20 0f 00 00       	mov    %eax,0xf20$/;"	l
a5e	usertests.asm	/^     a5e:	e8 b3 35 00 00       	call   4016 <write>$/;"	l
a5f	threadtest.asm	/^     a5f:	50                   	push   %eax$/;"	l
a6	ln.asm	/^  a6:	90                   	nop$/;"	l
a6	ls.asm	/^  a6:	e8 57 03 00 00       	call   402 <memset>$/;"	l
a6	my_userapp.asm	/^  a6:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a6	stressfs.asm	/^  a6:	83 c4 10             	add    $0x10,%esp$/;"	l
a6	wc.asm	/^  a6:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
a60	sh.asm	/^     a60:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
a60	threadtest.asm	/^     a60:	68 9f 09 00 00       	push   $0x99f$/;"	l
a61	ls.asm	/^ a61:	a1 30 0e 00 00       	mov    0xe30,%eax$/;"	l
a62	grep.asm	/^ a62:	00 00 00 $/;"	l
a63	hugefiletest.asm	/^ a63:	90                   	nop$/;"	l
a63	sh.asm	/^     a63:	e8 36 fc ff ff       	call   69e <peek>$/;"	l
a63	usertests.asm	/^     a63:	83 c4 10             	add    $0x10,%esp$/;"	l
a64	hugefiletest.asm	/^ a64:	c9                   	leave  $/;"	l
a65	grep.asm	/^ a65:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a65	hugefiletest.asm	/^ a65:	c3                   	ret    $/;"	l
a65	threadtest.asm	/^     a65:	52                   	push   %edx$/;"	l
a66	hugefiletest.asm	/^ a66:	55                   	push   %ebp$/;"	l
a66	ls.asm	/^ a66:	a3 28 0e 00 00       	mov    %eax,0xe28$/;"	l
a66	threadtest.asm	/^     a66:	e8 0d 0b 00 00       	call   1578 <thread_create>$/;"	l
a66	usertests.asm	/^     a66:	3d 09 04 00 00       	cmp    $0x409,%eax$/;"	l
a67	hugefiletest.asm	/^ a67:	89 e5                	mov    %esp,%ebp$/;"	l
a68	grep.asm	/^ a68:	8b 00                	mov    (%eax),%eax$/;"	l
a68	sh.asm	/^     a68:	83 c4 10             	add    $0x10,%esp$/;"	l
a69	hugefiletest.asm	/^ a69:	83 ec 18             	sub    $0x18,%esp$/;"	l
a6a	grep.asm	/^ a6a:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a6b	ls.asm	/^ a6b:	c7 05 2c 0e 00 00 00 	movl   $0x0,0xe2c$/;"	l
a6b	sh.asm	/^     a6b:	85 c0                	test   %eax,%eax$/;"	l
a6b	threadtest.asm	/^     a6b:	83 c4 10             	add    $0x10,%esp$/;"	l
a6b	usertests.asm	/^     a6b:	74 17                	je     a84 <pipe1+0xc3>$/;"	l
a6c	hugefiletest.asm	/^ a6c:	81 7d 08 ff 0f 00 00 	cmpl   $0xfff,0x8(%ebp)$/;"	l
a6d	grep.asm	/^ a6d:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a6d	sh.asm	/^     a6d:	74 16                	je     a85 <parseexec+0x36>$/;"	l
a6d	usertests.asm	/^     a6d:	83 ec 08             	sub    $0x8,%esp$/;"	l
a6e	threadtest.asm	/^     a6e:	85 c0                	test   %eax,%eax$/;"	l
a6f	sh.asm	/^     a6f:	83 ec 08             	sub    $0x8,%esp$/;"	l
a7	echo.asm	/^  a7:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
a7	init.asm	/^  a7:	68 6c 0b 00 00       	push   $0xb6c$/;"	l
a7	ln.asm	/^  a7:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a7	mkdir.asm	/^  a7:	89 ca                	mov    %ecx,%edx$/;"	l
a7	rm.asm	/^  a7:	89 ca                	mov    %ecx,%edx$/;"	l
a7	sh.asm	/^      a7:	52                   	push   %edx$/;"	l
a7	zombie.asm	/^  a7:	74 de                	je     87 <strcmp+0x5>$/;"	l
a70	grep.asm	/^ a70:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a70	threadtest.asm	/^     a70:	74 19                	je     a8b <sbrktest+0x4c>$/;"	l
a70	usertests.asm	/^     a70:	68 ed 49 00 00       	push   $0x49ed$/;"	l
a72	ls.asm	/^ a72:	00 00 00 $/;"	l
a72	sh.asm	/^     a72:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
a72	threadtest.asm	/^     a72:	83 ec 08             	sub    $0x8,%esp$/;"	l
a73	grep.asm	/^ a73:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
a73	hugefiletest.asm	/^ a73:	77 07                	ja     a7c <morecore+0x16>$/;"	l
a75	hugefiletest.asm	/^ a75:	c7 45 08 00 10 00 00 	movl   $0x1000,0x8(%ebp)$/;"	l
a75	ls.asm	/^ a75:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a75	sh.asm	/^     a75:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
a75	threadtest.asm	/^     a75:	68 01 1b 00 00       	push   $0x1b01$/;"	l
a75	usertests.asm	/^     a75:	6a 01                	push   $0x1$/;"	l
a76	grep.asm	/^ a76:	72 4d                	jb     ac5 <malloc+0xa6>$/;"	l
a77	usertests.asm	/^     a77:	e8 39 37 00 00       	call   41b5 <printf>$/;"	l
a78	grep.asm	/^ a78:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a78	ls.asm	/^ a78:	8b 00                	mov    (%eax),%eax$/;"	l
a78	sh.asm	/^     a78:	e8 24 ff ff ff       	call   9a1 <parseblock>$/;"	l
a7a	ls.asm	/^ a7a:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a7a	threadtest.asm	/^     a7a:	6a 01                	push   $0x1$/;"	l
a7b	grep.asm	/^ a7b:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a7c	hugefiletest.asm	/^ a7c:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a7c	threadtest.asm	/^     a7c:	e8 e6 0b 00 00       	call   1667 <printf>$/;"	l
a7c	usertests.asm	/^     a7c:	83 c4 10             	add    $0x10,%esp$/;"	l
a7d	ls.asm	/^ a7d:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a7d	sh.asm	/^     a7d:	83 c4 10             	add    $0x10,%esp$/;"	l
a7e	grep.asm	/^ a7e:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
a7f	hugefiletest.asm	/^ a7f:	c1 e0 03             	shl    $0x3,%eax$/;"	l
a7f	usertests.asm	/^     a7f:	e8 72 35 00 00       	call   3ff6 <exit>$/;"	l
a8	grep.asm	/^  a8:	ba 60 0e 00 00       	mov    $0xe60,%edx$/;"	l
a8	kill.asm	/^  a8:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
a8	sh.asm	/^      a8:	50                   	push   %eax$/;"	l
a8	test_master.asm	/^  a8:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
a8	threadtest.asm	/^      a8:	e8 fb 13 00 00       	call   14a8 <exit>$/;"	l
a80	ls.asm	/^ a80:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a80	sh.asm	/^     a80:	e9 fb 00 00 00       	jmp    b80 <parseexec+0x131>$/;"	l
a81	grep.asm	/^ a81:	75 0c                	jne    a8f <malloc+0x70>$/;"	l
a81	threadtest.asm	/^     a81:	83 c4 10             	add    $0x10,%esp$/;"	l
a82	hugefiletest.asm	/^ a82:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a83	grep.asm	/^ a83:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a83	ls.asm	/^ a83:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
a84	threadtest.asm	/^     a84:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
a84	usertests.asm	/^     a84:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)$/;"	l
a85	hugefiletest.asm	/^ a85:	50                   	push   %eax$/;"	l
a85	sh.asm	/^     a85:	e8 5b f9 ff ff       	call   3e5 <execcmd>$/;"	l
a86	grep.asm	/^ a86:	8b 10                	mov    (%eax),%edx$/;"	l
a86	hugefiletest.asm	/^ a86:	e8 31 fc ff ff       	call   6bc <sbrk>$/;"	l
a86	ls.asm	/^ a86:	72 4d                	jb     ad5 <malloc+0xa6>$/;"	l
a88	grep.asm	/^ a88:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a88	ls.asm	/^ a88:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a88	usertests.asm	/^     a88:	83 7d ec 04          	cmpl   $0x4,-0x14(%ebp)$/;"	l
a89	threadtest.asm	/^     a89:	eb 56                	jmp    ae1 <sbrktest+0xa2>$/;"	l
a8a	sh.asm	/^     a8a:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a8b	grep.asm	/^ a8b:	89 10                	mov    %edx,(%eax)$/;"	l
a8b	hugefiletest.asm	/^ a8b:	83 c4 10             	add    $0x10,%esp$/;"	l
a8b	ls.asm	/^ a8b:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a8b	threadtest.asm	/^     a8b:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
a8c	usertests.asm	/^     a8c:	7e 94                	jle    a22 <pipe1+0x61>$/;"	l
a8d	grep.asm	/^ a8d:	eb 26                	jmp    ab5 <malloc+0x96>$/;"	l
a8d	sh.asm	/^     a8d:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a8e	hugefiletest.asm	/^ a8e:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
a8e	ls.asm	/^ a8e:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
a8e	usertests.asm	/^     a8e:	e8 63 35 00 00       	call   3ff6 <exit>$/;"	l
a8f	grep.asm	/^ a8f:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a8f	threadtest.asm	/^     a8f:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)$/;"	l
a9	forktest.asm	/^  a9:	6a 01                	push   $0x1$/;"	l
a9	mkdir.asm	/^  a9:	89 fb                	mov    %edi,%ebx$/;"	l
a9	my_userapp.asm	/^  a9:	0f b6 00             	movzbl (%eax),%eax$/;"	l
a9	rm.asm	/^  a9:	89 fb                	mov    %edi,%ebx$/;"	l
a9	sh.asm	/^      a9:	e8 67 0e 00 00       	call   f15 <open>$/;"	l
a9	stressfs.asm	/^  a9:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
a9	usertests.asm	/^      a9:	83 ec 0c             	sub    $0xc,%esp$/;"	l
a9	zombie.asm	/^  a9:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
a90	sh.asm	/^     a90:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
a91	hugefiletest.asm	/^ a91:	83 7d f4 ff          	cmpl   $0xffffffff,-0xc(%ebp)$/;"	l
a91	ls.asm	/^ a91:	75 0c                	jne    a9f <malloc+0x70>$/;"	l
a92	grep.asm	/^ a92:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
a93	ls.asm	/^ a93:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a93	sh.asm	/^     a93:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
a93	threadtest.asm	/^     a93:	7e b9                	jle    a4e <sbrktest+0xf>$/;"	l
a93	usertests.asm	/^     a93:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
a95	grep.asm	/^ a95:	2b 45 ec             	sub    -0x14(%ebp),%eax$/;"	l
a95	hugefiletest.asm	/^ a95:	75 07                	jne    a9e <morecore+0x38>$/;"	l
a95	threadtest.asm	/^     a95:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
a96	ls.asm	/^ a96:	8b 10                	mov    (%eax),%edx$/;"	l
a97	hugefiletest.asm	/^ a97:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
a97	usertests.asm	/^     a97:	0f 8e f4 00 00 00    	jle    b91 <pipe1+0x1d0>$/;"	l
a98	grep.asm	/^ a98:	89 c2                	mov    %eax,%edx$/;"	l
a98	ls.asm	/^ a98:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
a9a	grep.asm	/^ a9a:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a9a	sh.asm	/^     a9a:	83 ec 04             	sub    $0x4,%esp$/;"	l
a9b	ls.asm	/^ a9b:	89 10                	mov    %edx,(%eax)$/;"	l
a9c	hugefiletest.asm	/^ a9c:	eb 26                	jmp    ac4 <morecore+0x5e>$/;"	l
a9c	threadtest.asm	/^     a9c:	eb 38                	jmp    ad6 <sbrktest+0x97>$/;"	l
a9d	grep.asm	/^ a9d:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
a9d	ls.asm	/^ a9d:	eb 26                	jmp    ac5 <malloc+0x96>$/;"	l
a9d	sh.asm	/^     a9d:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
a9d	usertests.asm	/^     a9d:	8b 45 dc             	mov    -0x24(%ebp),%eax$/;"	l
a9e	hugefiletest.asm	/^ a9e:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a9e	threadtest.asm	/^     a9e:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
a9f	ls.asm	/^ a9f:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
aa	echo.asm	/^  aa:	0f b6 12             	movzbl (%edx),%edx$/;"	l
aa	hugefiletest.asm	/^  aa:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
aa	ln.asm	/^  aa:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
aa	test_stride.asm	/^  aa:	75 ee                	jne    9a <main+0x9a>$/;"	l
aa	wc.asm	/^  aa:	0f 8f 72 ff ff ff    	jg     22 <wc+0x22>$/;"	l
aa0	grep.asm	/^ aa0:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
aa0	sh.asm	/^     aa0:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
aa0	usertests.asm	/^     aa0:	83 ec 0c             	sub    $0xc,%esp$/;"	l
aa1	hugefiletest.asm	/^ aa1:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
aa1	threadtest.asm	/^     aa1:	8b 44 85 cc          	mov    -0x34(%ebp,%eax,4),%eax$/;"	l
aa2	ls.asm	/^ aa2:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
aa3	grep.asm	/^ aa3:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
aa3	sh.asm	/^     aa3:	ff 75 f0             	pushl  -0x10(%ebp)$/;"	l
aa3	usertests.asm	/^     aa3:	50                   	push   %eax$/;"	l
aa4	hugefiletest.asm	/^ aa4:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
aa4	usertests.asm	/^     aa4:	e8 75 35 00 00       	call   401e <close>$/;"	l
aa5	ls.asm	/^ aa5:	2b 45 ec             	sub    -0x14(%ebp),%eax$/;"	l
aa5	threadtest.asm	/^     aa5:	83 ec 08             	sub    $0x8,%esp$/;"	l
aa6	grep.asm	/^ aa6:	c1 e0 03             	shl    $0x3,%eax$/;"	l
aa6	sh.asm	/^     aa6:	e8 12 fe ff ff       	call   8bd <parseredirs>$/;"	l
aa7	hugefiletest.asm	/^ aa7:	8b 55 08             	mov    0x8(%ebp),%edx$/;"	l
aa8	ls.asm	/^ aa8:	89 c2                	mov    %eax,%edx$/;"	l
aa8	threadtest.asm	/^     aa8:	8d 55 c8             	lea    -0x38(%ebp),%edx$/;"	l
aa9	grep.asm	/^ aa9:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
aa9	usertests.asm	/^     aa9:	83 c4 10             	add    $0x10,%esp$/;"	l
aaa	hugefiletest.asm	/^ aaa:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
aaa	ls.asm	/^ aaa:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
aab	sh.asm	/^     aab:	83 c4 10             	add    $0x10,%esp$/;"	l
aab	threadtest.asm	/^     aab:	52                   	push   %edx$/;"	l
aac	grep.asm	/^ aac:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
aac	threadtest.asm	/^     aac:	50                   	push   %eax$/;"	l
aac	usertests.asm	/^     aac:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)$/;"	l
aad	hugefiletest.asm	/^ aad:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
aad	ls.asm	/^ aad:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
aad	threadtest.asm	/^     aad:	e8 ce 0a 00 00       	call   1580 <thread_join>$/;"	l
aae	sh.asm	/^     aae:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
aaf	grep.asm	/^ aaf:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
ab	forktest.asm	/^  ab:	e8 50 ff ff ff       	call   0 <printf>$/;"	l
ab	kill.asm	/^  ab:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
ab	ls.asm	/^  ab:	83 c4 10             	add    $0x10,%esp$/;"	l
ab	mkdir.asm	/^  ab:	89 5d 08             	mov    %ebx,0x8(%ebp)$/;"	l
ab	rm.asm	/^  ab:	89 5d 08             	mov    %ebx,0x8(%ebp)$/;"	l
ab	test_mlfq.asm	/^  ab:	76 37                	jbe    e4 <main+0xe4>$/;"	l
ab	test_sample.asm	/^  ab:	89 d1                	mov    %edx,%ecx$/;"	l
ab0	hugefiletest.asm	/^ ab0:	83 c0 08             	add    $0x8,%eax$/;"	l
ab0	ls.asm	/^ ab0:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ab1	sh.asm	/^     ab1:	e9 87 00 00 00       	jmp    b3d <parseexec+0xee>$/;"	l
ab2	grep.asm	/^ ab2:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ab2	threadtest.asm	/^     ab2:	83 c4 10             	add    $0x10,%esp$/;"	l
ab3	hugefiletest.asm	/^ ab3:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ab3	ls.asm	/^ ab3:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
ab3	usertests.asm	/^     ab3:	c7 45 e8 01 00 00 00 	movl   $0x1,-0x18(%ebp)$/;"	l
ab5	grep.asm	/^ ab5:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ab5	threadtest.asm	/^     ab5:	85 c0                	test   %eax,%eax$/;"	l
ab6	hugefiletest.asm	/^ ab6:	50                   	push   %eax$/;"	l
ab6	ls.asm	/^ ab6:	c1 e0 03             	shl    $0x3,%eax$/;"	l
ab6	sh.asm	/^     ab6:	8d 45 e0             	lea    -0x20(%ebp),%eax$/;"	l
ab7	hugefiletest.asm	/^ ab7:	e8 c8 fe ff ff       	call   984 <free>$/;"	l
ab7	threadtest.asm	/^     ab7:	74 19                	je     ad2 <sbrktest+0x93>$/;"	l
ab8	grep.asm	/^ ab8:	a3 48 0e 00 00       	mov    %eax,0xe48$/;"	l
ab9	ls.asm	/^ ab9:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
ab9	sh.asm	/^     ab9:	50                   	push   %eax$/;"	l
ab9	threadtest.asm	/^     ab9:	83 ec 08             	sub    $0x8,%esp$/;"	l
aba	sh.asm	/^     aba:	8d 45 e4             	lea    -0x1c(%ebp),%eax$/;"	l
aba	usertests.asm	/^     aba:	eb 66                	jmp    b22 <pipe1+0x161>$/;"	l
abc	hugefiletest.asm	/^ abc:	83 c4 10             	add    $0x10,%esp$/;"	l
abc	ls.asm	/^ abc:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
abc	threadtest.asm	/^     abc:	68 2e 1b 00 00       	push   $0x1b2e$/;"	l
abc	usertests.asm	/^     abc:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
abd	grep.asm	/^ abd:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
abd	sh.asm	/^     abd:	50                   	push   %eax$/;"	l
abe	sh.asm	/^     abe:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
abf	hugefiletest.asm	/^ abf:	a1 20 0f 00 00       	mov    0xf20,%eax$/;"	l
abf	ls.asm	/^ abf:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
ac	cat.asm	/^  ac:	eb 71                	jmp    11f <main+0xa5>$/;"	l
ac	init.asm	/^  ac:	68 cd 08 00 00       	push   $0x8cd$/;"	l
ac	my_userapp.asm	/^  ac:	84 c0                	test   %al,%al$/;"	l
ac	stressfs.asm	/^  ac:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
ac	test_master.asm	/^  ac:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)$/;"	l
ac	test_stride.asm	/^  ac:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
ac	usertests.asm	/^      ac:	68 de 45 00 00       	push   $0x45de$/;"	l
ac	zombie.asm	/^  ac:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ac0	grep.asm	/^ ac0:	83 c0 08             	add    $0x8,%eax$/;"	l
ac1	sh.asm	/^     ac1:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
ac1	threadtest.asm	/^     ac1:	6a 01                	push   $0x1$/;"	l
ac2	ls.asm	/^ ac2:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
ac3	grep.asm	/^ ac3:	eb 3b                	jmp    b00 <malloc+0xe1>$/;"	l
ac3	threadtest.asm	/^     ac3:	e8 9f 0b 00 00       	call   1667 <printf>$/;"	l
ac3	usertests.asm	/^     ac3:	eb 3b                	jmp    b00 <pipe1+0x13f>$/;"	l
ac4	hugefiletest.asm	/^ ac4:	c9                   	leave  $/;"	l
ac4	sh.asm	/^     ac4:	e8 84 fa ff ff       	call   54d <gettoken>$/;"	l
ac5	grep.asm	/^ ac5:	a1 48 0e 00 00       	mov    0xe48,%eax$/;"	l
ac5	hugefiletest.asm	/^ ac5:	c3                   	ret    $/;"	l
ac5	ls.asm	/^ ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ac5	usertests.asm	/^     ac5:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
ac6	hugefiletest.asm	/^ ac6:	55                   	push   %ebp$/;"	l
ac7	hugefiletest.asm	/^ ac7:	89 e5                	mov    %esp,%ebp$/;"	l
ac8	ls.asm	/^ ac8:	a3 30 0e 00 00       	mov    %eax,0xe30$/;"	l
ac8	threadtest.asm	/^     ac8:	83 c4 10             	add    $0x10,%esp$/;"	l
ac8	usertests.asm	/^     ac8:	05 c0 8c 00 00       	add    $0x8cc0,%eax$/;"	l
ac9	hugefiletest.asm	/^ ac9:	83 ec 18             	sub    $0x18,%esp$/;"	l
ac9	sh.asm	/^     ac9:	83 c4 10             	add    $0x10,%esp$/;"	l
aca	grep.asm	/^ aca:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
acb	threadtest.asm	/^     acb:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
acc	hugefiletest.asm	/^ acc:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
acc	sh.asm	/^     acc:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
acd	grep.asm	/^ acd:	75 1e                	jne    aed <malloc+0xce>$/;"	l
acd	ls.asm	/^ acd:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
acd	usertests.asm	/^     acd:	0f b6 00             	movzbl (%eax),%eax$/;"	l
acf	grep.asm	/^ acf:	83 ec 0c             	sub    $0xc,%esp$/;"	l
acf	hugefiletest.asm	/^ acf:	83 c0 07             	add    $0x7,%eax$/;"	l
acf	sh.asm	/^     acf:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
acquire	spinlock.c	/^acquire(struct spinlock *lk)$/;"	f
acquiresleep	sleeplock.c	/^acquiresleep(struct sleeplock *lk)$/;"	f
ad	echo.asm	/^  ad:	88 10                	mov    %dl,(%eax)$/;"	l
ad	grep.asm	/^  ad:	29 d0                	sub    %edx,%eax$/;"	l
ad	hugefiletest.asm	/^  ad:	ba 1f 85 eb 51       	mov    $0x51eb851f,%edx$/;"	l
ad	ln.asm	/^  ad:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
ad	test_mlfq.asm	/^  ad:	8b 4d e8             	mov    -0x18(%ebp),%ecx$/;"	l
ad	test_sample.asm	/^  ad:	89 ca                	mov    %ecx,%edx$/;"	l
ad	threadtest.asm	/^      ad:	c7 45 e4 00 00 00 00 	movl   $0x0,-0x1c(%ebp)$/;"	l
ad0	ls.asm	/^ ad0:	83 c0 08             	add    $0x8,%eax$/;"	l
ad0	threadtest.asm	/^     ad0:	eb 0f                	jmp    ae1 <sbrktest+0xa2>$/;"	l
ad0	usertests.asm	/^     ad0:	0f be c8             	movsbl %al,%ecx$/;"	l
ad2	grep.asm	/^ ad2:	ff 75 ec             	pushl  -0x14(%ebp)$/;"	l
ad2	hugefiletest.asm	/^ ad2:	c1 e8 03             	shr    $0x3,%eax$/;"	l
ad2	threadtest.asm	/^     ad2:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
ad3	ls.asm	/^ ad3:	eb 3b                	jmp    b10 <malloc+0xe1>$/;"	l
ad3	sh.asm	/^     ad3:	0f 84 84 00 00 00    	je     b5d <parseexec+0x10e>$/;"	l
ad3	usertests.asm	/^     ad3:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ad5	grep.asm	/^ ad5:	e8 e5 fe ff ff       	call   9bf <morecore>$/;"	l
ad5	hugefiletest.asm	/^ ad5:	83 c0 01             	add    $0x1,%eax$/;"	l
ad5	ls.asm	/^ ad5:	a1 30 0e 00 00       	mov    0xe30,%eax$/;"	l
ad6	threadtest.asm	/^     ad6:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)$/;"	l
ad6	usertests.asm	/^     ad6:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
ad8	hugefiletest.asm	/^ ad8:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
ad9	sh.asm	/^     ad9:	83 7d e8 61          	cmpl   $0x61,-0x18(%ebp)$/;"	l
ad9	usertests.asm	/^     ad9:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
ada	grep.asm	/^ ada:	83 c4 10             	add    $0x10,%esp$/;"	l
ada	ls.asm	/^ ada:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
ada	threadtest.asm	/^     ada:	7e c2                	jle    a9e <sbrktest+0x5f>$/;"	l
adb	hugefiletest.asm	/^ adb:	a1 20 0f 00 00       	mov    0xf20,%eax$/;"	l
adc	threadtest.asm	/^     adc:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
adc	usertests.asm	/^     adc:	31 c8                	xor    %ecx,%eax$/;"	l
add	grep.asm	/^ add:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
add	ls.asm	/^ add:	75 1e                	jne    afd <malloc+0xce>$/;"	l
add	sh.asm	/^     add:	74 10                	je     aef <parseexec+0xa0>$/;"	l
addr	kernel.asm	/^  addr = *(myproc()->sz);$/;"	d
addr	kernel.asm	/^  addr = P2V(a);$/;"	d
addr	mp.h	/^  uint *addr;                  \/\/ I\/O APIC address$/;"	m	struct:mpioapic
addrs	file.h	/^  uint addrs[NDIRECT+3];$/;"	m	struct:inode
addrs	fs.h	/^  uint addrs[NDIRECT+3];   \/\/ Data block addresses$/;"	m	struct:dinode
ade	usertests.asm	/^     ade:	0f b6 c0             	movzbl %al,%eax$/;"	l
adf	ls.asm	/^ adf:	83 ec 0c             	sub    $0xc,%esp$/;"	l
adf	sh.asm	/^     adf:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ae	cat.asm	/^  ae:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
ae	kill.asm	/^  ae:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
ae	ls.asm	/^  ae:	b8 18 0e 00 00       	mov    $0xe18,%eax$/;"	l
ae	mkdir.asm	/^  ae:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
ae	my_userapp.asm	/^  ae:	74 10                	je     c0 <strcmp+0x27>$/;"	l
ae	rm.asm	/^  ae:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
ae	sh.asm	/^      ae:	83 c4 10             	add    $0x10,%esp$/;"	l
ae0	grep.asm	/^ ae0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
ae0	hugefiletest.asm	/^ ae0:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
ae1	threadtest.asm	/^     ae1:	c9                   	leave  $/;"	l
ae1	usertests.asm	/^     ae1:	85 c0                	test   %eax,%eax$/;"	l
ae2	ls.asm	/^ ae2:	ff 75 ec             	pushl  -0x14(%ebp)$/;"	l
ae2	sh.asm	/^     ae2:	68 c2 14 00 00       	push   $0x14c2$/;"	l
ae2	threadtest.asm	/^     ae2:	c3                   	ret    $/;"	l
ae3	hugefiletest.asm	/^ ae3:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
ae3	threadtest.asm	/^     ae3:	55                   	push   %ebp$/;"	l
ae3	usertests.asm	/^     ae3:	74 17                	je     afc <pipe1+0x13b>$/;"	l
ae4	grep.asm	/^ ae4:	75 07                	jne    aed <malloc+0xce>$/;"	l
ae4	threadtest.asm	/^     ae4:	89 e5                	mov    %esp,%ebp$/;"	l
ae5	ls.asm	/^ ae5:	e8 e5 fe ff ff       	call   9cf <morecore>$/;"	l
ae5	usertests.asm	/^     ae5:	83 ec 08             	sub    $0x8,%esp$/;"	l
ae6	grep.asm	/^ ae6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ae6	threadtest.asm	/^     ae6:	83 ec 08             	sub    $0x8,%esp$/;"	l
ae7	hugefiletest.asm	/^ ae7:	75 23                	jne    b0c <malloc+0x46>$/;"	l
ae7	sh.asm	/^     ae7:	e8 b0 f8 ff ff       	call   39c <panic>$/;"	l
ae8	usertests.asm	/^     ae8:	68 fb 49 00 00       	push   $0x49fb$/;"	l
ae9	hugefiletest.asm	/^ ae9:	c7 45 f0 18 0f 00 00 	movl   $0xf18,-0x10(%ebp)$/;"	l
ae9	threadtest.asm	/^     ae9:	e8 3a 0a 00 00       	call   1528 <getpid>$/;"	l
aea	ls.asm	/^ aea:	83 c4 10             	add    $0x10,%esp$/;"	l
aeb	grep.asm	/^ aeb:	eb 13                	jmp    b00 <malloc+0xe1>$/;"	l
aec	sh.asm	/^     aec:	83 c4 10             	add    $0x10,%esp$/;"	l
aed	grep.asm	/^ aed:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
aed	ls.asm	/^ aed:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
aed	usertests.asm	/^     aed:	6a 01                	push   $0x1$/;"	l
aee	threadtest.asm	/^     aee:	83 ec 0c             	sub    $0xc,%esp$/;"	l
aef	sh.asm	/^     aef:	8b 4d e4             	mov    -0x1c(%ebp),%ecx$/;"	l
aef	usertests.asm	/^     aef:	e8 c1 36 00 00       	call   41b5 <printf>$/;"	l
af	echo.asm	/^  af:	0f b6 00             	movzbl (%eax),%eax$/;"	l
af	grep.asm	/^  af:	29 45 f4             	sub    %eax,-0xc(%ebp)$/;"	l
af	test_sample.asm	/^  af:	c1 e2 04             	shl    $0x4,%edx$/;"	l
af	zombie.asm	/^  af:	0f b6 d0             	movzbl %al,%edx$/;"	l
af0	grep.asm	/^ af0:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
af0	hugefiletest.asm	/^ af0:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
af0	ls.asm	/^ af0:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
af1	threadtest.asm	/^     af1:	50                   	push   %eax$/;"	l
af2	sh.asm	/^     af2:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
af2	threadtest.asm	/^     af2:	e8 e1 09 00 00       	call   14d8 <kill>$/;"	l
af3	grep.asm	/^ af3:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
af3	hugefiletest.asm	/^ af3:	a3 20 0f 00 00       	mov    %eax,0xf20$/;"	l
af4	ls.asm	/^ af4:	75 07                	jne    afd <malloc+0xce>$/;"	l
af4	usertests.asm	/^     af4:	83 c4 10             	add    $0x10,%esp$/;"	l
af5	sh.asm	/^     af5:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
af6	grep.asm	/^ af6:	8b 00                	mov    (%eax),%eax$/;"	l
af6	ls.asm	/^ af6:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
af7	threadtest.asm	/^     af7:	83 c4 10             	add    $0x10,%esp$/;"	l
af7	usertests.asm	/^     af7:	e9 ac 00 00 00       	jmp    ba8 <pipe1+0x1e7>$/;"	l
af8	grep.asm	/^ af8:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
af8	hugefiletest.asm	/^ af8:	a1 20 0f 00 00       	mov    0xf20,%eax$/;"	l
af8	sh.asm	/^     af8:	89 4c 90 04          	mov    %ecx,0x4(%eax,%edx,4)$/;"	l
afa	threadtest.asm	/^     afa:	eb fe                	jmp    afa <killthreadmain+0x17>$/;"	l
afb	grep.asm	/^ afb:	e9 6d ff ff ff       	jmp    a6d <malloc+0x4e>$/;"	l
afb	ls.asm	/^ afb:	eb 13                	jmp    b10 <malloc+0xe1>$/;"	l
afc	sh.asm	/^     afc:	8b 55 e0             	mov    -0x20(%ebp),%edx$/;"	l
afc	threadtest.asm	/^     afc:	55                   	push   %ebp$/;"	l
afc	usertests.asm	/^     afc:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
afd	hugefiletest.asm	/^ afd:	a3 18 0f 00 00       	mov    %eax,0xf18$/;"	l
afd	ls.asm	/^ afd:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
afd	threadtest.asm	/^     afd:	89 e5                	mov    %esp,%ebp$/;"	l
aff	sh.asm	/^     aff:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
aff	threadtest.asm	/^     aff:	83 ec 38             	sub    $0x38,%esp$/;"	l
alarm	proc.c	/^alarm(char *proc_name) {						\/\/ it is the syscall used when i test my scheduler working$/;"	f
align	elf.h	/^  uint align;$/;"	m	struct:proghdr
allocproc	proc.c	/^allocproc(void)$/;"	f	file:
allocuvm	vm.c	/^allocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
alltraps	kernel.asm	/^alltraps:$/;"	l
alltraps	trapasm.S	/^alltraps:$/;"	l
amt	usertests.asm	/^  amt = (BIG) - (uint)a;$/;"	d
ap	cat.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	echo.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	grep.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	hugefiletest.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	init.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	kill.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ln.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	ls.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	mkdir.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	my_userapp.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	rm.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	sh.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	stressfs.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	test_master.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	test_mlfq.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	test_sample.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	test_stride.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	threadtest.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	usertests.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	wc.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
ap	zombie.asm	/^  ap = (uint*)(void*)&fmt + 1;$/;"	d
apicid	kernel.asm	/^  apicid = lapicid();$/;"	d
apicid	mp.h	/^  uchar apicid;                 \/\/ local APIC id$/;"	m	struct:mpproc
apicid	proc.h	/^  uchar apicid;                \/\/ Local APIC ID$/;"	m	struct:cpu
apicno	mp.h	/^  uchar apicno;                 \/\/ I\/O APIC id$/;"	m	struct:mpioapic
arg	kernel.asm	/^	arg = (void*) n;$/;"	d
argc	sh.asm	/^  argc = 0;$/;"	d
argfd	sysfile.c	/^argfd(int n, int *pfd, struct file **pf)$/;"	f	file:
argint	syscall.c	/^argint(int n, int *ip)$/;"	f
argp	kernel.asm	/^  argp = (uint*)(void*)(&fmt + 1);$/;"	d
argptest	usertests.c	/^void argptest()$/;"	f
argptr	syscall.c	/^argptr(int n, char **pp, int size)$/;"	f
args	mmu.h	/^  uint args : 5;        \/\/ # args, 0 for interrupt\/trap gates$/;"	m	struct:gatedesc
argstr	syscall.c	/^argstr(int n, char **pp)$/;"	f
argv	init.c	/^char *argv[] = { "sh", 0 };$/;"	v
argv	initcode.S	/^argv:$/;"	l
argv	sh.c	/^  char *argv[MAXARGS];$/;"	m	struct:execcmd	file:
atoi	ulib.c	/^atoi(const char *s)$/;"	f
avl	mmu.h	/^  uint avl : 1;        \/\/ Unused (available for software use)$/;"	m	struct:segdesc
b	cat.asm	/^   b:	ff 75 f4             	pushl  -0xc(%ebp)$/;"	l
b	echo.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	hugefiletest.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	init.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	kernel.asm	/^			b = (uint*)bp2->data;$/;"	d
b	kernel.asm	/^  b = bget(dev, blockno);$/;"	d
b	kill.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	ln.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	mkdir.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	my_userapp.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	rm.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	stressfs.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	test_master.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	test_mlfq.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	test_sample.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	test_stride.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b	threadtest.asm	/^       b:	89 e5                	mov    %esp,%ebp$/;"	l
b	usertests.asm	/^       b:	83 ec 08             	sub    $0x8,%esp$/;"	l
b	usertests.asm	/^    b = sbrk(1);$/;"	d
b	zombie.asm	/^   b:	89 e5                	mov    %esp,%ebp$/;"	l
b0	forktest.asm	/^  b0:	83 c4 10             	add    $0x10,%esp$/;"	l
b0	ln.asm	/^  b0:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
b0	my_userapp.asm	/^  b0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b0	test_master.asm	/^  b0:	7e f1                	jle    a3 <main+0xa3>$/;"	l
b0	test_mlfq.asm	/^  b0:	8b 55 e4             	mov    -0x1c(%ebp),%edx$/;"	l
b0	test_stride.asm	/^  b0:	e8 23 03 00 00       	call   3d8 <uptime>$/;"	l
b0	wc.asm	/^  b0:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
b00	grep.asm	/^ b00:	c9                   	leave  $/;"	l
b00	ls.asm	/^ b00:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
b00	usertests.asm	/^     b00:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b01	grep.asm	/^ b01:	c3                   	ret    $/;"	l
b02	hugefiletest.asm	/^ b02:	c7 05 1c 0f 00 00 00 	movl   $0x0,0xf1c$/;"	l
b02	sh.asm	/^     b02:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
b02	threadtest.asm	/^     b02:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
b03	ls.asm	/^ b03:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b03	usertests.asm	/^     b03:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
b05	sh.asm	/^     b05:	83 c1 08             	add    $0x8,%ecx$/;"	l
b06	ls.asm	/^ b06:	8b 00                	mov    (%eax),%eax$/;"	l
b06	usertests.asm	/^     b06:	7c bd                	jl     ac5 <pipe1+0x104>$/;"	l
b08	ls.asm	/^ b08:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
b08	sh.asm	/^     b08:	89 54 88 0c          	mov    %edx,0xc(%eax,%ecx,4)$/;"	l
b08	usertests.asm	/^     b08:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b09	hugefiletest.asm	/^ b09:	00 00 00 $/;"	l
b09	threadtest.asm	/^     b09:	eb 41                	jmp    b4c <killtest+0x50>$/;"	l
b0b	ls.asm	/^ b0b:	e9 6d ff ff ff       	jmp    a7d <malloc+0x4e>$/;"	l
b0b	threadtest.asm	/^     b0b:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b0b	usertests.asm	/^     b0b:	01 45 e4             	add    %eax,-0x1c(%ebp)$/;"	l
b0c	hugefiletest.asm	/^ b0c:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b0c	sh.asm	/^     b0c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
b0e	threadtest.asm	/^     b0e:	8d 55 cc             	lea    -0x34(%ebp),%edx$/;"	l
b0e	usertests.asm	/^     b0e:	d1 65 e8             	shll   -0x18(%ebp)$/;"	d
b0f	hugefiletest.asm	/^ b0f:	8b 00                	mov    (%eax),%eax$/;"	l
b1	cat.asm	/^  b1:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx$/;"	l
b1	init.asm	/^  b1:	e8 da 02 00 00       	call   390 <exec>$/;"	l
b1	kill.asm	/^  b1:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
b1	mkdir.asm	/^  b1:	90                   	nop$/;"	l
b1	rm.asm	/^  b1:	90                   	nop$/;"	l
b1	sh.asm	/^      b1:	85 c0                	test   %eax,%eax$/;"	l
b1	usertests.asm	/^      b1:	e8 b0 3f 00 00       	call   4066 <chdir>$/;"	l
b10	ls.asm	/^ b10:	c9                   	leave  $/;"	l
b10	sh.asm	/^     b10:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)$/;"	l
b11	hugefiletest.asm	/^ b11:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
b11	ls.asm	/^ b11:	c3                   	ret    $/;"	l
b11	threadtest.asm	/^     b11:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
b11	usertests.asm	/^     b11:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
b14	hugefiletest.asm	/^ b14:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b14	sh.asm	/^     b14:	7e 10                	jle    b26 <parseexec+0xd7>$/;"	l
b14	threadtest.asm	/^     b14:	c1 e1 02             	shl    $0x2,%ecx$/;"	l
b14	usertests.asm	/^     b14:	3d 00 20 00 00       	cmp    $0x2000,%eax$/;"	l
b16	sh.asm	/^     b16:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b17	hugefiletest.asm	/^ b17:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
b17	threadtest.asm	/^     b17:	01 ca                	add    %ecx,%edx$/;"	l
b19	sh.asm	/^     b19:	68 11 15 00 00       	push   $0x1511$/;"	l
b19	threadtest.asm	/^     b19:	83 ec 04             	sub    $0x4,%esp$/;"	l
b19	usertests.asm	/^     b19:	76 07                	jbe    b22 <pipe1+0x161>$/;"	l
b1a	hugefiletest.asm	/^ b1a:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
b1b	usertests.asm	/^     b1b:	c7 45 e8 00 20 00 00 	movl   $0x2000,-0x18(%ebp)$/;"	l
b1c	threadtest.asm	/^     b1c:	50                   	push   %eax$/;"	l
b1d	hugefiletest.asm	/^ b1d:	72 4d                	jb     b6c <malloc+0xa6>$/;"	l
b1d	threadtest.asm	/^     b1d:	68 e3 0a 00 00       	push   $0xae3$/;"	l
b1e	sh.asm	/^     b1e:	e8 79 f8 ff ff       	call   39c <panic>$/;"	l
b1f	hugefiletest.asm	/^ b1f:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b2	echo.asm	/^  b2:	84 c0                	test   %al,%al$/;"	l
b2	grep.asm	/^  b2:	83 ec 04             	sub    $0x4,%esp$/;"	l
b2	hugefiletest.asm	/^  b2:	89 c8                	mov    %ecx,%eax$/;"	l
b2	mkdir.asm	/^  b2:	5b                   	pop    %ebx$/;"	l
b2	rm.asm	/^  b2:	5b                   	pop    %ebx$/;"	l
b2	test_master.asm	/^  b2:	e8 57 02 00 00       	call   30e <exit>$/;"	l
b2	test_sample.asm	/^  b2:	29 ca                	sub    %ecx,%edx$/;"	l
b2	zombie.asm	/^  b2:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b22	hugefiletest.asm	/^ b22:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
b22	threadtest.asm	/^     b22:	52                   	push   %edx$/;"	l
b22	usertests.asm	/^     b22:	8b 45 d8             	mov    -0x28(%ebp),%eax$/;"	l
b23	sh.asm	/^     b23:	83 c4 10             	add    $0x10,%esp$/;"	l
b23	threadtest.asm	/^     b23:	e8 50 0a 00 00       	call   1578 <thread_create>$/;"	l
b25	hugefiletest.asm	/^ b25:	3b 45 ec             	cmp    -0x14(%ebp),%eax$/;"	l
b25	usertests.asm	/^     b25:	83 ec 04             	sub    $0x4,%esp$/;"	l
b26	sh.asm	/^     b26:	83 ec 04             	sub    $0x4,%esp$/;"	l
b28	hugefiletest.asm	/^ b28:	75 0c                	jne    b36 <malloc+0x70>$/;"	l
b28	threadtest.asm	/^     b28:	83 c4 10             	add    $0x10,%esp$/;"	l
b28	usertests.asm	/^     b28:	ff 75 e8             	pushl  -0x18(%ebp)$/;"	l
b29	sh.asm	/^     b29:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
b2a	hugefiletest.asm	/^ b2a:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b2b	threadtest.asm	/^     b2b:	85 c0                	test   %eax,%eax$/;"	l
b2b	usertests.asm	/^     b2b:	68 c0 8c 00 00       	push   $0x8cc0$/;"	l
b2c	sh.asm	/^     b2c:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
b2d	hugefiletest.asm	/^ b2d:	8b 10                	mov    (%eax),%edx$/;"	l
b2d	threadtest.asm	/^     b2d:	74 19                	je     b48 <killtest+0x4c>$/;"	l
b2f	hugefiletest.asm	/^ b2f:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b2f	sh.asm	/^     b2f:	ff 75 f0             	pushl  -0x10(%ebp)$/;"	l
b2f	threadtest.asm	/^     b2f:	83 ec 08             	sub    $0x8,%esp$/;"	l
b3	forktest.asm	/^  b3:	e8 b2 02 00 00       	call   36a <exit>$/;"	l
b3	ln.asm	/^  b3:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
b3	ls.asm	/^  b3:	8b 5d fc             	mov    -0x4(%ebp),%ebx$/;"	l
b3	mkdir.asm	/^  b3:	5f                   	pop    %edi$/;"	l
b3	my_userapp.asm	/^  b3:	0f b6 10             	movzbl (%eax),%edx$/;"	l
b3	rm.asm	/^  b3:	5f                   	pop    %edi$/;"	l
b3	sh.asm	/^      b3:	79 1e                	jns    d3 <runcmd+0xd3>$/;"	l
b3	stressfs.asm	/^  b3:	eb 1e                	jmp    d3 <main+0xd3>$/;"	l
b3	test_mlfq.asm	/^  b3:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
b30	usertests.asm	/^     b30:	50                   	push   %eax$/;"	l
b31	usertests.asm	/^     b31:	e8 d8 34 00 00       	call   400e <read>$/;"	l
b32	hugefiletest.asm	/^ b32:	89 10                	mov    %edx,(%eax)$/;"	l
b32	sh.asm	/^     b32:	e8 86 fd ff ff       	call   8bd <parseredirs>$/;"	l
b32	threadtest.asm	/^     b32:	68 01 1b 00 00       	push   $0x1b01$/;"	l
b34	hugefiletest.asm	/^ b34:	eb 26                	jmp    b5c <malloc+0x96>$/;"	l
b36	hugefiletest.asm	/^ b36:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b36	usertests.asm	/^     b36:	83 c4 10             	add    $0x10,%esp$/;"	l
b37	sh.asm	/^     b37:	83 c4 10             	add    $0x10,%esp$/;"	l
b37	threadtest.asm	/^     b37:	6a 01                	push   $0x1$/;"	l
b39	hugefiletest.asm	/^ b39:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
b39	threadtest.asm	/^     b39:	e8 29 0b 00 00       	call   1667 <printf>$/;"	l
b39	usertests.asm	/^     b39:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
b3a	sh.asm	/^     b3a:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
b3c	hugefiletest.asm	/^ b3c:	2b 45 ec             	sub    -0x14(%ebp),%eax$/;"	l
b3c	usertests.asm	/^     b3c:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
b3d	sh.asm	/^     b3d:	83 ec 04             	sub    $0x4,%esp$/;"	l
b3e	threadtest.asm	/^     b3e:	83 c4 10             	add    $0x10,%esp$/;"	l
b3f	hugefiletest.asm	/^ b3f:	89 c2                	mov    %eax,%edx$/;"	l
b4	echo.asm	/^  b4:	75 e2                	jne    98 <strcpy+0xd>$/;"	l
b4	hugefiletest.asm	/^  b4:	f7 ea                	imul   %edx$/;"	l
b4	kill.asm	/^  b4:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
b4	mkdir.asm	/^  b4:	5d                   	pop    %ebp$/;"	l
b4	rm.asm	/^  b4:	5d                   	pop    %ebp$/;"	l
b4	test_sample.asm	/^  b4:	01 d0                	add    %edx,%eax$/;"	l
b4	threadtest.asm	/^      b4:	e8 e7 13 00 00       	call   14a0 <fork>$/;"	l
b4	wc.asm	/^  b4:	79 17                	jns    cd <wc+0xcd>$/;"	l
b40	sh.asm	/^     b40:	68 1f 15 00 00       	push   $0x151f$/;"	l
b40	usertests.asm	/^     b40:	0f 8f 76 ff ff ff    	jg     abc <pipe1+0xfb>$/;"	l
b41	hugefiletest.asm	/^ b41:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b41	threadtest.asm	/^     b41:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
b44	hugefiletest.asm	/^ b44:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
b45	sh.asm	/^     b45:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
b46	threadtest.asm	/^     b46:	eb 53                	jmp    b9b <killtest+0x9f>$/;"	l
b46	usertests.asm	/^     b46:	81 7d e4 2d 14 00 00 	cmpl   $0x142d,-0x1c(%ebp)$/;"	l
b47	hugefiletest.asm	/^ b47:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b48	sh.asm	/^     b48:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
b48	threadtest.asm	/^     b48:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
b4a	hugefiletest.asm	/^ b4a:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
b4b	sh.asm	/^     b4b:	e8 4e fb ff ff       	call   69e <peek>$/;"	l
b4c	threadtest.asm	/^     b4c:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)$/;"	l
b4d	hugefiletest.asm	/^ b4d:	c1 e0 03             	shl    $0x3,%eax$/;"	l
b4d	usertests.asm	/^     b4d:	74 1a                	je     b69 <pipe1+0x1a8>$/;"	l
b4f	usertests.asm	/^     b4f:	83 ec 04             	sub    $0x4,%esp$/;"	l
b5	grep.asm	/^  b5:	ff 75 f4             	pushl  -0xc(%ebp)$/;"	l
b5	mkdir.asm	/^  b5:	c3                   	ret    $/;"	l
b5	rm.asm	/^  b5:	c3                   	ret    $/;"	l
b5	sh.asm	/^      b5:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b5	stressfs.asm	/^  b5:	83 ec 04             	sub    $0x4,%esp$/;"	l
b5	test_stride.asm	/^  b5:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
b5	zombie.asm	/^  b5:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b50	hugefiletest.asm	/^ b50:	01 45 f4             	add    %eax,-0xc(%ebp)$/;"	l
b50	sh.asm	/^     b50:	83 c4 10             	add    $0x10,%esp$/;"	l
b50	threadtest.asm	/^     b50:	7e b9                	jle    b0b <killtest+0xf>$/;"	l
b52	threadtest.asm	/^     b52:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
b52	usertests.asm	/^     b52:	ff 75 e4             	pushl  -0x1c(%ebp)$/;"	l
b53	hugefiletest.asm	/^ b53:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b53	sh.asm	/^     b53:	85 c0                	test   %eax,%eax$/;"	l
b55	sh.asm	/^     b55:	0f 84 5b ff ff ff    	je     ab6 <parseexec+0x67>$/;"	l
b55	usertests.asm	/^     b55:	68 09 4a 00 00       	push   $0x4a09$/;"	l
b56	hugefiletest.asm	/^ b56:	8b 55 ec             	mov    -0x14(%ebp),%edx$/;"	l
b59	hugefiletest.asm	/^ b59:	89 50 04             	mov    %edx,0x4(%eax)$/;"	l
b59	threadtest.asm	/^     b59:	eb 38                	jmp    b93 <killtest+0x97>$/;"	l
b5a	usertests.asm	/^     b5a:	6a 01                	push   $0x1$/;"	l
b5b	sh.asm	/^     b5b:	eb 01                	jmp    b5e <parseexec+0x10f>$/;"	l
b5b	threadtest.asm	/^     b5b:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b5c	hugefiletest.asm	/^ b5c:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b5c	usertests.asm	/^     b5c:	e8 54 36 00 00       	call   41b5 <printf>$/;"	l
b5d	sh.asm	/^     b5d:	90                   	nop$/;"	l
b5e	sh.asm	/^     b5e:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b5e	threadtest.asm	/^     b5e:	8b 44 85 cc          	mov    -0x34(%ebp,%eax,4),%eax$/;"	l
b5f	hugefiletest.asm	/^ b5f:	a3 20 0f 00 00       	mov    %eax,0xf20$/;"	l
b6	echo.asm	/^  b6:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
b6	hugefiletest.asm	/^  b6:	c1 fa 05             	sar    $0x5,%edx$/;"	l
b6	init.asm	/^  b6:	83 c4 10             	add    $0x10,%esp$/;"	l
b6	ln.asm	/^  b6:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
b6	ls.asm	/^  b6:	c9                   	leave  $/;"	l
b6	mkdir.asm	/^  b6:	55                   	push   %ebp$/;"	l
b6	my_userapp.asm	/^  b6:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
b6	rm.asm	/^  b6:	55                   	push   %ebp$/;"	l
b6	test_mlfq.asm	/^  b6:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
b6	test_sample.asm	/^  b6:	8d 98 20 0c 00 00    	lea    0xc20(%eax),%ebx$/;"	l
b6	usertests.asm	/^      b6:	83 c4 10             	add    $0x10,%esp$/;"	l
b6	wc.asm	/^  b6:	83 ec 08             	sub    $0x8,%esp$/;"	l
b61	sh.asm	/^     b61:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
b61	usertests.asm	/^     b61:	83 c4 10             	add    $0x10,%esp$/;"	l
b62	threadtest.asm	/^     b62:	83 ec 08             	sub    $0x8,%esp$/;"	l
b64	hugefiletest.asm	/^ b64:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b64	sh.asm	/^     b64:	c7 44 90 04 00 00 00 	movl   $0x0,0x4(%eax,%edx,4)$/;"	l
b64	usertests.asm	/^     b64:	e8 8d 34 00 00       	call   3ff6 <exit>$/;"	l
b65	threadtest.asm	/^     b65:	8d 55 c8             	lea    -0x38(%ebp),%edx$/;"	l
b67	hugefiletest.asm	/^ b67:	83 c0 08             	add    $0x8,%eax$/;"	l
b68	threadtest.asm	/^     b68:	52                   	push   %edx$/;"	l
b69	threadtest.asm	/^     b69:	50                   	push   %eax$/;"	l
b69	usertests.asm	/^     b69:	8b 45 d8             	mov    -0x28(%ebp),%eax$/;"	l
b6a	hugefiletest.asm	/^ b6a:	eb 3b                	jmp    ba7 <malloc+0xe1>$/;"	l
b6a	threadtest.asm	/^     b6a:	e8 11 0a 00 00       	call   1580 <thread_join>$/;"	l
b6b	sh.asm	/^     b6b:	00 $/;"	l
b6c	hugefiletest.asm	/^ b6c:	a1 20 0f 00 00       	mov    0xf20,%eax$/;"	l
b6c	sh.asm	/^     b6c:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
b6c	usertests.asm	/^     b6c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b6f	sh.asm	/^     b6f:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
b6f	threadtest.asm	/^     b6f:	83 c4 10             	add    $0x10,%esp$/;"	l
b6f	usertests.asm	/^     b6f:	50                   	push   %eax$/;"	l
b7	kill.asm	/^  b7:	0f b6 12             	movzbl (%edx),%edx$/;"	l
b7	ls.asm	/^  b7:	c3                   	ret    $/;"	l
b7	mkdir.asm	/^  b7:	89 e5                	mov    %esp,%ebp$/;"	l
b7	rm.asm	/^  b7:	89 e5                	mov    %esp,%ebp$/;"	l
b7	test_master.asm	/^  b7:	55                   	push   %ebp$/;"	l
b70	usertests.asm	/^     b70:	e8 a9 34 00 00       	call   401e <close>$/;"	l
b71	hugefiletest.asm	/^ b71:	39 45 f4             	cmp    %eax,-0xc(%ebp)$/;"	l
b72	sh.asm	/^     b72:	83 c2 08             	add    $0x8,%edx$/;"	l
b72	threadtest.asm	/^     b72:	85 c0                	test   %eax,%eax$/;"	l
b74	hugefiletest.asm	/^ b74:	75 1e                	jne    b94 <malloc+0xce>$/;"	l
b74	threadtest.asm	/^     b74:	74 19                	je     b8f <killtest+0x93>$/;"	l
b75	sh.asm	/^     b75:	c7 44 90 0c 00 00 00 	movl   $0x0,0xc(%eax,%edx,4)$/;"	l
b75	usertests.asm	/^     b75:	83 c4 10             	add    $0x10,%esp$/;"	l
b76	hugefiletest.asm	/^ b76:	83 ec 0c             	sub    $0xc,%esp$/;"	l
b76	threadtest.asm	/^     b76:	83 ec 08             	sub    $0x8,%esp$/;"	l
b78	usertests.asm	/^     b78:	e8 81 34 00 00       	call   3ffe <wait>$/;"	l
b79	hugefiletest.asm	/^ b79:	ff 75 ec             	pushl  -0x14(%ebp)$/;"	l
b79	threadtest.asm	/^     b79:	68 2e 1b 00 00       	push   $0x1b2e$/;"	l
b7c	hugefiletest.asm	/^ b7c:	e8 e5 fe ff ff       	call   a66 <morecore>$/;"	l
b7c	sh.asm	/^     b7c:	00 $/;"	l
b7d	sh.asm	/^     b7d:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
b7d	usertests.asm	/^     b7d:	83 ec 08             	sub    $0x8,%esp$/;"	l
b7e	threadtest.asm	/^     b7e:	6a 01                	push   $0x1$/;"	l
b8	cat.asm	/^  b8:	8b 43 04             	mov    0x4(%ebx),%eax$/;"	l
b8	forktest.asm	/^  b8:	83 6d f4 01          	subl   $0x1,-0xc(%ebp)$/;"	l
b8	grep.asm	/^  b8:	ff 75 f0             	pushl  -0x10(%ebp)$/;"	l
b8	ls.asm	/^  b8:	55                   	push   %ebp$/;"	l
b8	sh.asm	/^      b8:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
b8	stressfs.asm	/^  b8:	68 00 02 00 00       	push   $0x200$/;"	l
b8	test_master.asm	/^  b8:	89 e5                	mov    %esp,%ebp$/;"	l
b8	test_stride.asm	/^  b8:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
b8	zombie.asm	/^  b8:	0f b6 c0             	movzbl %al,%eax$/;"	l
b80	sh.asm	/^     b80:	c9                   	leave  $/;"	l
b80	threadtest.asm	/^     b80:	e8 e2 0a 00 00       	call   1667 <printf>$/;"	l
b80	usertests.asm	/^     b80:	68 2f 4a 00 00       	push   $0x4a2f$/;"	l
b81	hugefiletest.asm	/^ b81:	83 c4 10             	add    $0x10,%esp$/;"	l
b81	sh.asm	/^     b81:	c3                   	ret    $/;"	l
b82	sh.asm	/^     b82:	55                   	push   %ebp$/;"	l
b83	sh.asm	/^     b83:	89 e5                	mov    %esp,%ebp$/;"	l
b84	hugefiletest.asm	/^ b84:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
b85	sh.asm	/^     b85:	83 ec 28             	sub    $0x28,%esp$/;"	l
b85	threadtest.asm	/^     b85:	83 c4 10             	add    $0x10,%esp$/;"	l
b85	usertests.asm	/^     b85:	6a 01                	push   $0x1$/;"	l
b87	hugefiletest.asm	/^ b87:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
b87	usertests.asm	/^     b87:	e8 29 36 00 00       	call   41b5 <printf>$/;"	l
b88	sh.asm	/^     b88:	83 7d 08 00          	cmpl   $0x0,0x8(%ebp)$/;"	l
b88	threadtest.asm	/^     b88:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
b8b	hugefiletest.asm	/^ b8b:	75 07                	jne    b94 <malloc+0xce>$/;"	l
b8c	sh.asm	/^     b8c:	75 0a                	jne    b98 <nulterminate+0x16>$/;"	l
b8c	usertests.asm	/^     b8c:	83 c4 10             	add    $0x10,%esp$/;"	l
b8d	hugefiletest.asm	/^ b8d:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b8d	threadtest.asm	/^     b8d:	eb 0c                	jmp    b9b <killtest+0x9f>$/;"	l
b8e	sh.asm	/^     b8e:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
b8f	threadtest.asm	/^     b8f:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
b8f	usertests.asm	/^     b8f:	eb 17                	jmp    ba8 <pipe1+0x1e7>$/;"	l
b9	echo.asm	/^  b9:	c9                   	leave  $/;"	l
b9	hugefiletest.asm	/^  b9:	89 c8                	mov    %ecx,%eax$/;"	l
b9	init.asm	/^  b9:	83 ec 08             	sub    $0x8,%esp$/;"	l
b9	ln.asm	/^  b9:	0f b6 12             	movzbl (%edx),%edx$/;"	l
b9	ls.asm	/^  b9:	89 e5                	mov    %esp,%ebp$/;"	l
b9	mkdir.asm	/^  b9:	83 ec 10             	sub    $0x10,%esp$/;"	l
b9	my_userapp.asm	/^  b9:	0f b6 00             	movzbl (%eax),%eax$/;"	l
b9	rm.asm	/^  b9:	83 ec 10             	sub    $0x10,%esp$/;"	l
b9	threadtest.asm	/^      b9:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
b9	usertests.asm	/^      b9:	85 c0                	test   %eax,%eax$/;"	l
b9	wc.asm	/^  b9:	68 8f 09 00 00       	push   $0x98f$/;"	l
b91	usertests.asm	/^     b91:	83 ec 08             	sub    $0x8,%esp$/;"	l
b92	hugefiletest.asm	/^ b92:	eb 13                	jmp    ba7 <malloc+0xe1>$/;"	l
b93	sh.asm	/^     b93:	e9 e4 00 00 00       	jmp    c7c <nulterminate+0xfa>$/;"	l
b93	threadtest.asm	/^     b93:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)$/;"	l
b94	hugefiletest.asm	/^ b94:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b94	usertests.asm	/^     b94:	68 20 4a 00 00       	push   $0x4a20$/;"	l
b97	hugefiletest.asm	/^ b97:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
b97	threadtest.asm	/^     b97:	7e c2                	jle    b5b <killtest+0x5f>$/;"	l
b98	sh.asm	/^     b98:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
b99	threadtest.asm	/^     b99:	eb fe                	jmp    b99 <killtest+0x9d>$/;"	l
b99	usertests.asm	/^     b99:	6a 01                	push   $0x1$/;"	l
b9a	hugefiletest.asm	/^ b9a:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
b9b	sh.asm	/^     b9b:	8b 00                	mov    (%eax),%eax$/;"	l
b9b	threadtest.asm	/^     b9b:	c9                   	leave  $/;"	l
b9b	usertests.asm	/^     b9b:	e8 15 36 00 00       	call   41b5 <printf>$/;"	l
b9c	threadtest.asm	/^     b9c:	c3                   	ret    $/;"	l
b9d	hugefiletest.asm	/^ b9d:	8b 00                	mov    (%eax),%eax$/;"	l
b9d	sh.asm	/^     b9d:	83 f8 05             	cmp    $0x5,%eax$/;"	l
b9d	threadtest.asm	/^     b9d:	55                   	push   %ebp$/;"	l
b9e	threadtest.asm	/^     b9e:	89 e5                	mov    %esp,%ebp$/;"	l
b9f	hugefiletest.asm	/^ b9f:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ba	echo.asm	/^  ba:	c3                   	ret    $/;"	l
ba	kill.asm	/^  ba:	88 10                	mov    %dl,(%eax)$/;"	l
ba	test_master.asm	/^  ba:	57                   	push   %edi$/;"	l
ba	test_mlfq.asm	/^  ba:	75 07                	jne    c3 <main+0xc3>$/;"	l
ba0	sh.asm	/^     ba0:	0f 87 d3 00 00 00    	ja     c79 <nulterminate+0xf7>$/;"	l
ba0	threadtest.asm	/^     ba0:	83 ec 18             	sub    $0x18,%esp$/;"	l
ba0	usertests.asm	/^     ba0:	83 c4 10             	add    $0x10,%esp$/;"	l
ba2	hugefiletest.asm	/^ ba2:	e9 6d ff ff ff       	jmp    b14 <malloc+0x4e>$/;"	l
ba3	threadtest.asm	/^     ba3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ba3	usertests.asm	/^     ba3:	e8 4e 34 00 00       	call   3ff6 <exit>$/;"	l
ba6	sh.asm	/^     ba6:	8b 04 85 24 15 00 00 	mov    0x1524(,%eax,4),%eax$/;"	l
ba6	threadtest.asm	/^     ba6:	8b 00                	mov    (%eax),%eax$/;"	l
ba7	hugefiletest.asm	/^ ba7:	c9                   	leave  $/;"	l
ba8	hugefiletest.asm	/^ ba8:	c3                   	ret    $/;"	l
ba8	threadtest.asm	/^     ba8:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
ba8	usertests.asm	/^     ba8:	c9                   	leave  $/;"	l
ba9	usertests.asm	/^     ba9:	c3                   	ret    $/;"	l
baa	usertests.asm	/^     baa:	55                   	push   %ebp$/;"	l
bab	threadtest.asm	/^     bab:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bab	usertests.asm	/^     bab:	89 e5                	mov    %esp,%ebp$/;"	l
backcmd	sh.c	/^backcmd(struct cmd *subcmd)$/;"	f
backcmd	sh.c	/^struct backcmd {$/;"	s	file:
bad	kernel.asm	/^  bad:$/;"	l
bad	kernel.asm	/^ bad:$/;"	l
bad	kernel.asm	/^bad:$/;"	l
bad	sh.asm	/^     bad:	ff e0                	jmp    *%eax$/;"	l
bad	usertests.asm	/^     bad:	83 ec 28             	sub    $0x28,%esp$/;"	l
bae	threadtest.asm	/^     bae:	83 c0 04             	add    $0x4,%eax$/;"	l
baf	sh.asm	/^     baf:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
balloc	fs.c	/^balloc(uint dev)$/;"	f	file:
balloc	mkfs.c	/^balloc(int used)$/;"	f
base	umalloc.c	/^static Header base;$/;"	v	file:
base_15_0	mmu.h	/^  uint base_15_0 : 16; \/\/ Low bits of segment base address$/;"	m	struct:segdesc
base_23_16	mmu.h	/^  uint base_23_16 : 8; \/\/ Middle bits of segment base address$/;"	m	struct:segdesc
base_31_24	mmu.h	/^  uint base_31_24 : 8; \/\/ High bits of segment base address$/;"	m	struct:segdesc
basictest	threadtest.c	/^basictest(void)$/;"	f
basicthreadmain	threadtest.c	/^basicthreadmain(void *arg)$/;"	f
bb	cat.asm	/^  bb:	01 d0                	add    %edx,%eax$/;"	l
bb	echo.asm	/^  bb:	55                   	push   %ebp$/;"	l
bb	grep.asm	/^  bb:	68 60 0e 00 00       	push   $0xe60$/;"	l
bb	hugefiletest.asm	/^  bb:	c1 f8 1f             	sar    $0x1f,%eax$/;"	l
bb	ls.asm	/^  bb:	57                   	push   %edi$/;"	l
bb	sh.asm	/^      bb:	83 ec 04             	sub    $0x4,%esp$/;"	l
bb	test_master.asm	/^  bb:	53                   	push   %ebx$/;"	l
bb	test_stride.asm	/^  bb:	2b 45 e8             	sub    -0x18(%ebp),%eax$/;"	l
bb	usertests.asm	/^      bb:	79 1b                	jns    d8 <iputtest+0xd8>$/;"	l
bb	zombie.asm	/^  bb:	29 c2                	sub    %eax,%edx$/;"	l
bb0	usertests.asm	/^     bb0:	83 ec 08             	sub    $0x8,%esp$/;"	l
bb1	threadtest.asm	/^     bb1:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
bb2	sh.asm	/^     bb2:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
bb3	usertests.asm	/^     bb3:	68 39 4a 00 00       	push   $0x4a39$/;"	l
bb4	threadtest.asm	/^     bb4:	c7 45 ec fb ff ff ff 	movl   $0xfffffffb,-0x14(%ebp)$/;"	l
bb5	sh.asm	/^     bb5:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
bb8	usertests.asm	/^     bb8:	6a 01                	push   $0x1$/;"	l
bba	usertests.asm	/^     bba:	e8 f6 35 00 00       	call   41b5 <printf>$/;"	l
bbb	threadtest.asm	/^     bbb:	eb 4c                	jmp    c09 <pipethreadmain+0x6c>$/;"	l
bbc	sh.asm	/^     bbc:	eb 14                	jmp    bd2 <nulterminate+0x50>$/;"	l
bbd	threadtest.asm	/^     bbd:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
bbe	sh.asm	/^     bbe:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
bbf	usertests.asm	/^     bbf:	83 c4 10             	add    $0x10,%esp$/;"	l
bc	echo.asm	/^  bc:	89 e5                	mov    %esp,%ebp$/;"	l
bc	forktest.asm	/^  bc:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
bc	init.asm	/^  bc:	68 fe 08 00 00       	push   $0x8fe$/;"	l
bc	kill.asm	/^  bc:	0f b6 00             	movzbl (%eax),%eax$/;"	l
bc	ln.asm	/^  bc:	88 10                	mov    %dl,(%eax)$/;"	l
bc	ls.asm	/^  bc:	56                   	push   %esi$/;"	l
bc	mkdir.asm	/^  bc:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bc	my_userapp.asm	/^  bc:	38 c2                	cmp    %al,%dl$/;"	l
bc	rm.asm	/^  bc:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
bc	test_master.asm	/^  bc:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
bc	test_mlfq.asm	/^  bc:	bb f1 08 00 00       	mov    $0x8f1,%ebx$/;"	l
bc	test_sample.asm	/^  bc:	8b 55 f0             	mov    -0x10(%ebp),%edx$/;"	l
bc	threadtest.asm	/^      bc:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
bc1	sh.asm	/^     bc1:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
bc1	threadtest.asm	/^     bc1:	74 23                	je     be6 <pipethreadmain+0x49>$/;"	l
bc2	usertests.asm	/^     bc2:	e8 27 34 00 00       	call   3fee <fork>$/;"	l
bc3	threadtest.asm	/^     bc3:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
bc4	sh.asm	/^     bc4:	83 c2 08             	add    $0x8,%edx$/;"	l
bc6	threadtest.asm	/^     bc6:	8b 00                	mov    (%eax),%eax$/;"	l
bc7	sh.asm	/^     bc7:	8b 44 90 0c          	mov    0xc(%eax,%edx,4),%eax$/;"	l
bc7	usertests.asm	/^     bc7:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
bc8	threadtest.asm	/^     bc8:	83 ec 04             	sub    $0x4,%esp$/;"	l
bca	usertests.asm	/^     bca:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
bcache	bio.c	/^} bcache;$/;"	v	typeref:struct:__anon1
bcb	sh.asm	/^     bcb:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
bcb	threadtest.asm	/^     bcb:	6a 04                	push   $0x4$/;"	l
bcd	kernel.asm	/^  bcd = (sb & (1 << 2)) == 0;$/;"	d
bcd	threadtest.asm	/^     bcd:	8d 55 e8             	lea    -0x18(%ebp),%edx$/;"	l
bce	sh.asm	/^     bce:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
bce	usertests.asm	/^     bce:	75 02                	jne    bd2 <preempt+0x28>$/;"	l
bcmd	sh.asm	/^    bcmd = (struct backcmd*)cmd;$/;"	d
bd	cat.asm	/^  bd:	8b 00                	mov    (%eax),%eax$/;"	l
bd	ls.asm	/^  bd:	53                   	push   %ebx$/;"	l
bd	stressfs.asm	/^  bd:	8d 85 e6 fd ff ff    	lea    -0x21a(%ebp),%eax$/;"	l
bd	usertests.asm	/^      bd:	a1 c8 64 00 00       	mov    0x64c8,%eax$/;"	l
bd	zombie.asm	/^  bd:	89 d0                	mov    %edx,%eax$/;"	l
bd0	threadtest.asm	/^     bd0:	52                   	push   %edx$/;"	l
bd0	usertests.asm	/^     bd0:	eb fe                	jmp    bd0 <preempt+0x26>$/;"	l
bd1	threadtest.asm	/^     bd1:	50                   	push   %eax$/;"	l
bd2	sh.asm	/^     bd2:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
bd2	threadtest.asm	/^     bd2:	e8 e9 08 00 00       	call   14c0 <read>$/;"	l
bd2	usertests.asm	/^     bd2:	e8 17 34 00 00       	call   3fee <fork>$/;"	l
bd5	sh.asm	/^     bd5:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
bd7	threadtest.asm	/^     bd7:	83 c4 10             	add    $0x10,%esp$/;"	l
bd7	usertests.asm	/^     bd7:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
bd8	sh.asm	/^     bd8:	8b 44 90 04          	mov    0x4(%eax,%edx,4),%eax$/;"	l
bda	kernel.asm	/^  bda = (uchar *) P2V(0x400);$/;"	d
bda	threadtest.asm	/^     bda:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
bda	usertests.asm	/^     bda:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
bdc	sh.asm	/^     bdc:	85 c0                	test   %eax,%eax$/;"	l
bdd	threadtest.asm	/^     bdd:	f0 01 05 18 23 00 00 	lock add %eax,0x2318$/;"	l
bde	sh.asm	/^     bde:	75 de                	jne    bbe <nulterminate+0x3c>$/;"	l
bde	usertests.asm	/^     bde:	75 02                	jne    be2 <preempt+0x38>$/;"	l
be	echo.asm	/^  be:	eb 08                	jmp    c8 <strcmp+0xd>$/;"	l
be	hugefiletest.asm	/^  be:	29 c2                	sub    %eax,%edx$/;"	l
be	ln.asm	/^  be:	0f b6 00             	movzbl (%eax),%eax$/;"	l
be	ls.asm	/^  be:	81 ec 3c 02 00 00    	sub    $0x23c,%esp$/;"	l
be	my_userapp.asm	/^  be:	74 de                	je     9e <strcmp+0x5>$/;"	l
be	sh.asm	/^      be:	50                   	push   %eax$/;"	l
be	test_stride.asm	/^  be:	3d 88 13 00 00       	cmp    $0x1388,%eax$/;"	l
be	wc.asm	/^  be:	6a 01                	push   $0x1$/;"	l
be0	sh.asm	/^     be0:	e9 94 00 00 00       	jmp    c79 <nulterminate+0xf7>$/;"	l
be0	usertests.asm	/^     be0:	eb fe                	jmp    be0 <preempt+0x36>$/;"	l
be2	usertests.asm	/^     be2:	83 ec 0c             	sub    $0xc,%esp$/;"	l
be4	threadtest.asm	/^     be4:	eb 1a                	jmp    c00 <pipethreadmain+0x63>$/;"	l
be5	sh.asm	/^     be5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
be5	usertests.asm	/^     be5:	8d 45 e4             	lea    -0x1c(%ebp),%eax$/;"	l
be6	threadtest.asm	/^     be6:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
be8	sh.asm	/^     be8:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
be8	usertests.asm	/^     be8:	50                   	push   %eax$/;"	l
be9	threadtest.asm	/^     be9:	83 c0 04             	add    $0x4,%eax$/;"	l
be9	usertests.asm	/^     be9:	e8 18 34 00 00       	call   4006 <pipe>$/;"	l
beb	sh.asm	/^     beb:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
bec	threadtest.asm	/^     bec:	8b 00                	mov    (%eax),%eax$/;"	l
bee	sh.asm	/^     bee:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
bee	threadtest.asm	/^     bee:	83 ec 04             	sub    $0x4,%esp$/;"	l
bee	usertests.asm	/^     bee:	83 c4 10             	add    $0x10,%esp$/;"	l
begin_op	log.c	/^begin_op(void)$/;"	f
bf	cat.asm	/^  bf:	83 ec 08             	sub    $0x8,%esp$/;"	l
bf	kill.asm	/^  bf:	84 c0                	test   %al,%al$/;"	l
bf	mkdir.asm	/^  bf:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
bf	rm.asm	/^  bf:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
bf	sh.asm	/^      bf:	68 63 14 00 00       	push   $0x1463$/;"	l
bf	test_master.asm	/^  bf:	8b 55 10             	mov    0x10(%ebp),%edx$/;"	l
bf	test_sample.asm	/^  bf:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
bf	zombie.asm	/^  bf:	5d                   	pop    %ebp$/;"	l
bf1	sh.asm	/^     bf1:	83 ec 0c             	sub    $0xc,%esp$/;"	l
bf1	threadtest.asm	/^     bf1:	6a 04                	push   $0x4$/;"	l
bf1	usertests.asm	/^     bf1:	e8 f8 33 00 00       	call   3fee <fork>$/;"	l
bf3	threadtest.asm	/^     bf3:	8d 55 ec             	lea    -0x14(%ebp),%edx$/;"	l
bf4	sh.asm	/^     bf4:	50                   	push   %eax$/;"	l
bf5	sh.asm	/^     bf5:	e8 88 ff ff ff       	call   b82 <nulterminate>$/;"	l
bf6	threadtest.asm	/^     bf6:	52                   	push   %edx$/;"	l
bf6	usertests.asm	/^     bf6:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
bf7	threadtest.asm	/^     bf7:	50                   	push   %eax$/;"	l
bf8	threadtest.asm	/^     bf8:	e8 cb 08 00 00       	call   14c8 <write>$/;"	l
bf9	usertests.asm	/^     bf9:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
bfa	sh.asm	/^     bfa:	83 c4 10             	add    $0x10,%esp$/;"	l
bfd	sh.asm	/^     bfd:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
bfd	threadtest.asm	/^     bfd:	83 c4 10             	add    $0x10,%esp$/;"	l
bfd	usertests.asm	/^     bfd:	75 4d                	jne    c4c <preempt+0xa2>$/;"	l
bff	usertests.asm	/^     bff:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
bfree	fs.c	/^bfree(int dev, uint b)$/;"	f	file:
bget	bio.c	/^bget(uint dev, uint blockno)$/;"	f	file:
bi	kernel.asm	/^  bi = b % BPB;$/;"	d
bigargtest	usertests.c	/^bigargtest(void)$/;"	f
bigdir	usertests.c	/^bigdir(void)$/;"	f
bigfile	usertests.c	/^bigfile(void)$/;"	f
bigwrite	usertests.c	/^bigwrite(void)$/;"	f
binit	bio.c	/^binit(void)$/;"	f
block	log.c	/^  int block[LOGSIZE];$/;"	m	struct:logheader	file:
blockno	buf.h	/^  uint blockno;$/;"	m	struct:buf
bmap	fs.c	/^bmap(struct inode *ip, uint bn)$/;"	f	file:
bmapstart	fs.h	/^  uint bmapstart;    \/\/ Block number of first free map block$/;"	m	struct:superblock
bn_table1	kernel.asm	/^	bn_table1 = bn\/NINDIRECT;$/;"	d
bn_table1	kernel.asm	/^  	bn_table1 = bn\/NINDIRECT\/NINDIRECT;$/;"	d
bn_table2	kernel.asm	/^	bn_table2 = (bn)%NINDIRECT;$/;"	d
bn_table2	kernel.asm	/^	bn_table2 = (bn\/NINDIRECT)%NINDIRECT;$/;"	d
bn_table3	kernel.asm	/^	bn_table3 = bn%NINDIRECT;$/;"	d
boost	trap.c	/^boost(void)$/;"	f
bootmain	bootmain.c	/^bootmain(void)$/;"	f
bp	cat.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	echo.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	grep.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	hugefiletest.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	init.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	kernel.asm	/^	bp = bread(ip->dev, addr);$/;"	d
bp	kernel.asm	/^  	bp = bread(ip->dev, ip->addrs[NDIRECT+1]);$/;"	d
bp	kernel.asm	/^  	bp = bread(ip->dev, ip->addrs[NDIRECT+2]);$/;"	d
bp	kernel.asm	/^    bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(dev, IBLOCK(inum, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, addr);$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, bmap(ip, off\/BSIZE));$/;"	d
bp	kernel.asm	/^    bp = bread(ip->dev, ip->addrs[NDIRECT]);$/;"	d
bp	kernel.asm	/^  bp = 0;$/;"	d
bp	kernel.asm	/^  bp = bread(dev, 1);$/;"	d
bp	kernel.asm	/^  bp = bread(dev, BBLOCK(b, sb));$/;"	d
bp	kernel.asm	/^  bp = bread(dev, bno);$/;"	d
bp	kernel.asm	/^  bp = bread(ip->dev, IBLOCK(ip->inum, sb));$/;"	d
bp	kill.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ln.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	ls.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	mkdir.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	my_userapp.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	rm.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	sh.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	stressfs.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	test_master.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	test_mlfq.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	test_sample.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	test_stride.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	threadtest.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	usertests.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	wc.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp	zombie.asm	/^  bp = (Header*)ap - 1;$/;"	d
bp2	kernel.asm	/^			bp2 = bread(ip->dev, a[i]);$/;"	d
bp2	kernel.asm	/^		 	bp2 = bread(ip->dev, a[i]);$/;"	d
bp3	kernel.asm	/^					bp3 = bread(ip->dev, b[j]);$/;"	d
bread	bio.c	/^bread(uint dev, uint blockno)$/;"	f
brelse	bio.c	/^brelse(struct buf *b)$/;"	f
bsstest	usertests.c	/^bsstest(void)$/;"	f
buf	bio.c	/^  struct buf buf[NBUF];$/;"	m	struct:__anon1	typeref:struct:__anon1::buf	file:
buf	buf.h	/^struct buf {$/;"	s
buf	cat.c	/^char buf[512];$/;"	v
buf	console.c	/^  char buf[INPUT_BUF];$/;"	m	struct:__anon8	file:
buf	grep.c	/^char buf[1024];$/;"	v
buf	kernel.asm	/^  buf = (char*)p;$/;"	d
buf	usertests.c	/^char buf[8192];$/;"	v
buf	wc.c	/^char buf[512];$/;"	v
bwrite	bio.c	/^bwrite(struct buf *b)$/;"	f
bzero	fs.c	/^bzero(int dev, int bno)$/;"	f	file:
c	cat.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	echo.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	forktest.asm	/^   c:	e8 97 01 00 00       	call   1a8 <strlen>$/;"	l
c	grep.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	hugefiletest.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	init.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	initcode.asm	/^   c:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
c	kernel.asm	/^					c = (uint*)bp3->data;$/;"	d
c	kernel.asm	/^        c = (c == '\\r') ? '\\n' : c;$/;"	d
c	kernel.asm	/^    c = fmt[++i] & 0xff;$/;"	d
c	kernel.asm	/^    c = input.buf[input.r++ % INPUT_BUF];$/;"	d
c	kernel.asm	/^  c = &cpus[cpuid()];$/;"	d
c	kernel.asm	/^  c = charcode[shift & (CTL | SHIFT)][data];$/;"	d
c	kernel.asm	/^  c = mycpu();$/;"	d
c	kill.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ln.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	ls.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	mkdir.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	my_userapp.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	rm.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	sh.asm	/^       c:	e8 c4 0e 00 00       	call   ed5 <exit>$/;"	l
c	sh.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	stressfs.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	test_master.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	test_mlfq.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	test_sample.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	test_stride.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	threadtest.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	usertests.asm	/^  c = sbrk(-(sbrk(0) - oldbrk));$/;"	d
c	usertests.asm	/^  c = sbrk(-4096);$/;"	d
c	usertests.asm	/^  c = sbrk(0);$/;"	d
c	usertests.asm	/^  c = sbrk(1);$/;"	d
c	usertests.asm	/^  c = sbrk(4096);$/;"	d
c	wc.asm	/^    c = fmt[i] & 0xff;$/;"	d
c	zombie.asm	/^    c = fmt[i] & 0xff;$/;"	d
c0	echo.asm	/^  c0:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
c0	forktest.asm	/^  c0:	7f d6                	jg     98 <forktest+0x6f>$/;"	l
c0	grep.asm	/^  c0:	e8 83 04 00 00       	call   548 <memmove>$/;"	l
c0	hugefiletest.asm	/^  c0:	89 d0                	mov    %edx,%eax$/;"	l
c0	my_userapp.asm	/^  c0:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c0	threadtest.asm	/^      c0:	79 17                	jns    d9 <main+0xd9>$/;"	l
c0	wc.asm	/^  c0:	e8 0e 05 00 00       	call   5d3 <printf>$/;"	l
c0	zombie.asm	/^  c0:	c3                   	ret    $/;"	l
c00	sh.asm	/^     c00:	8b 40 0c             	mov    0xc(%eax),%eax$/;"	l
c00	threadtest.asm	/^     c00:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
c02	usertests.asm	/^     c02:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c03	sh.asm	/^     c03:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
c03	threadtest.asm	/^     c03:	83 c0 01             	add    $0x1,%eax$/;"	l
c05	usertests.asm	/^     c05:	50                   	push   %eax$/;"	l
c06	sh.asm	/^     c06:	eb 71                	jmp    c79 <nulterminate+0xf7>$/;"	l
c06	threadtest.asm	/^     c06:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
c06	usertests.asm	/^     c06:	e8 13 34 00 00       	call   401e <close>$/;"	l
c08	sh.asm	/^     c08:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c09	threadtest.asm	/^     c09:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
c0b	sh.asm	/^     c0b:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
c0b	usertests.asm	/^     c0b:	83 c4 10             	add    $0x10,%esp$/;"	l
c0c	threadtest.asm	/^     c0c:	83 f8 05             	cmp    $0x5,%eax$/;"	l
c0e	sh.asm	/^     c0e:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c0e	usertests.asm	/^     c0e:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c0f	threadtest.asm	/^     c0f:	7e ac                	jle    bbd <pipethreadmain+0x20>$/;"	l
c1	init.asm	/^  c1:	6a 01                	push   $0x1$/;"	l
c1	kill.asm	/^  c1:	75 e2                	jne    a5 <strcpy+0xd>$/;"	l
c1	ln.asm	/^  c1:	84 c0                	test   %al,%al$/;"	l
c1	test_mlfq.asm	/^  c1:	eb 05                	jmp    c8 <main+0xc8>$/;"	l
c1	zombie.asm	/^  c1:	55                   	push   %ebp$/;"	l
c11	sh.asm	/^     c11:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
c11	threadtest.asm	/^     c11:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c11	usertests.asm	/^     c11:	83 ec 04             	sub    $0x4,%esp$/;"	l
c14	sh.asm	/^     c14:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c14	threadtest.asm	/^     c14:	6a 00                	push   $0x0$/;"	l
c14	usertests.asm	/^     c14:	6a 01                	push   $0x1$/;"	l
c16	threadtest.asm	/^     c16:	e8 6d 09 00 00       	call   1588 <thread_exit>$/;"	l
c16	usertests.asm	/^     c16:	68 43 4a 00 00       	push   $0x4a43$/;"	l
c17	sh.asm	/^     c17:	50                   	push   %eax$/;"	l
c18	sh.asm	/^     c18:	e8 65 ff ff ff       	call   b82 <nulterminate>$/;"	l
c1b	threadtest.asm	/^     c1b:	55                   	push   %ebp$/;"	l
c1b	usertests.asm	/^     c1b:	50                   	push   %eax$/;"	l
c1c	threadtest.asm	/^     c1c:	89 e5                	mov    %esp,%ebp$/;"	l
c1c	usertests.asm	/^     c1c:	e8 f5 33 00 00       	call   4016 <write>$/;"	l
c1d	sh.asm	/^     c1d:	83 c4 10             	add    $0x10,%esp$/;"	l
c1e	threadtest.asm	/^     c1e:	83 ec 58             	sub    $0x58,%esp$/;"	l
c2	cat.asm	/^  c2:	6a 00                	push   $0x0$/;"	l
c2	forktest.asm	/^  c2:	e8 ab 02 00 00       	call   372 <wait>$/;"	l
c2	hugefiletest.asm	/^  c2:	6b c0 64             	imul   $0x64,%eax,%eax$/;"	l
c2	mkdir.asm	/^  c2:	90                   	nop$/;"	l
c2	rm.asm	/^  c2:	90                   	nop$/;"	l
c2	test_master.asm	/^  c2:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
c2	test_sample.asm	/^  c2:	89 d0                	mov    %edx,%eax$/;"	l
c2	threadtest.asm	/^      c2:	83 ec 08             	sub    $0x8,%esp$/;"	l
c2	usertests.asm	/^      c2:	83 ec 08             	sub    $0x8,%esp$/;"	l
c2	zombie.asm	/^  c2:	89 e5                	mov    %esp,%ebp$/;"	l
c20	sh.asm	/^     c20:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c21	threadtest.asm	/^     c21:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c21	usertests.asm	/^     c21:	83 c4 10             	add    $0x10,%esp$/;"	l
c23	sh.asm	/^     c23:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
c24	threadtest.asm	/^     c24:	8d 45 b4             	lea    -0x4c(%ebp),%eax$/;"	l
c24	usertests.asm	/^     c24:	83 f8 01             	cmp    $0x1,%eax$/;"	l
c26	sh.asm	/^     c26:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c27	threadtest.asm	/^     c27:	50                   	push   %eax$/;"	l
c27	usertests.asm	/^     c27:	74 12                	je     c3b <preempt+0x91>$/;"	l
c28	threadtest.asm	/^     c28:	e8 8b 08 00 00       	call   14b8 <pipe>$/;"	l
c29	sh.asm	/^     c29:	50                   	push   %eax$/;"	l
c29	usertests.asm	/^     c29:	83 ec 08             	sub    $0x8,%esp$/;"	l
c2a	sh.asm	/^     c2a:	e8 53 ff ff ff       	call   b82 <nulterminate>$/;"	l
c2c	usertests.asm	/^     c2c:	68 45 4a 00 00       	push   $0x4a45$/;"	l
c2d	threadtest.asm	/^     c2d:	83 c4 10             	add    $0x10,%esp$/;"	l
c2f	sh.asm	/^     c2f:	83 c4 10             	add    $0x10,%esp$/;"	l
c3	init.asm	/^  c3:	e8 4f 04 00 00       	call   517 <printf>$/;"	l
c3	kill.asm	/^  c3:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
c3	ln.asm	/^  c3:	75 e2                	jne    a7 <strcpy+0xd>$/;"	l
c3	mkdir.asm	/^  c3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c3	my_userapp.asm	/^  c3:	0f b6 00             	movzbl (%eax),%eax$/;"	l
c3	rm.asm	/^  c3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c3	stressfs.asm	/^  c3:	50                   	push   %eax$/;"	l
c3	test_mlfq.asm	/^  c3:	bb f9 08 00 00       	mov    $0x8f9,%ebx$/;"	l
c3	test_stride.asm	/^  c3:	76 1b                	jbe    e0 <main+0xe0>$/;"	l
c30	threadtest.asm	/^     c30:	85 c0                	test   %eax,%eax$/;"	l
c31	usertests.asm	/^     c31:	6a 01                	push   $0x1$/;"	l
c32	sh.asm	/^     c32:	eb 45                	jmp    c79 <nulterminate+0xf7>$/;"	l
c32	threadtest.asm	/^     c32:	79 1c                	jns    c50 <pipetest+0x35>$/;"	l
c33	usertests.asm	/^     c33:	e8 7d 35 00 00       	call   41b5 <printf>$/;"	l
c34	sh.asm	/^     c34:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c34	threadtest.asm	/^     c34:	83 ec 08             	sub    $0x8,%esp$/;"	l
c37	sh.asm	/^     c37:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
c37	threadtest.asm	/^     c37:	68 e8 1b 00 00       	push   $0x1be8$/;"	l
c38	usertests.asm	/^     c38:	83 c4 10             	add    $0x10,%esp$/;"	l
c3a	sh.asm	/^     c3a:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
c3b	usertests.asm	/^     c3b:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c3c	threadtest.asm	/^     c3c:	6a 01                	push   $0x1$/;"	l
c3d	sh.asm	/^     c3d:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
c3e	threadtest.asm	/^     c3e:	e8 24 0a 00 00       	call   1667 <printf>$/;"	l
c3e	usertests.asm	/^     c3e:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c4	cat.asm	/^  c4:	50                   	push   %eax$/;"	l
c4	echo.asm	/^  c4:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
c4	ls.asm	/^  c4:	83 ec 08             	sub    $0x8,%esp$/;"	l
c4	sh.asm	/^      c4:	6a 02                	push   $0x2$/;"	l
c4	stressfs.asm	/^  c4:	ff 75 f0             	pushl  -0x10(%ebp)$/;"	l
c4	test_sample.asm	/^  c4:	01 c0                	add    %eax,%eax$/;"	l
c4	zombie.asm	/^  c4:	83 ec 10             	sub    $0x10,%esp$/;"	l
c40	sh.asm	/^     c40:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c41	usertests.asm	/^     c41:	50                   	push   %eax$/;"	l
c42	usertests.asm	/^     c42:	e8 d7 33 00 00       	call   401e <close>$/;"	l
c43	sh.asm	/^     c43:	50                   	push   %eax$/;"	l
c43	threadtest.asm	/^     c43:	83 c4 10             	add    $0x10,%esp$/;"	l
c44	sh.asm	/^     c44:	e8 39 ff ff ff       	call   b82 <nulterminate>$/;"	l
c46	threadtest.asm	/^     c46:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
c47	usertests.asm	/^     c47:	83 c4 10             	add    $0x10,%esp$/;"	l
c49	sh.asm	/^     c49:	83 c4 10             	add    $0x10,%esp$/;"	l
c4a	usertests.asm	/^     c4a:	eb fe                	jmp    c4a <preempt+0xa0>$/;"	l
c4b	threadtest.asm	/^     c4b:	e9 19 02 00 00       	jmp    e69 <pipetest+0x24e>$/;"	l
c4c	sh.asm	/^     c4c:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
c4c	usertests.asm	/^     c4c:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
c4f	sh.asm	/^     c4f:	8b 40 08             	mov    0x8(%eax),%eax$/;"	l
c4f	usertests.asm	/^     c4f:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c5	cat.asm	/^  c5:	e8 f8 02 00 00       	call   3c2 <open>$/;"	l
c5	grep.asm	/^  c5:	83 c4 10             	add    $0x10,%esp$/;"	l
c5	hugefiletest.asm	/^  c5:	29 c1                	sub    %eax,%ecx$/;"	l
c5	ln.asm	/^  c5:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
c5	test_master.asm	/^  c5:	89 cb                	mov    %ecx,%ebx$/;"	l
c5	test_stride.asm	/^  c5:	ff 75 f0             	pushl  -0x10(%ebp)$/;"	l
c5	threadtest.asm	/^      c5:	68 c8 1a 00 00       	push   $0x1ac8$/;"	l
c5	usertests.asm	/^      c5:	68 e0 45 00 00       	push   $0x45e0$/;"	l
c5	wc.asm	/^  c5:	83 c4 10             	add    $0x10,%esp$/;"	l
c50	threadtest.asm	/^     c50:	8b 45 b4             	mov    -0x4c(%ebp),%eax$/;"	l
c52	sh.asm	/^     c52:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c52	usertests.asm	/^     c52:	50                   	push   %eax$/;"	l
c53	threadtest.asm	/^     c53:	89 45 c0             	mov    %eax,-0x40(%ebp)$/;"	l
c53	usertests.asm	/^     c53:	e8 c6 33 00 00       	call   401e <close>$/;"	l
c55	sh.asm	/^     c55:	50                   	push   %eax$/;"	l
c56	sh.asm	/^     c56:	e8 27 ff ff ff       	call   b82 <nulterminate>$/;"	l
c56	threadtest.asm	/^     c56:	8b 45 b8             	mov    -0x48(%ebp),%eax$/;"	l
c58	usertests.asm	/^     c58:	83 c4 10             	add    $0x10,%esp$/;"	l
c59	threadtest.asm	/^     c59:	89 45 c4             	mov    %eax,-0x3c(%ebp)$/;"	l
c5b	sh.asm	/^     c5b:	83 c4 10             	add    $0x10,%esp$/;"	l
c5b	usertests.asm	/^     c5b:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
c5c	threadtest.asm	/^     c5c:	e8 3f 08 00 00       	call   14a0 <fork>$/;"	l
c5e	sh.asm	/^     c5e:	eb 19                	jmp    c79 <nulterminate+0xf7>$/;"	l
c5e	usertests.asm	/^     c5e:	83 ec 04             	sub    $0x4,%esp$/;"	l
c6	kill.asm	/^  c6:	c9                   	leave  $/;"	l
c6	mkdir.asm	/^  c6:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
c6	my_userapp.asm	/^  c6:	0f b6 d0             	movzbl %al,%edx$/;"	l
c6	rm.asm	/^  c6:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
c6	sh.asm	/^      c6:	e8 c9 0f 00 00       	call   1094 <printf>$/;"	l
c6	test_sample.asm	/^  c6:	01 d0                	add    %edx,%eax$/;"	l
c60	sh.asm	/^     c60:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c61	threadtest.asm	/^     c61:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
c61	usertests.asm	/^     c61:	68 00 20 00 00       	push   $0x2000$/;"	l
c63	sh.asm	/^     c63:	89 45 e0             	mov    %eax,-0x20(%ebp)$/;"	l
c64	threadtest.asm	/^     c64:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
c66	sh.asm	/^     c66:	8b 45 e0             	mov    -0x20(%ebp),%eax$/;"	l
c66	usertests.asm	/^     c66:	68 c0 8c 00 00       	push   $0x8cc0$/;"	l
c68	threadtest.asm	/^     c68:	79 1c                	jns    c86 <pipetest+0x6b>$/;"	l
c69	sh.asm	/^     c69:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
c6a	threadtest.asm	/^     c6a:	83 ec 08             	sub    $0x8,%esp$/;"	l
c6b	usertests.asm	/^     c6b:	50                   	push   %eax$/;"	l
c6c	sh.asm	/^     c6c:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c6c	usertests.asm	/^     c6c:	e8 9d 33 00 00       	call   400e <read>$/;"	l
c6d	threadtest.asm	/^     c6d:	68 03 1c 00 00       	push   $0x1c03$/;"	l
c6f	sh.asm	/^     c6f:	50                   	push   %eax$/;"	l
c7	forktest.asm	/^  c7:	83 f8 ff             	cmp    $0xffffffff,%eax$/;"	l
c7	hugefiletest.asm	/^  c7:	89 c8                	mov    %ecx,%eax$/;"	l
c7	kill.asm	/^  c7:	c3                   	ret    $/;"	l
c7	ls.asm	/^  c7:	6a 00                	push   $0x0$/;"	l
c7	stressfs.asm	/^  c7:	e8 fd 02 00 00       	call   3c9 <write>$/;"	l
c7	test_master.asm	/^  c7:	89 df                	mov    %ebx,%edi$/;"	l
c7	zombie.asm	/^  c7:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
c70	sh.asm	/^     c70:	e8 0d ff ff ff       	call   b82 <nulterminate>$/;"	l
c71	usertests.asm	/^     c71:	83 c4 10             	add    $0x10,%esp$/;"	l
c72	threadtest.asm	/^     c72:	6a 01                	push   $0x1$/;"	l
c74	threadtest.asm	/^     c74:	e8 ee 09 00 00       	call   1667 <printf>$/;"	l
c74	usertests.asm	/^     c74:	83 f8 01             	cmp    $0x1,%eax$/;"	l
c75	sh.asm	/^     c75:	83 c4 10             	add    $0x10,%esp$/;"	l
c77	usertests.asm	/^     c77:	74 14                	je     c8d <preempt+0xe3>$/;"	l
c78	sh.asm	/^     c78:	90                   	nop$/;"	l
c79	sh.asm	/^     c79:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c79	threadtest.asm	/^     c79:	83 c4 10             	add    $0x10,%esp$/;"	l
c79	usertests.asm	/^     c79:	83 ec 08             	sub    $0x8,%esp$/;"	l
c7c	sh.asm	/^     c7c:	c9                   	leave  $/;"	l
c7c	threadtest.asm	/^     c7c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
c7c	usertests.asm	/^     c7c:	68 59 4a 00 00       	push   $0x4a59$/;"	l
c7d	sh.asm	/^     c7d:	c3                   	ret    $/;"	l
c7e	sh.asm	/^     c7e:	55                   	push   %ebp$/;"	l
c7f	sh.asm	/^     c7f:	89 e5                	mov    %esp,%ebp$/;"	l
c8	echo.asm	/^  c8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
c8	grep.asm	/^  c8:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
c8	init.asm	/^  c8:	83 c4 10             	add    $0x10,%esp$/;"	l
c8	kill.asm	/^  c8:	55                   	push   %ebp$/;"	l
c8	ln.asm	/^  c8:	c9                   	leave  $/;"	l
c8	test_mlfq.asm	/^  c8:	83 ec 08             	sub    $0x8,%esp$/;"	l
c8	test_sample.asm	/^  c8:	c1 e0 02             	shl    $0x2,%eax$/;"	l
c8	test_stride.asm	/^  c8:	ff 75 ec             	pushl  -0x14(%ebp)$/;"	l
c8	wc.asm	/^  c8:	e8 47 03 00 00       	call   414 <exit>$/;"	l
c81	sh.asm	/^     c81:	57                   	push   %edi$/;"	l
c81	threadtest.asm	/^     c81:	e9 e3 01 00 00       	jmp    e69 <pipetest+0x24e>$/;"	l
c81	usertests.asm	/^     c81:	6a 01                	push   $0x1$/;"	l
c82	sh.asm	/^     c82:	53                   	push   %ebx$/;"	l
c83	sh.asm	/^     c83:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
c83	usertests.asm	/^     c83:	e8 2d 35 00 00       	call   41b5 <printf>$/;"	l
c86	sh.asm	/^     c86:	8b 55 10             	mov    0x10(%ebp),%edx$/;"	l
c86	threadtest.asm	/^     c86:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
c88	usertests.asm	/^     c88:	83 c4 10             	add    $0x10,%esp$/;"	l
c89	sh.asm	/^     c89:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
c8a	threadtest.asm	/^     c8a:	0f 85 c7 00 00 00    	jne    d57 <pipetest+0x13c>$/;"	l
c8b	usertests.asm	/^     c8b:	eb 7e                	jmp    d0b <preempt+0x161>$/;"	l
c8c	sh.asm	/^     c8c:	89 cb                	mov    %ecx,%ebx$/;"	l
c8d	usertests.asm	/^     c8d:	8b 45 e4             	mov    -0x1c(%ebp),%eax$/;"	l
c8e	sh.asm	/^     c8e:	89 df                	mov    %ebx,%edi$/;"	l
c9	hugefiletest.asm	/^  c9:	85 c0                	test   %eax,%eax$/;"	l
c9	kill.asm	/^  c9:	89 e5                	mov    %esp,%ebp$/;"	l
c9	ln.asm	/^  c9:	c3                   	ret    $/;"	l
c9	ls.asm	/^  c9:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
c9	mkdir.asm	/^  c9:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
c9	my_userapp.asm	/^  c9:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
c9	rm.asm	/^  c9:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
c9	test_master.asm	/^  c9:	89 d1                	mov    %edx,%ecx$/;"	l
c90	sh.asm	/^     c90:	89 d1                	mov    %edx,%ecx$/;"	l
c90	threadtest.asm	/^     c90:	8b 45 b4             	mov    -0x4c(%ebp),%eax$/;"	l
c90	usertests.asm	/^     c90:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c92	sh.asm	/^     c92:	fc                   	cld    $/;"	l
c93	sh.asm	/^     c93:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
c93	threadtest.asm	/^     c93:	83 ec 0c             	sub    $0xc,%esp$/;"	l
c93	usertests.asm	/^     c93:	50                   	push   %eax$/;"	l
c94	usertests.asm	/^     c94:	e8 85 33 00 00       	call   401e <close>$/;"	l
c95	sh.asm	/^     c95:	89 ca                	mov    %ecx,%edx$/;"	l
c96	threadtest.asm	/^     c96:	50                   	push   %eax$/;"	l
c97	sh.asm	/^     c97:	89 fb                	mov    %edi,%ebx$/;"	l
c97	threadtest.asm	/^     c97:	e8 34 08 00 00       	call   14d0 <close>$/;"	l
c99	sh.asm	/^     c99:	89 5d 08             	mov    %ebx,0x8(%ebp)$/;"	l
c99	usertests.asm	/^     c99:	83 c4 10             	add    $0x10,%esp$/;"	l
c9c	sh.asm	/^     c9c:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
c9c	threadtest.asm	/^     c9c:	83 c4 10             	add    $0x10,%esp$/;"	l
c9c	usertests.asm	/^     c9c:	83 ec 08             	sub    $0x8,%esp$/;"	l
c9f	sh.asm	/^     c9f:	90                   	nop$/;"	l
c9f	threadtest.asm	/^     c9f:	c7 45 bc 00 00 00 00 	movl   $0x0,-0x44(%ebp)$/;"	l
c9f	usertests.asm	/^     c9f:	68 6c 4a 00 00       	push   $0x4a6c$/;"	l
ca	cat.asm	/^  ca:	83 c4 10             	add    $0x10,%esp$/;"	l
ca	forktest.asm	/^  ca:	74 17                	je     e3 <forktest+0xba>$/;"	l
ca	ln.asm	/^  ca:	55                   	push   %ebp$/;"	l
ca	threadtest.asm	/^      ca:	6a 01                	push   $0x1$/;"	l
ca	usertests.asm	/^      ca:	50                   	push   %eax$/;"	l
ca0	sh.asm	/^     ca0:	5b                   	pop    %ebx$/;"	l
ca1	sh.asm	/^     ca1:	5f                   	pop    %edi$/;"	l
ca2	sh.asm	/^     ca2:	5d                   	pop    %ebp$/;"	l
ca3	sh.asm	/^     ca3:	c3                   	ret    $/;"	l
ca4	sh.asm	/^     ca4:	55                   	push   %ebp$/;"	l
ca4	usertests.asm	/^     ca4:	6a 01                	push   $0x1$/;"	l
ca5	sh.asm	/^     ca5:	89 e5                	mov    %esp,%ebp$/;"	l
ca6	threadtest.asm	/^     ca6:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
ca6	usertests.asm	/^     ca6:	e8 0a 35 00 00       	call   41b5 <printf>$/;"	l
ca7	sh.asm	/^     ca7:	83 ec 10             	sub    $0x10,%esp$/;"	l
caa	sh.asm	/^     caa:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cab	usertests.asm	/^     cab:	83 c4 10             	add    $0x10,%esp$/;"	l
cad	sh.asm	/^     cad:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
cad	threadtest.asm	/^     cad:	eb 44                	jmp    cf3 <pipetest+0xd8>$/;"	l
cae	usertests.asm	/^     cae:	83 ec 0c             	sub    $0xc,%esp$/;"	l
caf	threadtest.asm	/^     caf:	8d 45 c8             	lea    -0x38(%ebp),%eax$/;"	l
cat	cat.c	/^cat(int fd)$/;"	f
cb	echo.asm	/^  cb:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cb	grep.asm	/^  cb:	ba ff 03 00 00       	mov    $0x3ff,%edx$/;"	l
cb	hugefiletest.asm	/^  cb:	75 19                	jne    e6 <main+0xe6>$/;"	l
cb	init.asm	/^  cb:	e8 88 02 00 00       	call   358 <exit>$/;"	l
cb	kill.asm	/^  cb:	eb 08                	jmp    d5 <strcmp+0xd>$/;"	l
cb	ln.asm	/^  cb:	89 e5                	mov    %esp,%ebp$/;"	l
cb	sh.asm	/^      cb:	83 c4 10             	add    $0x10,%esp$/;"	l
cb	test_master.asm	/^  cb:	fc                   	cld    $/;"	l
cb	test_mlfq.asm	/^  cb:	51                   	push   %ecx$/;"	l
cb	test_sample.asm	/^  cb:	8d 14 cd 00 00 00 00 	lea    0x0(,%ecx,8),%edx$/;"	l
cb	test_stride.asm	/^  cb:	68 f5 08 00 00       	push   $0x8f5$/;"	l
cb	usertests.asm	/^      cb:	e8 e5 40 00 00       	call   41b5 <printf>$/;"	l
cb0	sh.asm	/^     cb0:	90                   	nop$/;"	l
cb1	sh.asm	/^     cb1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cb1	usertests.asm	/^     cb1:	ff 75 f4             	pushl  -0xc(%ebp)$/;"	l
cb2	threadtest.asm	/^     cb2:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
cb4	sh.asm	/^     cb4:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
cb4	usertests.asm	/^     cb4:	e8 6d 33 00 00       	call   4026 <kill>$/;"	l
cb5	threadtest.asm	/^     cb5:	c1 e2 02             	shl    $0x2,%edx$/;"	l
cb7	sh.asm	/^     cb7:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
cb8	threadtest.asm	/^     cb8:	01 c2                	add    %eax,%edx$/;"	l
cb9	usertests.asm	/^     cb9:	83 c4 10             	add    $0x10,%esp$/;"	l
cba	sh.asm	/^     cba:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
cba	threadtest.asm	/^     cba:	83 ec 04             	sub    $0x4,%esp$/;"	l
cbc	usertests.asm	/^     cbc:	83 ec 0c             	sub    $0xc,%esp$/;"	l
cbd	sh.asm	/^     cbd:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
cbd	threadtest.asm	/^     cbd:	8d 45 bc             	lea    -0x44(%ebp),%eax$/;"	l
cbf	usertests.asm	/^     cbf:	ff 75 f0             	pushl  -0x10(%ebp)$/;"	l
cc	cat.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	echo.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	forktest.asm	/^  cc:	83 ec 08             	sub    $0x8,%esp$/;"	l
cc	grep.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	hugefiletest.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	init.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	kill.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ln.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ls.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	ls.asm	/^  cc:	e8 0c 05 00 00       	call   5dd <open>$/;"	l
cc	mkdir.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	mkdir.asm	/^  cc:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
cc	my_userapp.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	my_userapp.asm	/^  cc:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cc	rm.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	rm.asm	/^  cc:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
cc	sh.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	stressfs.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	stressfs.asm	/^  cc:	83 c4 10             	add    $0x10,%esp$/;"	l
cc	test_master.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	test_master.asm	/^  cc:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
cc	test_mlfq.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	test_mlfq.asm	/^  cc:	52                   	push   %edx$/;"	l
cc	test_sample.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	test_stride.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	threadtest.asm	/^      cc:	e8 96 15 00 00       	call   1667 <printf>$/;"	l
cc	threadtest.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^        cc = sizeof(buf);$/;"	d
cc	usertests.asm	/^      cc = cc * 2;$/;"	d
cc	usertests.asm	/^    cc = 1;$/;"	d
cc	usertests.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	usertests.asm	/^    cc = read(fd, buf, 300);$/;"	d
cc	usertests.asm	/^  cc = read(fd, buf, sizeof(buf));$/;"	d
cc	wc.asm	/^    cc = read(0, &c, 1);$/;"	d
cc	zombie.asm	/^    cc = read(0, &c, 1);$/;"	d
cc0	sh.asm	/^     cc0:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
cc0	threadtest.asm	/^     cc0:	50                   	push   %eax$/;"	l
cc1	threadtest.asm	/^     cc1:	68 9d 0b 00 00       	push   $0xb9d$/;"	l
cc2	usertests.asm	/^     cc2:	e8 5f 33 00 00       	call   4026 <kill>$/;"	l
cc3	sh.asm	/^     cc3:	0f b6 12             	movzbl (%edx),%edx$/;"	l
cc6	sh.asm	/^     cc6:	88 10                	mov    %dl,(%eax)$/;"	l
cc6	threadtest.asm	/^     cc6:	52                   	push   %edx$/;"	l
cc7	threadtest.asm	/^     cc7:	e8 ac 08 00 00       	call   1578 <thread_create>$/;"	l
cc7	usertests.asm	/^     cc7:	83 c4 10             	add    $0x10,%esp$/;"	l
cc8	sh.asm	/^     cc8:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cca	usertests.asm	/^     cca:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ccb	sh.asm	/^     ccb:	84 c0                	test   %al,%al$/;"	l
ccc	threadtest.asm	/^     ccc:	83 c4 10             	add    $0x10,%esp$/;"	l
ccd	sh.asm	/^     ccd:	75 e2                	jne    cb1 <strcpy+0xd>$/;"	l
ccd	usertests.asm	/^     ccd:	ff 75 ec             	pushl  -0x14(%ebp)$/;"	l
ccf	sh.asm	/^     ccf:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
ccf	threadtest.asm	/^     ccf:	85 c0                	test   %eax,%eax$/;"	l
cd	cat.asm	/^  cd:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
cd	hugefiletest.asm	/^  cd:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
cd	kill.asm	/^  cd:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
cd	ln.asm	/^  cd:	eb 08                	jmp    d7 <strcmp+0xd>$/;"	l
cd	test_mlfq.asm	/^  cd:	50                   	push   %eax$/;"	l
cd	wc.asm	/^  cd:	83 ec 08             	sub    $0x8,%esp$/;"	l
cd0	usertests.asm	/^     cd0:	e8 51 33 00 00       	call   4026 <kill>$/;"	l
cd1	threadtest.asm	/^     cd1:	74 1c                	je     cef <pipetest+0xd4>$/;"	l
cd2	sh.asm	/^     cd2:	c9                   	leave  $/;"	l
cd3	sh.asm	/^     cd3:	c3                   	ret    $/;"	l
cd3	threadtest.asm	/^     cd3:	83 ec 08             	sub    $0x8,%esp$/;"	l
cd4	sh.asm	/^     cd4:	55                   	push   %ebp$/;"	l
cd5	sh.asm	/^     cd5:	89 e5                	mov    %esp,%ebp$/;"	l
cd5	usertests.asm	/^     cd5:	83 c4 10             	add    $0x10,%esp$/;"	l
cd6	threadtest.asm	/^     cd6:	68 01 1b 00 00       	push   $0x1b01$/;"	l
cd7	sh.asm	/^     cd7:	eb 08                	jmp    ce1 <strcmp+0xd>$/;"	l
cd8	usertests.asm	/^     cd8:	83 ec 08             	sub    $0x8,%esp$/;"	l
cd9	sh.asm	/^     cd9:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
cdb	threadtest.asm	/^     cdb:	6a 01                	push   $0x1$/;"	l
cdb	usertests.asm	/^     cdb:	68 75 4a 00 00       	push   $0x4a75$/;"	l
cdd	sh.asm	/^     cdd:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
cdd	threadtest.asm	/^     cdd:	e8 85 09 00 00       	call   1667 <printf>$/;"	l
ce	echo.asm	/^  ce:	84 c0                	test   %al,%al$/;"	l
ce	sh.asm	/^      ce:	e8 02 0e 00 00       	call   ed5 <exit>$/;"	l
ce	test_master.asm	/^  ce:	89 ca                	mov    %ecx,%edx$/;"	l
ce	test_mlfq.asm	/^  ce:	53                   	push   %ebx$/;"	l
ce	zombie.asm	/^  ce:	eb 04                	jmp    d4 <strlen+0x13>$/;"	l
ce0	usertests.asm	/^     ce0:	6a 01                	push   $0x1$/;"	l
ce1	sh.asm	/^     ce1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ce2	threadtest.asm	/^     ce2:	83 c4 10             	add    $0x10,%esp$/;"	l
ce2	usertests.asm	/^     ce2:	e8 ce 34 00 00       	call   41b5 <printf>$/;"	l
ce4	sh.asm	/^     ce4:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ce5	threadtest.asm	/^     ce5:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ce7	sh.asm	/^     ce7:	84 c0                	test   %al,%al$/;"	l
ce7	usertests.asm	/^     ce7:	83 c4 10             	add    $0x10,%esp$/;"	l
ce9	sh.asm	/^     ce9:	74 10                	je     cfb <strcmp+0x27>$/;"	l
cea	threadtest.asm	/^     cea:	e9 7a 01 00 00       	jmp    e69 <pipetest+0x24e>$/;"	l
cea	usertests.asm	/^     cea:	e8 0f 33 00 00       	call   3ffe <wait>$/;"	l
ceb	sh.asm	/^     ceb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cee	sh.asm	/^     cee:	0f b6 10             	movzbl (%eax),%edx$/;"	l
cef	threadtest.asm	/^     cef:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
cef	usertests.asm	/^     cef:	e8 0a 33 00 00       	call   3ffe <wait>$/;"	l
cf	forktest.asm	/^  cf:	68 93 04 00 00       	push   $0x493$/;"	l
cf	ln.asm	/^  cf:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
cf	mkdir.asm	/^  cf:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
cf	my_userapp.asm	/^  cf:	0f b6 c0             	movzbl %al,%eax$/;"	l
cf	rm.asm	/^  cf:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
cf	stressfs.asm	/^  cf:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
cf	test_mlfq.asm	/^  cf:	68 00 09 00 00       	push   $0x900$/;"	l
cf1	sh.asm	/^     cf1:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
cf3	threadtest.asm	/^     cf3:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)$/;"	l
cf4	sh.asm	/^     cf4:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cf4	usertests.asm	/^     cf4:	e8 05 33 00 00       	call   3ffe <wait>$/;"	l
cf7	sh.asm	/^     cf7:	38 c2                	cmp    %al,%dl$/;"	l
cf7	threadtest.asm	/^     cf7:	7e b6                	jle    caf <pipetest+0x94>$/;"	l
cf9	sh.asm	/^     cf9:	74 de                	je     cd9 <strcmp+0x5>$/;"	l
cf9	threadtest.asm	/^     cf9:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
cf9	usertests.asm	/^     cf9:	83 ec 08             	sub    $0x8,%esp$/;"	l
cfb	sh.asm	/^     cfb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
cfc	usertests.asm	/^     cfc:	68 7e 4a 00 00       	push   $0x4a7e$/;"	l
cfe	sh.asm	/^     cfe:	0f b6 00             	movzbl (%eax),%eax$/;"	l
cgaputc	console.c	/^cgaputc(int c)$/;"	f	file:
chan	proc.h	/^  void *chan;                  \/\/ If non-zero, sleeping on chan$/;"	m	struct:proc
char	cat.asm	/^char buf[512];$/;"	l
char	grep.asm	/^char buf[1024];$/;"	l
char	init.asm	/^char *argv[] = { "sh", 0 };$/;"	l
char	sh.asm	/^char symbols[] = "<|>&;()";$/;"	l
char	sh.asm	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	l
char	usertests.asm	/^char uninit[10000];$/;"	l
char	wc.asm	/^char buf[512];$/;"	l
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mp
checksum	mp.h	/^  uchar checksum;               \/\/ all bytes must add up to 0$/;"	m	struct:mpconf
child_argv	test_master.c	/^char *child_argv[CNT_CHILD][3] = {$/;"	v
child_argv	test_sample.c	/^char *child_argv[CNT_TEST][CNT_CHILD][3] = {$/;"	v
clearpteu	vm.c	/^clearpteu(pde_t *pgdir, char *uva)$/;"	f
cli	x86.h	/^cli(void)$/;"	f
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_RDONLY, 0);$/;"	d
cmd	sh.asm	/^      cmd = redircmd(cmd, q, eq, O_WRONLY|O_CREATE, 1);$/;"	d
cmd	sh.asm	/^    cmd = backcmd(cmd);$/;"	d
cmd	sh.asm	/^    cmd = listcmd(cmd, parseline(ps, es));$/;"	d
cmd	sh.asm	/^    cmd = pipecmd(cmd, parsepipe(ps, es));$/;"	d
cmd	sh.asm	/^  cmd = (struct execcmd*)ret;$/;"	d
cmd	sh.asm	/^  cmd = malloc(sizeof(*cmd));$/;"	d
cmd	sh.asm	/^  cmd = parseexec(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(&s, es);$/;"	d
cmd	sh.asm	/^  cmd = parseline(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parsepipe(ps, es);$/;"	d
cmd	sh.asm	/^  cmd = parseredirs(cmd, ps, es);$/;"	d
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:backcmd	typeref:struct:backcmd::cmd	file:
cmd	sh.c	/^  struct cmd *cmd;$/;"	m	struct:redircmd	typeref:struct:redircmd::cmd	file:
cmd	sh.c	/^struct cmd {$/;"	s	file:
cmos_read	lapic.c	/^static uint cmos_read(uint reg)$/;"	f	file:
cmostime	lapic.c	/^void cmostime(struct rtcdate *r)$/;"	f
code	kernel.asm	/^  code = P2V(0x7000);$/;"	d
commit	log.c	/^commit()$/;"	f	file:
committing	log.c	/^  int committing;  \/\/ in commit(), please wait.$/;"	m	struct:log	file:
concreate	usertests.c	/^concreate(void)$/;"	f
conf	kernel.asm	/^  conf = (struct mpconf*) P2V((uint) mp->physaddr);$/;"	d
cons	console.c	/^} cons;$/;"	v	typeref:struct:__anon7	file:
consoleinit	console.c	/^consoleinit(void)$/;"	f
consoleintr	console.c	/^consoleintr(int (*getc)(void))$/;"	f
consoleread	console.c	/^consoleread(struct inode *ip, char *dst, int n)$/;"	f
consolewrite	console.c	/^consolewrite(struct inode *ip, char *buf, int n)$/;"	f
consputc	console.c	/^consputc(int c)$/;"	f
context	proc.h	/^  struct context *context;     \/\/ swtch() here to run process$/;"	m	struct:proc	typeref:struct:proc::context
context	proc.h	/^struct context {$/;"	s
copyout	vm.c	/^copyout(pde_t *pgdir, uint va, void *p, uint len)$/;"	f
copyuvm	vm.c	/^copyuvm(pde_t *pgdir, uint sz)$/;"	f
cprintf	console.c	/^cprintf(char *fmt, ...)$/;"	f
cpu	proc.h	/^struct cpu {$/;"	s
cpu	spinlock.h	/^  struct cpu *cpu;   \/\/ The cpu holding the lock.$/;"	m	struct:spinlock	typeref:struct:spinlock::cpu
cpu_share	test_stride.asm	/^  cpu_share = atoi(argv[1]);$/;"	d
cpuid	proc.c	/^cpuid() {$/;"	f
cpus	mp.c	/^struct cpu cpus[NCPU];$/;"	v	typeref:struct:cpu
cr3	mmu.h	/^  void *cr3;         \/\/ Page directory base$/;"	m	struct:taskstate
create	sysfile.c	/^create(char *path, short type, short major, short minor)$/;"	f	file:
createdelete	usertests.c	/^createdelete(void)$/;"	f
createtest	usertests.c	/^createtest(void)$/;"	f
crt	console.c	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	v	file:
cs	mmu.h	/^  uint cs : 16;         \/\/ code segment selector$/;"	m	struct:gatedesc
cs	mmu.h	/^  ushort cs;$/;"	m	struct:taskstate
cs	x86.h	/^  ushort cs;$/;"	m	struct:trapframe
ctlmap	kbd.h	/^static uchar ctlmap[256] =$/;"	v
curr_mlfq_level	test_mlfq.asm	/^            curr_mlfq_level = getlev();$/;"	d
curr_tick	test_stride.asm	/^      curr_tick = uptime();$/;"	d
cwd	proc.h	/^  struct inode *cwd;           \/\/ Current directory$/;"	m	struct:proc	typeref:struct:proc::inode
d	echo.asm	/^   d:	53                   	push   %ebx$/;"	l
d	grep.asm	/^   d:	e9 b6 00 00 00       	jmp    c8 <grep+0xc8>$/;"	l
d	hugefiletest.asm	/^   d:	51                   	push   %ecx$/;"	l
d	init.asm	/^   d:	51                   	push   %ecx$/;"	l
d	kernel.asm	/^  d = dst;$/;"	d
d	kill.asm	/^   d:	53                   	push   %ebx$/;"	l
d	ln.asm	/^   d:	53                   	push   %ebx$/;"	l
d	ls.asm	/^   d:	e8 c9 03 00 00       	call   3db <strlen>$/;"	l
d	mkdir.asm	/^   d:	53                   	push   %ebx$/;"	l
d	my_userapp.asm	/^   d:	51                   	push   %ecx$/;"	l
d	rm.asm	/^   d:	53                   	push   %ebx$/;"	l
d	stressfs.asm	/^   d:	51                   	push   %ecx$/;"	l
d	test_master.asm	/^   d:	51                   	push   %ecx$/;"	l
d	test_mlfq.asm	/^   d:	53                   	push   %ebx$/;"	l
d	test_sample.asm	/^   d:	53                   	push   %ebx$/;"	l
d	test_stride.asm	/^   d:	51                   	push   %ecx$/;"	l
d	threadtest.asm	/^       d:	53                   	push   %ebx$/;"	l
d	wc.asm	/^   d:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
d	zombie.asm	/^   d:	51                   	push   %ecx$/;"	l
d0	cat.asm	/^  d0:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
d0	echo.asm	/^  d0:	74 10                	je     e2 <strcmp+0x27>$/;"	l
d0	grep.asm	/^  d0:	29 c2                	sub    %eax,%edx$/;"	l
d0	hugefiletest.asm	/^  d0:	c1 e0 09             	shl    $0x9,%eax$/;"	l
d0	init.asm	/^  d0:	83 ec 08             	sub    $0x8,%esp$/;"	l
d0	test_master.asm	/^  d0:	89 fb                	mov    %edi,%ebx$/;"	l
d0	test_stride.asm	/^  d0:	6a 01                	push   $0x1$/;"	l
d0	usertests.asm	/^      d0:	83 c4 10             	add    $0x10,%esp$/;"	l
d0	wc.asm	/^  d0:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
d0	zombie.asm	/^  d0:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)$/;"	l
d00	threadtest.asm	/^     d00:	eb 3b                	jmp    d3d <pipetest+0x122>$/;"	l
d01	sh.asm	/^     d01:	0f b6 d0             	movzbl %al,%edx$/;"	l
d01	usertests.asm	/^     d01:	6a 01                	push   $0x1$/;"	l
d02	threadtest.asm	/^     d02:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
d03	usertests.asm	/^     d03:	e8 ad 34 00 00       	call   41b5 <printf>$/;"	l
d04	sh.asm	/^     d04:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d05	threadtest.asm	/^     d05:	8b 44 85 c8          	mov    -0x38(%ebp,%eax,4),%eax$/;"	l
d07	sh.asm	/^     d07:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d08	usertests.asm	/^     d08:	83 c4 10             	add    $0x10,%esp$/;"	l
d09	threadtest.asm	/^     d09:	83 ec 08             	sub    $0x8,%esp$/;"	l
d0a	sh.asm	/^     d0a:	0f b6 c0             	movzbl %al,%eax$/;"	l
d0b	usertests.asm	/^     d0b:	c9                   	leave  $/;"	l
d0c	threadtest.asm	/^     d0c:	8d 55 b0             	lea    -0x50(%ebp),%edx$/;"	l
d0c	usertests.asm	/^     d0c:	c3                   	ret    $/;"	l
d0d	sh.asm	/^     d0d:	29 c2                	sub    %eax,%edx$/;"	l
d0d	usertests.asm	/^     d0d:	55                   	push   %ebp$/;"	l
d0e	usertests.asm	/^     d0e:	89 e5                	mov    %esp,%ebp$/;"	l
d0f	sh.asm	/^     d0f:	89 d0                	mov    %edx,%eax$/;"	l
d0f	threadtest.asm	/^     d0f:	52                   	push   %edx$/;"	l
d1	kill.asm	/^  d1:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
d1	ls.asm	/^  d1:	83 c4 10             	add    $0x10,%esp$/;"	l
d1	threadtest.asm	/^      d1:	83 c4 10             	add    $0x10,%esp$/;"	l
d10	threadtest.asm	/^     d10:	50                   	push   %eax$/;"	l
d10	usertests.asm	/^     d10:	83 ec 18             	sub    $0x18,%esp$/;"	l
d11	sh.asm	/^     d11:	5d                   	pop    %ebp$/;"	l
d11	threadtest.asm	/^     d11:	e8 6a 08 00 00       	call   1580 <thread_join>$/;"	l
d12	sh.asm	/^     d12:	c3                   	ret    $/;"	l
d13	sh.asm	/^     d13:	55                   	push   %ebp$/;"	l
d13	usertests.asm	/^     d13:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
d14	sh.asm	/^     d14:	89 e5                	mov    %esp,%ebp$/;"	l
d16	sh.asm	/^     d16:	83 ec 10             	sub    $0x10,%esp$/;"	l
d16	threadtest.asm	/^     d16:	83 c4 10             	add    $0x10,%esp$/;"	l
d19	sh.asm	/^     d19:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
d19	threadtest.asm	/^     d19:	85 c0                	test   %eax,%eax$/;"	l
d1a	usertests.asm	/^     d1a:	eb 4f                	jmp    d6b <exitwait+0x5e>$/;"	l
d1b	threadtest.asm	/^     d1b:	74 1c                	je     d39 <pipetest+0x11e>$/;"	l
d1c	usertests.asm	/^     d1c:	e8 cd 32 00 00       	call   3fee <fork>$/;"	l
d1d	threadtest.asm	/^     d1d:	83 ec 08             	sub    $0x8,%esp$/;"	l
d2	echo.asm	/^  d2:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d2	grep.asm	/^  d2:	89 d0                	mov    %edx,%eax$/;"	l
d2	mkdir.asm	/^  d2:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
d2	my_userapp.asm	/^  d2:	29 c2                	sub    %eax,%edx$/;"	l
d2	rm.asm	/^  d2:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
d2	test_master.asm	/^  d2:	89 5d 08             	mov    %ebx,0x8(%ebp)$/;"	l
d2	test_sample.asm	/^  d2:	89 d1                	mov    %edx,%ecx$/;"	l
d2	test_stride.asm	/^  d2:	e8 28 04 00 00       	call   4ff <printf>$/;"	l
d20	sh.asm	/^     d20:	eb 04                	jmp    d26 <strlen+0x13>$/;"	l
d20	threadtest.asm	/^     d20:	68 2e 1b 00 00       	push   $0x1b2e$/;"	l
d21	usertests.asm	/^     d21:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
d22	sh.asm	/^     d22:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)$/;"	l
d24	usertests.asm	/^     d24:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
d25	threadtest.asm	/^     d25:	6a 01                	push   $0x1$/;"	l
d26	sh.asm	/^     d26:	8b 55 fc             	mov    -0x4(%ebp),%edx$/;"	l
d27	threadtest.asm	/^     d27:	e8 3b 09 00 00       	call   1667 <printf>$/;"	l
d28	usertests.asm	/^     d28:	79 14                	jns    d3e <exitwait+0x31>$/;"	l
d29	sh.asm	/^     d29:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d2a	usertests.asm	/^     d2a:	83 ec 08             	sub    $0x8,%esp$/;"	l
d2c	sh.asm	/^     d2c:	01 d0                	add    %edx,%eax$/;"	l
d2c	threadtest.asm	/^     d2c:	83 c4 10             	add    $0x10,%esp$/;"	l
d2d	usertests.asm	/^     d2d:	68 0d 46 00 00       	push   $0x460d$/;"	l
d2e	sh.asm	/^     d2e:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d2f	threadtest.asm	/^     d2f:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
d3	hugefiletest.asm	/^  d3:	83 ec 04             	sub    $0x4,%esp$/;"	l
d3	init.asm	/^  d3:	68 14 09 00 00       	push   $0x914$/;"	l
d3	ln.asm	/^  d3:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
d3	sh.asm	/^      d3:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
d3	stressfs.asm	/^  d3:	83 7d f4 13          	cmpl   $0x13,-0xc(%ebp)$/;"	l
d3	usertests.asm	/^      d3:	e8 1e 3f 00 00       	call   3ff6 <exit>$/;"	l
d3	wc.asm	/^  d3:	ff 75 e8             	pushl  -0x18(%ebp)$/;"	l
d31	sh.asm	/^     d31:	84 c0                	test   %al,%al$/;"	l
d32	usertests.asm	/^     d32:	6a 01                	push   $0x1$/;"	l
d33	sh.asm	/^     d33:	75 ed                	jne    d22 <strlen+0xf>$/;"	l
d34	threadtest.asm	/^     d34:	e9 30 01 00 00       	jmp    e69 <pipetest+0x24e>$/;"	l
d34	usertests.asm	/^     d34:	e8 7c 34 00 00       	call   41b5 <printf>$/;"	l
d35	sh.asm	/^     d35:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
d38	sh.asm	/^     d38:	c9                   	leave  $/;"	l
d39	sh.asm	/^     d39:	c3                   	ret    $/;"	l
d39	threadtest.asm	/^     d39:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
d39	usertests.asm	/^     d39:	83 c4 10             	add    $0x10,%esp$/;"	l
d3a	sh.asm	/^     d3a:	55                   	push   %ebp$/;"	l
d3b	sh.asm	/^     d3b:	89 e5                	mov    %esp,%ebp$/;"	l
d3c	usertests.asm	/^     d3c:	eb 45                	jmp    d83 <exitwait+0x76>$/;"	l
d3d	sh.asm	/^     d3d:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
d3d	threadtest.asm	/^     d3d:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)$/;"	l
d3e	usertests.asm	/^     d3e:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
d4	cat.asm	/^  d4:	79 29                	jns    ff <main+0x85>$/;"	l
d4	forktest.asm	/^  d4:	6a 01                	push   $0x1$/;"	l
d4	grep.asm	/^  d4:	89 c2                	mov    %eax,%edx$/;"	l
d4	ls.asm	/^  d4:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
d4	my_userapp.asm	/^  d4:	89 d0                	mov    %edx,%eax$/;"	l
d4	test_mlfq.asm	/^  d4:	6a 01                	push   $0x1$/;"	l
d4	test_sample.asm	/^  d4:	89 ca                	mov    %ecx,%edx$/;"	l
d4	threadtest.asm	/^      d4:	e8 cf 13 00 00       	call   14a8 <exit>$/;"	l
d4	zombie.asm	/^  d4:	8b 55 fc             	mov    -0x4(%ebp),%edx$/;"	l
d40	sh.asm	/^     d40:	50                   	push   %eax$/;"	l
d41	sh.asm	/^     d41:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
d41	threadtest.asm	/^     d41:	7e bf                	jle    d02 <pipetest+0xe7>$/;"	l
d42	usertests.asm	/^     d42:	74 1e                	je     d62 <exitwait+0x55>$/;"	l
d43	threadtest.asm	/^     d43:	8b 45 b8             	mov    -0x48(%ebp),%eax$/;"	l
d44	sh.asm	/^     d44:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
d44	usertests.asm	/^     d44:	e8 b5 32 00 00       	call   3ffe <wait>$/;"	l
d46	threadtest.asm	/^     d46:	83 ec 0c             	sub    $0xc,%esp$/;"	l
d47	sh.asm	/^     d47:	e8 32 ff ff ff       	call   c7e <stosb>$/;"	l
d49	threadtest.asm	/^     d49:	50                   	push   %eax$/;"	l
d49	usertests.asm	/^     d49:	3b 45 f0             	cmp    -0x10(%ebp),%eax$/;"	l
d4a	threadtest.asm	/^     d4a:	e8 81 07 00 00       	call   14d0 <close>$/;"	l
d4c	sh.asm	/^     d4c:	83 c4 0c             	add    $0xc,%esp$/;"	l
d4c	usertests.asm	/^     d4c:	74 19                	je     d67 <exitwait+0x5a>$/;"	l
d4e	usertests.asm	/^     d4e:	83 ec 08             	sub    $0x8,%esp$/;"	l
d4f	sh.asm	/^     d4f:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d4f	threadtest.asm	/^     d4f:	83 c4 10             	add    $0x10,%esp$/;"	l
d5	echo.asm	/^  d5:	0f b6 10             	movzbl (%eax),%edx$/;"	l
d5	kill.asm	/^  d5:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d5	mkdir.asm	/^  d5:	0f b6 12             	movzbl (%edx),%edx$/;"	l
d5	rm.asm	/^  d5:	0f b6 12             	movzbl (%edx),%edx$/;"	l
d5	test_master.asm	/^  d5:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
d51	usertests.asm	/^     d51:	68 8a 4a 00 00       	push   $0x4a8a$/;"	l
d52	sh.asm	/^     d52:	c9                   	leave  $/;"	l
d52	threadtest.asm	/^     d52:	e8 51 07 00 00       	call   14a8 <exit>$/;"	l
d53	sh.asm	/^     d53:	c3                   	ret    $/;"	l
d54	sh.asm	/^     d54:	55                   	push   %ebp$/;"	l
d55	sh.asm	/^     d55:	89 e5                	mov    %esp,%ebp$/;"	l
d56	usertests.asm	/^     d56:	6a 01                	push   $0x1$/;"	l
d57	sh.asm	/^     d57:	83 ec 04             	sub    $0x4,%esp$/;"	l
d57	threadtest.asm	/^     d57:	8b 45 b8             	mov    -0x48(%ebp),%eax$/;"	l
d58	usertests.asm	/^     d58:	e8 58 34 00 00       	call   41b5 <printf>$/;"	l
d5a	sh.asm	/^     d5a:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d5a	threadtest.asm	/^     d5a:	83 ec 0c             	sub    $0xc,%esp$/;"	l
d5d	sh.asm	/^     d5d:	88 45 fc             	mov    %al,-0x4(%ebp)$/;"	l
d5d	threadtest.asm	/^     d5d:	50                   	push   %eax$/;"	l
d5d	usertests.asm	/^     d5d:	83 c4 10             	add    $0x10,%esp$/;"	l
d5e	threadtest.asm	/^     d5e:	e8 6d 07 00 00       	call   14d0 <close>$/;"	l
d6	cat.asm	/^  d6:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
d6	forktest.asm	/^  d6:	e8 25 ff ff ff       	call   0 <printf>$/;"	l
d6	grep.asm	/^  d6:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
d6	hugefiletest.asm	/^  d6:	50                   	push   %eax$/;"	l
d6	my_userapp.asm	/^  d6:	5d                   	pop    %ebp$/;"	l
d6	sh.asm	/^      d6:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
d6	test_mlfq.asm	/^  d6:	e8 33 04 00 00       	call   50e <printf>$/;"	l
d6	test_sample.asm	/^  d6:	c1 e2 04             	shl    $0x4,%edx$/;"	l
d6	wc.asm	/^  d6:	ff 75 ec             	pushl  -0x14(%ebp)$/;"	l
d60	sh.asm	/^     d60:	eb 14                	jmp    d76 <strchr+0x22>$/;"	l
d60	usertests.asm	/^     d60:	eb 21                	jmp    d83 <exitwait+0x76>$/;"	l
d62	sh.asm	/^     d62:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d62	usertests.asm	/^     d62:	e8 8f 32 00 00       	call   3ff6 <exit>$/;"	l
d63	threadtest.asm	/^     d63:	83 c4 10             	add    $0x10,%esp$/;"	l
d65	sh.asm	/^     d65:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d66	threadtest.asm	/^     d66:	c7 45 bc 01 00 00 00 	movl   $0x1,-0x44(%ebp)$/;"	l
d67	usertests.asm	/^     d67:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
d68	sh.asm	/^     d68:	3a 45 fc             	cmp    -0x4(%ebp),%al$/;"	l
d6b	sh.asm	/^     d6b:	75 05                	jne    d72 <strchr+0x1e>$/;"	l
d6b	usertests.asm	/^     d6b:	83 7d f4 63          	cmpl   $0x63,-0xc(%ebp)$/;"	l
d6d	sh.asm	/^     d6d:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d6d	threadtest.asm	/^     d6d:	c7 05 18 23 00 00 00 	movl   $0x0,0x2318$/;"	l
d6f	usertests.asm	/^     d6f:	7e ab                	jle    d1c <exitwait+0xf>$/;"	l
d7	hugefiletest.asm	/^  d7:	68 d9 0b 00 00       	push   $0xbd9$/;"	l
d7	ln.asm	/^  d7:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d7	ls.asm	/^  d7:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)$/;"	l
d7	my_userapp.asm	/^  d7:	c3                   	ret    $/;"	l
d7	stressfs.asm	/^  d7:	7e dc                	jle    b5 <main+0xb5>$/;"	l
d7	test_stride.asm	/^  d7:	83 c4 10             	add    $0x10,%esp$/;"	l
d7	zombie.asm	/^  d7:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d70	sh.asm	/^     d70:	eb 13                	jmp    d85 <strchr+0x31>$/;"	l
d71	usertests.asm	/^     d71:	83 ec 08             	sub    $0x8,%esp$/;"	l
d72	sh.asm	/^     d72:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
d74	threadtest.asm	/^     d74:	00 00 00 $/;"	l
d74	usertests.asm	/^     d74:	68 9a 4a 00 00       	push   $0x4a9a$/;"	l
d76	sh.asm	/^     d76:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
d77	threadtest.asm	/^     d77:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
d79	sh.asm	/^     d79:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d79	usertests.asm	/^     d79:	6a 01                	push   $0x1$/;"	l
d7b	usertests.asm	/^     d7b:	e8 35 34 00 00       	call   41b5 <printf>$/;"	l
d7c	sh.asm	/^     d7c:	84 c0                	test   %al,%al$/;"	l
d7e	sh.asm	/^     d7e:	75 e2                	jne    d62 <strchr+0xe>$/;"	l
d7e	threadtest.asm	/^     d7e:	eb 44                	jmp    dc4 <pipetest+0x1a9>$/;"	l
d8	echo.asm	/^  d8:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
d8	init.asm	/^  d8:	6a 01                	push   $0x1$/;"	l
d8	kill.asm	/^  d8:	0f b6 00             	movzbl (%eax),%eax$/;"	l
d8	mkdir.asm	/^  d8:	88 10                	mov    %dl,(%eax)$/;"	l
d8	my_userapp.asm	/^  d8:	55                   	push   %ebp$/;"	l
d8	rm.asm	/^  d8:	88 10                	mov    %dl,(%eax)$/;"	l
d8	test_master.asm	/^  d8:	90                   	nop$/;"	l
d8	usertests.asm	/^      d8:	a1 c8 64 00 00       	mov    0x64c8,%eax$/;"	l
d80	sh.asm	/^     d80:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
d80	threadtest.asm	/^     d80:	8d 45 c8             	lea    -0x38(%ebp),%eax$/;"	l
d80	usertests.asm	/^     d80:	83 c4 10             	add    $0x10,%esp$/;"	l
d83	threadtest.asm	/^     d83:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
d83	usertests.asm	/^     d83:	c9                   	leave  $/;"	l
d84	usertests.asm	/^     d84:	c3                   	ret    $/;"	l
d85	sh.asm	/^     d85:	c9                   	leave  $/;"	l
d85	usertests.asm	/^     d85:	55                   	push   %ebp$/;"	l
d86	sh.asm	/^     d86:	c3                   	ret    $/;"	l
d86	threadtest.asm	/^     d86:	c1 e2 02             	shl    $0x2,%edx$/;"	l
d86	usertests.asm	/^     d86:	89 e5                	mov    %esp,%ebp$/;"	l
d87	sh.asm	/^     d87:	55                   	push   %ebp$/;"	l
d88	sh.asm	/^     d88:	89 e5                	mov    %esp,%ebp$/;"	l
d88	usertests.asm	/^     d88:	83 ec 18             	sub    $0x18,%esp$/;"	l
d89	threadtest.asm	/^     d89:	01 c2                	add    %eax,%edx$/;"	l
d8a	sh.asm	/^     d8a:	83 ec 18             	sub    $0x18,%esp$/;"	l
d8b	threadtest.asm	/^     d8b:	83 ec 04             	sub    $0x4,%esp$/;"	l
d8b	usertests.asm	/^     d8b:	83 ec 08             	sub    $0x8,%esp$/;"	l
d8d	sh.asm	/^     d8d:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
d8e	threadtest.asm	/^     d8e:	8d 45 bc             	lea    -0x44(%ebp),%eax$/;"	l
d8e	usertests.asm	/^     d8e:	68 a7 4a 00 00       	push   $0x4aa7$/;"	l
d9	cat.asm	/^  d9:	8d 14 85 00 00 00 00 	lea    0x0(,%eax,4),%edx$/;"	l
d9	grep.asm	/^  d9:	05 60 0e 00 00       	add    $0xe60,%eax$/;"	l
d9	my_userapp.asm	/^  d9:	89 e5                	mov    %esp,%ebp$/;"	l
d9	sh.asm	/^      d9:	83 ec 0c             	sub    $0xc,%esp$/;"	l
d9	stressfs.asm	/^  d9:	83 ec 0c             	sub    $0xc,%esp$/;"	l
d9	test_master.asm	/^  d9:	5b                   	pop    %ebx$/;"	l
d9	test_sample.asm	/^  d9:	29 ca                	sub    %ecx,%edx$/;"	l
d9	threadtest.asm	/^      d9:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
d9	wc.asm	/^  d9:	ff 75 f0             	pushl  -0x10(%ebp)$/;"	l
d91	threadtest.asm	/^     d91:	50                   	push   %eax$/;"	l
d92	threadtest.asm	/^     d92:	68 9d 0b 00 00       	push   $0xb9d$/;"	l
d93	usertests.asm	/^     d93:	6a 01                	push   $0x1$/;"	l
d94	sh.asm	/^     d94:	eb 42                	jmp    dd8 <gets+0x51>$/;"	l
d95	usertests.asm	/^     d95:	e8 1b 34 00 00       	call   41b5 <printf>$/;"	l
d96	sh.asm	/^     d96:	83 ec 04             	sub    $0x4,%esp$/;"	l
d97	threadtest.asm	/^     d97:	52                   	push   %edx$/;"	l
d98	threadtest.asm	/^     d98:	e8 db 07 00 00       	call   1578 <thread_create>$/;"	l
d99	sh.asm	/^     d99:	6a 01                	push   $0x1$/;"	l
d9a	usertests.asm	/^     d9a:	83 c4 10             	add    $0x10,%esp$/;"	l
d9b	sh.asm	/^     d9b:	8d 45 ef             	lea    -0x11(%ebp),%eax$/;"	l
d9d	threadtest.asm	/^     d9d:	83 c4 10             	add    $0x10,%esp$/;"	l
d9d	usertests.asm	/^     d9d:	e8 d4 32 00 00       	call   4076 <getpid>$/;"	l
d9e	sh.asm	/^     d9e:	50                   	push   %eax$/;"	l
d9f	sh.asm	/^     d9f:	6a 00                	push   $0x0$/;"	l
da	init.asm	/^  da:	e8 38 04 00 00       	call   517 <printf>$/;"	l
da	ln.asm	/^  da:	0f b6 00             	movzbl (%eax),%eax$/;"	l
da	mkdir.asm	/^  da:	0f b6 00             	movzbl (%eax),%eax$/;"	l
da	rm.asm	/^  da:	0f b6 00             	movzbl (%eax),%eax$/;"	l
da	test_master.asm	/^  da:	5f                   	pop    %edi$/;"	l
da	test_stride.asm	/^  da:	90                   	nop$/;"	l
da	zombie.asm	/^  da:	01 d0                	add    %edx,%eax$/;"	l
da0	threadtest.asm	/^     da0:	85 c0                	test   %eax,%eax$/;"	l
da1	sh.asm	/^     da1:	e8 47 01 00 00       	call   eed <read>$/;"	l
da2	threadtest.asm	/^     da2:	74 1c                	je     dc0 <pipetest+0x1a5>$/;"	l
da2	usertests.asm	/^     da2:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
da4	threadtest.asm	/^     da4:	83 ec 08             	sub    $0x8,%esp$/;"	l
da5	usertests.asm	/^     da5:	e8 44 32 00 00       	call   3fee <fork>$/;"	l
da6	sh.asm	/^     da6:	83 c4 10             	add    $0x10,%esp$/;"	l
da7	threadtest.asm	/^     da7:	68 01 1b 00 00       	push   $0x1b01$/;"	l
da9	sh.asm	/^     da9:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
daa	usertests.asm	/^     daa:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
dac	sh.asm	/^     dac:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
dac	threadtest.asm	/^     dac:	6a 01                	push   $0x1$/;"	l
dad	usertests.asm	/^     dad:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
dae	threadtest.asm	/^     dae:	e8 b4 08 00 00       	call   1667 <printf>$/;"	l
data	buf.h	/^  uchar data[BSIZE];$/;"	m	struct:buf
data	ioapic.c	/^  uint data;$/;"	m	struct:ioapic	file:
data	kernel.asm	/^    data = (shift & E0ESC ? data : data & 0x7F);$/;"	d
data	kernel.asm	/^  data = inb(KBDATAP);$/;"	d
data	pipe.c	/^  char data[PIPESIZE];$/;"	m	struct:pipe	file:
day	date.h	/^  uint day;$/;"	m	struct:rtcdate
db	echo.asm	/^  db:	0f b6 00             	movzbl (%eax),%eax$/;"	l
db	forktest.asm	/^  db:	83 c4 10             	add    $0x10,%esp$/;"	l
db	kill.asm	/^  db:	84 c0                	test   %al,%al$/;"	l
db	ls.asm	/^  db:	79 1a                	jns    f7 <ls+0x3f>$/;"	l
db	mmu.h	/^  uint db : 1;         \/\/ 0 = 16-bit segment, 1 = 32-bit segment$/;"	m	struct:segdesc
db	my_userapp.asm	/^  db:	83 ec 10             	sub    $0x10,%esp$/;"	l
db	test_master.asm	/^  db:	5d                   	pop    %ebp$/;"	l
db	test_mlfq.asm	/^  db:	83 c4 20             	add    $0x20,%esp$/;"	l
db	test_sample.asm	/^  db:	01 d0                	add    %edx,%eax$/;"	l
db	test_stride.asm	/^  db:	e8 60 02 00 00       	call   340 <exit>$/;"	l
db0	sh.asm	/^     db0:	7e 33                	jle    de5 <gets+0x5e>$/;"	l
db1	usertests.asm	/^     db1:	0f 85 b7 00 00 00    	jne    e6e <mem+0xe9>$/;"	l
db2	sh.asm	/^     db2:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
db3	threadtest.asm	/^     db3:	83 c4 10             	add    $0x10,%esp$/;"	l
db5	sh.asm	/^     db5:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
db6	threadtest.asm	/^     db6:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
db7	usertests.asm	/^     db7:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
db8	sh.asm	/^     db8:	89 55 f4             	mov    %edx,-0xc(%ebp)$/;"	l
dbb	sh.asm	/^     dbb:	89 c2                	mov    %eax,%edx$/;"	l
dbb	threadtest.asm	/^     dbb:	e9 a9 00 00 00       	jmp    e69 <pipetest+0x24e>$/;"	l
dbd	sh.asm	/^     dbd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
dbe	usertests.asm	/^     dbe:	eb 0e                	jmp    dce <mem+0x49>$/;"	l
dc	hugefiletest.asm	/^  dc:	6a 01                	push   $0x1$/;"	l
dc	sh.asm	/^      dc:	50                   	push   %eax$/;"	l
dc	stressfs.asm	/^  dc:	ff 75 f0             	pushl  -0x10(%ebp)$/;"	l
dc	test_master.asm	/^  dc:	c3                   	ret    $/;"	l
dc	wc.asm	/^  dc:	68 9f 09 00 00       	push   $0x99f$/;"	l
dc	zombie.asm	/^  dc:	0f b6 00             	movzbl (%eax),%eax$/;"	l
dc0	sh.asm	/^     dc0:	01 c2                	add    %eax,%edx$/;"	l
dc0	threadtest.asm	/^     dc0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
dc0	usertests.asm	/^     dc0:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
dc2	sh.asm	/^     dc2:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax$/;"	l
dc3	usertests.asm	/^     dc3:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
dc4	threadtest.asm	/^     dc4:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)$/;"	l
dc6	sh.asm	/^     dc6:	88 02                	mov    %al,(%edx)$/;"	l
dc6	usertests.asm	/^     dc6:	89 10                	mov    %edx,(%eax)$/;"	l
dc8	sh.asm	/^     dc8:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax$/;"	l
dc8	threadtest.asm	/^     dc8:	7e b6                	jle    d80 <pipetest+0x165>$/;"	l
dc8	usertests.asm	/^     dc8:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
dca	threadtest.asm	/^     dca:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
dcb	usertests.asm	/^     dcb:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
dcc	sh.asm	/^     dcc:	3c 0a                	cmp    $0xa,%al$/;"	l
dce	sh.asm	/^     dce:	74 16                	je     de6 <gets+0x5f>$/;"	l
dce	usertests.asm	/^     dce:	83 ec 0c             	sub    $0xc,%esp$/;"	l
dd	kill.asm	/^  dd:	74 10                	je     ef <strcmp+0x27>$/;"	l
dd	ln.asm	/^  dd:	84 c0                	test   %al,%al$/;"	l
dd	ls.asm	/^  dd:	83 ec 04             	sub    $0x4,%esp$/;"	l
dd	mkdir.asm	/^  dd:	84 c0                	test   %al,%al$/;"	l
dd	rm.asm	/^  dd:	84 c0                	test   %al,%al$/;"	l
dd	sh.asm	/^      dd:	e8 1e ff ff ff       	call   0 <runcmd>$/;"	l
dd	test_master.asm	/^  dd:	55                   	push   %ebp$/;"	l
dd	test_sample.asm	/^  dd:	05 20 0c 00 00       	add    $0xc20,%eax$/;"	l
dd	threadtest.asm	/^      dd:	75 4d                	jne    12c <main+0x12c>$/;"	l
dd	usertests.asm	/^      dd:	83 ec 08             	sub    $0x8,%esp$/;"	l
dd0	sh.asm	/^     dd0:	0f b6 45 ef          	movzbl -0x11(%ebp),%eax$/;"	l
dd1	threadtest.asm	/^     dd1:	eb 38                	jmp    e0b <pipetest+0x1f0>$/;"	l
dd1	usertests.asm	/^     dd1:	68 11 27 00 00       	push   $0x2711$/;"	l
dd3	threadtest.asm	/^     dd3:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
dd4	sh.asm	/^     dd4:	3c 0d                	cmp    $0xd,%al$/;"	l
dd6	sh.asm	/^     dd6:	74 0e                	je     de6 <gets+0x5f>$/;"	l
dd6	threadtest.asm	/^     dd6:	8b 44 85 c8          	mov    -0x38(%ebp,%eax,4),%eax$/;"	l
dd6	usertests.asm	/^     dd6:	e8 ad 36 00 00       	call   4488 <malloc>$/;"	l
dd8	sh.asm	/^     dd8:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
dda	threadtest.asm	/^     dda:	83 ec 08             	sub    $0x8,%esp$/;"	l
ddb	sh.asm	/^     ddb:	83 c0 01             	add    $0x1,%eax$/;"	l
ddb	usertests.asm	/^     ddb:	83 c4 10             	add    $0x10,%esp$/;"	l
ddd	threadtest.asm	/^     ddd:	8d 55 b0             	lea    -0x50(%ebp),%edx$/;"	l
dde	sh.asm	/^     dde:	3b 45 0c             	cmp    0xc(%ebp),%eax$/;"	l
dde	usertests.asm	/^     dde:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
de	echo.asm	/^  de:	38 c2                	cmp    %al,%dl$/;"	l
de	forktest.asm	/^  de:	e8 87 02 00 00       	call   36a <exit>$/;"	l
de	grep.asm	/^  de:	83 ec 04             	sub    $0x4,%esp$/;"	l
de	hugefiletest.asm	/^  de:	e8 10 07 00 00       	call   7f3 <printf>$/;"	l
de	my_userapp.asm	/^  de:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
de	test_master.asm	/^  de:	89 e5                	mov    %esp,%ebp$/;"	l
de	test_mlfq.asm	/^  de:	90                   	nop$/;"	l
de0	threadtest.asm	/^     de0:	52                   	push   %edx$/;"	l
de1	sh.asm	/^     de1:	7c b3                	jl     d96 <gets+0xf>$/;"	l
de1	threadtest.asm	/^     de1:	50                   	push   %eax$/;"	l
de1	usertests.asm	/^     de1:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
de2	threadtest.asm	/^     de2:	e8 99 07 00 00       	call   1580 <thread_join>$/;"	l
de3	sh.asm	/^     de3:	eb 01                	jmp    de6 <gets+0x5f>$/;"	l
de5	sh.asm	/^     de5:	90                   	nop$/;"	l
de5	usertests.asm	/^     de5:	75 d9                	jne    dc0 <mem+0x3b>$/;"	l
de6	sh.asm	/^     de6:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
de7	threadtest.asm	/^     de7:	83 c4 10             	add    $0x10,%esp$/;"	l
de7	usertests.asm	/^     de7:	eb 1c                	jmp    e05 <mem+0x80>$/;"	l
de9	sh.asm	/^     de9:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
de9	usertests.asm	/^     de9:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
dea	threadtest.asm	/^     dea:	85 c0                	test   %eax,%eax$/;"	l
deallocuvm	vm.c	/^deallocuvm(pde_t *pgdir, uint oldsz, uint newsz)$/;"	f
dec	sh.asm	/^     dec:	01 d0                	add    %edx,%eax$/;"	l
dec	threadtest.asm	/^     dec:	74 19                	je     e07 <pipetest+0x1ec>$/;"	l
dec	usertests.asm	/^     dec:	8b 00                	mov    (%eax),%eax$/;"	l
dee	sh.asm	/^     dee:	c6 00 00             	movb   $0x0,(%eax)$/;"	l
dee	threadtest.asm	/^     dee:	83 ec 08             	sub    $0x8,%esp$/;"	l
dee	usertests.asm	/^     dee:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
default	kernel.asm	/^    default:$/;"	l
default	kernel.asm	/^  default:$/;"	l
default	sh.asm	/^  default:$/;"	l
dev	buf.h	/^  uint dev;$/;"	m	struct:buf
dev	file.h	/^  uint dev;           \/\/ Device number$/;"	m	struct:inode
dev	log.c	/^  int dev;$/;"	m	struct:log	file:
dev	stat.h	/^  int dev;     \/\/ File system's disk device$/;"	m	struct:stat
devsw	file.c	/^struct devsw devsw[NDEV];$/;"	v	typeref:struct:devsw
devsw	file.h	/^struct devsw {$/;"	s
df	init.asm	/^  df:	83 c4 10             	add    $0x10,%esp$/;"	l
df	kill.asm	/^  df:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
df	ln.asm	/^  df:	74 10                	je     f1 <strcmp+0x27>$/;"	l
df	mkdir.asm	/^  df:	75 e2                	jne    c3 <strcpy+0xd>$/;"	l
df	rm.asm	/^  df:	75 e2                	jne    c3 <strcpy+0xd>$/;"	l
df	stressfs.asm	/^  df:	e8 ed 02 00 00       	call   3d1 <close>$/;"	l
df	test_mlfq.asm	/^  df:	e8 6b 02 00 00       	call   34f <exit>$/;"	l
df	threadtest.asm	/^      df:	a1 1c 23 00 00       	mov    0x231c,%eax$/;"	l
df	zombie.asm	/^  df:	84 c0                	test   %al,%al$/;"	l
df1	sh.asm	/^     df1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
df1	threadtest.asm	/^     df1:	68 2e 1b 00 00       	push   $0x1b2e$/;"	l
df1	usertests.asm	/^     df1:	83 ec 0c             	sub    $0xc,%esp$/;"	l
df4	sh.asm	/^     df4:	c9                   	leave  $/;"	l
df4	usertests.asm	/^     df4:	ff 75 f4             	pushl  -0xc(%ebp)$/;"	l
df5	sh.asm	/^     df5:	c3                   	ret    $/;"	l
df6	sh.asm	/^     df6:	55                   	push   %ebp$/;"	l
df6	threadtest.asm	/^     df6:	6a 01                	push   $0x1$/;"	l
df7	sh.asm	/^     df7:	89 e5                	mov    %esp,%ebp$/;"	l
df7	usertests.asm	/^     df7:	e8 4a 35 00 00       	call   4346 <free>$/;"	l
df8	threadtest.asm	/^     df8:	e8 6a 08 00 00       	call   1667 <printf>$/;"	l
df9	sh.asm	/^     df9:	83 ec 18             	sub    $0x18,%esp$/;"	l
dfc	sh.asm	/^     dfc:	83 ec 08             	sub    $0x8,%esp$/;"	l
dfc	usertests.asm	/^     dfc:	83 c4 10             	add    $0x10,%esp$/;"	l
dfd	threadtest.asm	/^     dfd:	83 c4 10             	add    $0x10,%esp$/;"	l
dff	sh.asm	/^     dff:	6a 00                	push   $0x0$/;"	l
dff	usertests.asm	/^     dff:	8b 45 e8             	mov    -0x18(%ebp),%eax$/;"	l
dinode	fs.h	/^struct dinode {$/;"	s
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + inum%IPB;$/;"	d
dip	kernel.asm	/^    dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dip	kernel.asm	/^  dip = (struct dinode*)bp->data + ip->inum%IPB;$/;"	d
dirent	fs.h	/^struct dirent {$/;"	s
dirfile	usertests.c	/^dirfile(void)$/;"	f
dirlink	fs.c	/^dirlink(struct inode *dp, char *name, uint inum)$/;"	f
dirlookup	fs.c	/^dirlookup(struct inode *dp, char *name, uint *poff)$/;"	f
dirtest	usertests.c	/^void dirtest(void)$/;"	f
disksize	memide.c	/^static int disksize;$/;"	v	file:
do_commit	kernel.asm	/^    do_commit = 1;$/;"	d
do_yield	test_mlfq.asm	/^	do_yield = atoi(argv[1]);$/;"	d
doprocdump	kernel.asm	/^      doprocdump = 1;$/;"	d
dpl	mmu.h	/^  uint dpl : 2;         \/\/ descriptor(meaning new) privilege level$/;"	m	struct:gatedesc
dpl	mmu.h	/^  uint dpl : 2;        \/\/ Descriptor Privilege Level$/;"	m	struct:segdesc
ds	mmu.h	/^  ushort ds;$/;"	m	struct:taskstate
ds	x86.h	/^  ushort ds;$/;"	m	struct:trapframe
dst	cat.asm	/^  dst = vdst;$/;"	d
dst	echo.asm	/^  dst = vdst;$/;"	d
dst	forktest.asm	/^  dst = vdst;$/;"	d
dst	grep.asm	/^  dst = vdst;$/;"	d
dst	hugefiletest.asm	/^  dst = vdst;$/;"	d
dst	init.asm	/^  dst = vdst;$/;"	d
dst	kill.asm	/^  dst = vdst;$/;"	d
dst	ln.asm	/^  dst = vdst;$/;"	d
dst	ls.asm	/^  dst = vdst;$/;"	d
dst	mkdir.asm	/^  dst = vdst;$/;"	d
dst	my_userapp.asm	/^  dst = vdst;$/;"	d
dst	rm.asm	/^  dst = vdst;$/;"	d
dst	sh.asm	/^  dst = vdst;$/;"	d
dst	stressfs.asm	/^  dst = vdst;$/;"	d
dst	test_master.asm	/^  dst = vdst;$/;"	d
dst	test_mlfq.asm	/^  dst = vdst;$/;"	d
dst	test_sample.asm	/^  dst = vdst;$/;"	d
dst	test_stride.asm	/^  dst = vdst;$/;"	d
dst	threadtest.asm	/^  dst = vdst;$/;"	d
dst	usertests.asm	/^  dst = vdst;$/;"	d
dst	wc.asm	/^  dst = vdst;$/;"	d
dst	zombie.asm	/^  dst = vdst;$/;"	d
e	cat.asm	/^   e:	68 e0 0b 00 00       	push   $0xbe0$/;"	l
e	console.c	/^  uint e;  \/\/ Edit index$/;"	m	struct:__anon8	file:
e	echo.asm	/^   e:	51                   	push   %ecx$/;"	l
e	hugefiletest.asm	/^   e:	81 ec 24 04 00 00    	sub    $0x424,%esp$/;"	l
e	init.asm	/^   e:	83 ec 14             	sub    $0x14,%esp$/;"	l
e	kernel.asm	/^  e = addr+len;$/;"	d
e	kill.asm	/^   e:	51                   	push   %ecx$/;"	l
e	ln.asm	/^   e:	51                   	push   %ecx$/;"	l
e	mkdir.asm	/^   e:	51                   	push   %ecx$/;"	l
e	my_userapp.asm	/^   e:	83 ec 14             	sub    $0x14,%esp$/;"	l
e	rm.asm	/^   e:	51                   	push   %ecx$/;"	l
e	stressfs.asm	/^   e:	81 ec 24 02 00 00    	sub    $0x224,%esp$/;"	l
e	test_master.asm	/^   e:	83 ec 14             	sub    $0x14,%esp$/;"	l
e	test_mlfq.asm	/^   e:	51                   	push   %ecx$/;"	l
e	test_sample.asm	/^   e:	51                   	push   %ecx$/;"	l
e	test_stride.asm	/^   e:	83 ec 24             	sub    $0x24,%esp$/;"	l
e	threadtest.asm	/^       e:	51                   	push   %ecx$/;"	l
e	usertests.asm	/^       e:	68 82 45 00 00       	push   $0x4582$/;"	l
e	zombie.asm	/^   e:	83 ec 04             	sub    $0x4,%esp$/;"	l
e0	cat.asm	/^  e0:	8b 43 04             	mov    0x4(%ebx),%eax$/;"	l
e0	echo.asm	/^  e0:	74 de                	je     c0 <strcmp+0x5>$/;"	l
e0	ls.asm	/^  e0:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
e0	test_master.asm	/^  e0:	83 ec 10             	sub    $0x10,%esp$/;"	l
e0	test_stride.asm	/^  e0:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
e0	usertests.asm	/^      e0:	68 f0 45 00 00       	push   $0x45f0$/;"	l
e00	threadtest.asm	/^     e00:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
e01	sh.asm	/^     e01:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
e02	usertests.asm	/^     e02:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e04	sh.asm	/^     e04:	e8 0c 01 00 00       	call   f15 <open>$/;"	l
e05	threadtest.asm	/^     e05:	eb 62                	jmp    e69 <pipetest+0x24e>$/;"	l
e05	usertests.asm	/^     e05:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
e07	threadtest.asm	/^     e07:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
e09	sh.asm	/^     e09:	83 c4 10             	add    $0x10,%esp$/;"	l
e09	usertests.asm	/^     e09:	75 de                	jne    de9 <mem+0x64>$/;"	l
e0b	threadtest.asm	/^     e0b:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)$/;"	l
e0b	usertests.asm	/^     e0b:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e0c	sh.asm	/^     e0c:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e0e	usertests.asm	/^     e0e:	68 00 50 00 00       	push   $0x5000$/;"	l
e0f	sh.asm	/^     e0f:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
e0f	threadtest.asm	/^     e0f:	7e c2                	jle    dd3 <pipetest+0x1b8>$/;"	l
e1	grep.asm	/^  e1:	52                   	push   %edx$/;"	l
e1	ln.asm	/^  e1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e1	mkdir.asm	/^  e1:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e1	rm.asm	/^  e1:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e1	wc.asm	/^  e1:	6a 01                	push   $0x1$/;"	l
e1	zombie.asm	/^  e1:	75 ed                	jne    d0 <strlen+0xf>$/;"	l
e11	threadtest.asm	/^     e11:	8b 45 b4             	mov    -0x4c(%ebp),%eax$/;"	l
e13	sh.asm	/^     e13:	79 07                	jns    e1c <stat+0x26>$/;"	l
e13	usertests.asm	/^     e13:	e8 70 36 00 00       	call   4488 <malloc>$/;"	l
e14	threadtest.asm	/^     e14:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e15	sh.asm	/^     e15:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
e17	threadtest.asm	/^     e17:	50                   	push   %eax$/;"	l
e18	threadtest.asm	/^     e18:	e8 b3 06 00 00       	call   14d0 <close>$/;"	l
e18	usertests.asm	/^     e18:	83 c4 10             	add    $0x10,%esp$/;"	l
e1a	sh.asm	/^     e1a:	eb 25                	jmp    e41 <stat+0x4b>$/;"	l
e1b	usertests.asm	/^     e1b:	89 45 f4             	mov    %eax,-0xc(%ebp)$/;"	l
e1c	sh.asm	/^     e1c:	83 ec 08             	sub    $0x8,%esp$/;"	l
e1d	threadtest.asm	/^     e1d:	83 c4 10             	add    $0x10,%esp$/;"	l
e1e	usertests.asm	/^     e1e:	83 7d f4 00          	cmpl   $0x0,-0xc(%ebp)$/;"	l
e1f	sh.asm	/^     e1f:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
e2	echo.asm	/^  e2:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e2	grep.asm	/^  e2:	50                   	push   %eax$/;"	l
e2	init.asm	/^  e2:	e8 79 02 00 00       	call   360 <wait>$/;"	l
e2	kill.asm	/^  e2:	0f b6 10             	movzbl (%eax),%edx$/;"	l
e2	sh.asm	/^      e2:	83 c4 10             	add    $0x10,%esp$/;"	l
e2	test_sample.asm	/^  e2:	8b 00                	mov    (%eax),%eax$/;"	l
e20	threadtest.asm	/^     e20:	e8 8b 06 00 00       	call   14b0 <wait>$/;"	l
e22	sh.asm	/^     e22:	ff 75 f4             	pushl  -0xc(%ebp)$/;"	l
e22	usertests.asm	/^     e22:	75 25                	jne    e49 <mem+0xc4>$/;"	l
e24	usertests.asm	/^     e24:	83 ec 08             	sub    $0x8,%esp$/;"	l
e25	sh.asm	/^     e25:	e8 03 01 00 00       	call   f2d <fstat>$/;"	l
e25	threadtest.asm	/^     e25:	83 f8 ff             	cmp    $0xffffffff,%eax$/;"	l
e27	usertests.asm	/^     e27:	68 b1 4a 00 00       	push   $0x4ab1$/;"	l
e28	threadtest.asm	/^     e28:	75 19                	jne    e43 <pipetest+0x228>$/;"	l
e2a	sh.asm	/^     e2a:	83 c4 10             	add    $0x10,%esp$/;"	l
e2a	threadtest.asm	/^     e2a:	83 ec 08             	sub    $0x8,%esp$/;"	l
e2c	usertests.asm	/^     e2c:	6a 01                	push   $0x1$/;"	l
e2d	sh.asm	/^     e2d:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
e2d	threadtest.asm	/^     e2d:	68 1e 1c 00 00       	push   $0x1c1e$/;"	l
e2e	usertests.asm	/^     e2e:	e8 82 33 00 00       	call   41b5 <printf>$/;"	l
e3	cat.asm	/^  e3:	01 d0                	add    %edx,%eax$/;"	l
e3	forktest.asm	/^  e3:	83 ec 08             	sub    $0x8,%esp$/;"	l
e3	grep.asm	/^  e3:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
e3	hugefiletest.asm	/^  e3:	83 c4 10             	add    $0x10,%esp$/;"	l
e3	ls.asm	/^  e3:	68 12 0b 00 00       	push   $0xb12$/;"	l
e3	test_master.asm	/^  e3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e3	wc.asm	/^  e3:	e8 eb 04 00 00       	call   5d3 <printf>$/;"	l
e3	zombie.asm	/^  e3:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e30	sh.asm	/^     e30:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e32	threadtest.asm	/^     e32:	6a 01                	push   $0x1$/;"	l
e33	sh.asm	/^     e33:	ff 75 f4             	pushl  -0xc(%ebp)$/;"	l
e33	usertests.asm	/^     e33:	83 c4 10             	add    $0x10,%esp$/;"	l
e34	threadtest.asm	/^     e34:	e8 2e 08 00 00       	call   1667 <printf>$/;"	l
e36	sh.asm	/^     e36:	e8 c2 00 00 00       	call   efd <close>$/;"	l
e36	usertests.asm	/^     e36:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e39	threadtest.asm	/^     e39:	83 c4 10             	add    $0x10,%esp$/;"	l
e39	usertests.asm	/^     e39:	ff 75 f0             	pushl  -0x10(%ebp)$/;"	l
e3b	sh.asm	/^     e3b:	83 c4 10             	add    $0x10,%esp$/;"	l
e3c	threadtest.asm	/^     e3c:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
e3c	usertests.asm	/^     e3c:	e8 e5 31 00 00       	call   4026 <kill>$/;"	l
e3e	sh.asm	/^     e3e:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
e4	ln.asm	/^  e4:	0f b6 10             	movzbl (%eax),%edx$/;"	l
e4	mkdir.asm	/^  e4:	c9                   	leave  $/;"	l
e4	rm.asm	/^  e4:	c9                   	leave  $/;"	l
e4	stressfs.asm	/^  e4:	83 c4 10             	add    $0x10,%esp$/;"	l
e4	test_mlfq.asm	/^  e4:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
e4	test_sample.asm	/^  e4:	83 ec 08             	sub    $0x8,%esp$/;"	l
e4	threadtest.asm	/^      e4:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e41	sh.asm	/^     e41:	c9                   	leave  $/;"	l
e41	threadtest.asm	/^     e41:	eb 26                	jmp    e69 <pipetest+0x24e>$/;"	l
e41	usertests.asm	/^     e41:	83 c4 10             	add    $0x10,%esp$/;"	l
e42	sh.asm	/^     e42:	c3                   	ret    $/;"	l
e43	sh.asm	/^     e43:	55                   	push   %ebp$/;"	l
e43	threadtest.asm	/^     e43:	a1 18 23 00 00       	mov    0x2318,%eax$/;"	l
e44	sh.asm	/^     e44:	89 e5                	mov    %esp,%ebp$/;"	l
e44	usertests.asm	/^     e44:	e8 ad 31 00 00       	call   3ff6 <exit>$/;"	l
e46	sh.asm	/^     e46:	83 ec 10             	sub    $0x10,%esp$/;"	l
e48	threadtest.asm	/^     e48:	85 c0                	test   %eax,%eax$/;"	l
e49	sh.asm	/^     e49:	c7 45 fc 00 00 00 00 	movl   $0x0,-0x4(%ebp)$/;"	l
e49	usertests.asm	/^     e49:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e4a	threadtest.asm	/^     e4a:	74 18                	je     e64 <pipetest+0x249>$/;"	l
e4c	threadtest.asm	/^     e4c:	a1 18 23 00 00       	mov    0x2318,%eax$/;"	l
e4c	usertests.asm	/^     e4c:	ff 75 f4             	pushl  -0xc(%ebp)$/;"	l
e4f	usertests.asm	/^     e4f:	e8 f2 34 00 00       	call   4346 <free>$/;"	l
e5	cat.asm	/^  e5:	8b 00                	mov    (%eax),%eax$/;"	l
e5	echo.asm	/^  e5:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e5	kill.asm	/^  e5:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
e5	mkdir.asm	/^  e5:	c3                   	ret    $/;"	l
e5	my_userapp.asm	/^  e5:	eb 04                	jmp    eb <strlen+0x13>$/;"	l
e5	rm.asm	/^  e5:	c3                   	ret    $/;"	l
e5	sh.asm	/^      e5:	e9 5c 01 00 00       	jmp    246 <runcmd+0x246>$/;"	l
e5	usertests.asm	/^      e5:	50                   	push   %eax$/;"	l
e50	sh.asm	/^     e50:	eb 25                	jmp    e77 <atoi+0x34>$/;"	l
e51	threadtest.asm	/^     e51:	83 ec 04             	sub    $0x4,%esp$/;"	l
e52	sh.asm	/^     e52:	8b 55 fc             	mov    -0x4(%ebp),%edx$/;"	l
e54	threadtest.asm	/^     e54:	50                   	push   %eax$/;"	l
e54	usertests.asm	/^     e54:	83 c4 10             	add    $0x10,%esp$/;"	l
e55	sh.asm	/^     e55:	89 d0                	mov    %edx,%eax$/;"	l
e55	threadtest.asm	/^     e55:	68 3c 1c 00 00       	push   $0x1c3c$/;"	l
e57	sh.asm	/^     e57:	c1 e0 02             	shl    $0x2,%eax$/;"	l
e57	usertests.asm	/^     e57:	83 ec 08             	sub    $0x8,%esp$/;"	l
e5a	sh.asm	/^     e5a:	01 d0                	add    %edx,%eax$/;"	l
e5a	threadtest.asm	/^     e5a:	6a 01                	push   $0x1$/;"	l
e5a	usertests.asm	/^     e5a:	68 cb 4a 00 00       	push   $0x4acb$/;"	l
e5c	sh.asm	/^     e5c:	01 c0                	add    %eax,%eax$/;"	l
e5c	threadtest.asm	/^     e5c:	e8 06 08 00 00       	call   1667 <printf>$/;"	l
e5e	sh.asm	/^     e5e:	89 c1                	mov    %eax,%ecx$/;"	l
e5f	usertests.asm	/^     e5f:	6a 01                	push   $0x1$/;"	l
e6	forktest.asm	/^  e6:	68 a6 04 00 00       	push   $0x4a6$/;"	l
e6	grep.asm	/^  e6:	e8 ba 04 00 00       	call   5a5 <read>$/;"	l
e6	hugefiletest.asm	/^  e6:	83 ec 04             	sub    $0x4,%esp$/;"	l
e6	mkdir.asm	/^  e6:	55                   	push   %ebp$/;"	l
e6	rm.asm	/^  e6:	55                   	push   %ebp$/;"	l
e6	test_master.asm	/^  e6:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
e6	usertests.asm	/^      e6:	e8 ca 40 00 00       	call   41b5 <printf>$/;"	l
e6	zombie.asm	/^  e6:	c9                   	leave  $/;"	l
e60	sh.asm	/^     e60:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e61	threadtest.asm	/^     e61:	83 c4 10             	add    $0x10,%esp$/;"	l
e61	usertests.asm	/^     e61:	e8 4f 33 00 00       	call   41b5 <printf>$/;"	l
e63	sh.asm	/^     e63:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
e64	threadtest.asm	/^     e64:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
e66	sh.asm	/^     e66:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
e66	usertests.asm	/^     e66:	83 c4 10             	add    $0x10,%esp$/;"	l
e69	sh.asm	/^     e69:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e69	threadtest.asm	/^     e69:	c9                   	leave  $/;"	l
e69	usertests.asm	/^     e69:	e8 88 31 00 00       	call   3ff6 <exit>$/;"	l
e6a	threadtest.asm	/^     e6a:	c3                   	ret    $/;"	l
e6b	threadtest.asm	/^     e6b:	55                   	push   %ebp$/;"	l
e6c	sh.asm	/^     e6c:	0f be c0             	movsbl %al,%eax$/;"	l
e6c	threadtest.asm	/^     e6c:	89 e5                	mov    %esp,%ebp$/;"	l
e6e	threadtest.asm	/^     e6e:	83 ec 08             	sub    $0x8,%esp$/;"	l
e6e	usertests.asm	/^     e6e:	e8 8b 31 00 00       	call   3ffe <wait>$/;"	l
e6f	sh.asm	/^     e6f:	01 c8                	add    %ecx,%eax$/;"	l
e7	cat.asm	/^  e7:	83 ec 04             	sub    $0x4,%esp$/;"	l
e7	init.asm	/^  e7:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
e7	ln.asm	/^  e7:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
e7	mkdir.asm	/^  e7:	89 e5                	mov    %esp,%ebp$/;"	l
e7	my_userapp.asm	/^  e7:	83 45 fc 01          	addl   $0x1,-0x4(%ebp)$/;"	l
e7	rm.asm	/^  e7:	89 e5                	mov    %esp,%ebp$/;"	l
e7	stressfs.asm	/^  e7:	83 ec 08             	sub    $0x8,%esp$/;"	l
e7	test_sample.asm	/^  e7:	53                   	push   %ebx$/;"	l
e7	test_stride.asm	/^  e7:	eb b1                	jmp    9a <main+0x9a>$/;"	l
e7	threadtest.asm	/^      e7:	50                   	push   %eax$/;"	l
e7	zombie.asm	/^  e7:	c3                   	ret    $/;"	l
e71	sh.asm	/^     e71:	83 e8 30             	sub    $0x30,%eax$/;"	l
e71	threadtest.asm	/^     e71:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e73	usertests.asm	/^     e73:	90                   	nop$/;"	l
e74	sh.asm	/^     e74:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
e74	threadtest.asm	/^     e74:	68 40 42 0f 00       	push   $0xf4240$/;"	l
e74	usertests.asm	/^     e74:	c9                   	leave  $/;"	l
e75	usertests.asm	/^     e75:	c3                   	ret    $/;"	l
e76	usertests.asm	/^     e76:	55                   	push   %ebp$/;"	l
e77	sh.asm	/^     e77:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e77	usertests.asm	/^     e77:	89 e5                	mov    %esp,%ebp$/;"	l
e79	threadtest.asm	/^     e79:	e8 ba 06 00 00       	call   1538 <sleep>$/;"	l
e79	usertests.asm	/^     e79:	83 ec 38             	sub    $0x38,%esp$/;"	l
e7a	sh.asm	/^     e7a:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e7c	usertests.asm	/^     e7c:	83 ec 08             	sub    $0x8,%esp$/;"	l
e7d	sh.asm	/^     e7d:	3c 2f                	cmp    $0x2f,%al$/;"	l
e7e	threadtest.asm	/^     e7e:	83 c4 10             	add    $0x10,%esp$/;"	l
e7f	sh.asm	/^     e7f:	7e 0a                	jle    e8b <atoi+0x48>$/;"	l
e7f	usertests.asm	/^     e7f:	68 d3 4a 00 00       	push   $0x4ad3$/;"	l
e8	echo.asm	/^  e8:	0f b6 d0             	movzbl %al,%edx$/;"	l
e8	kill.asm	/^  e8:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e8	ls.asm	/^  e8:	6a 02                	push   $0x2$/;"	l
e8	test_mlfq.asm	/^  e8:	0f 84 75 ff ff ff    	je     63 <main+0x63>$/;"	l
e8	test_sample.asm	/^  e8:	50                   	push   %eax$/;"	l
e8	threadtest.asm	/^      e8:	e8 e3 13 00 00       	call   14d0 <close>$/;"	l
e8	wc.asm	/^  e8:	83 c4 20             	add    $0x20,%esp$/;"	l
e8	zombie.asm	/^  e8:	55                   	push   %ebp$/;"	l
e81	sh.asm	/^     e81:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e81	threadtest.asm	/^     e81:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e84	sh.asm	/^     e84:	0f b6 00             	movzbl (%eax),%eax$/;"	l
e84	threadtest.asm	/^     e84:	6a 00                	push   $0x0$/;"	l
e84	usertests.asm	/^     e84:	6a 01                	push   $0x1$/;"	l
e86	threadtest.asm	/^     e86:	e8 fd 06 00 00       	call   1588 <thread_exit>$/;"	l
e86	usertests.asm	/^     e86:	e8 2a 33 00 00       	call   41b5 <printf>$/;"	l
e87	sh.asm	/^     e87:	3c 39                	cmp    $0x39,%al$/;"	l
e89	sh.asm	/^     e89:	7e c7                	jle    e52 <atoi+0xf>$/;"	l
e8b	sh.asm	/^     e8b:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
e8b	threadtest.asm	/^     e8b:	55                   	push   %ebp$/;"	l
e8b	usertests.asm	/^     e8b:	83 c4 10             	add    $0x10,%esp$/;"	l
e8c	threadtest.asm	/^     e8c:	89 e5                	mov    %esp,%ebp$/;"	l
e8e	sh.asm	/^     e8e:	c9                   	leave  $/;"	l
e8e	threadtest.asm	/^     e8e:	83 ec 38             	sub    $0x38,%esp$/;"	l
e8e	usertests.asm	/^     e8e:	83 ec 0c             	sub    $0xc,%esp$/;"	l
e8f	sh.asm	/^     e8f:	c3                   	ret    $/;"	l
e9	hugefiletest.asm	/^  e9:	68 00 02 00 00       	push   $0x200$/;"	l
e9	mkdir.asm	/^  e9:	eb 08                	jmp    f3 <strcmp+0xd>$/;"	l
e9	rm.asm	/^  e9:	eb 08                	jmp    f3 <strcmp+0xd>$/;"	l
e9	test_master.asm	/^  e9:	90                   	nop$/;"	l
e9	test_sample.asm	/^  e9:	e8 13 03 00 00       	call   401 <exec>$/;"	l
e9	test_stride.asm	/^  e9:	55                   	push   %ebp$/;"	l
e9	zombie.asm	/^  e9:	89 e5                	mov    %esp,%ebp$/;"	l
e90	sh.asm	/^     e90:	55                   	push   %ebp$/;"	l
e91	sh.asm	/^     e91:	89 e5                	mov    %esp,%ebp$/;"	l
e91	threadtest.asm	/^     e91:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
e91	usertests.asm	/^     e91:	68 e2 4a 00 00       	push   $0x4ae2$/;"	l
e93	sh.asm	/^     e93:	83 ec 10             	sub    $0x10,%esp$/;"	l
e96	sh.asm	/^     e96:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
e96	usertests.asm	/^     e96:	e8 ab 31 00 00       	call   4046 <unlink>$/;"	l
e98	threadtest.asm	/^     e98:	eb 41                	jmp    edb <sleeptest+0x50>$/;"	l
e99	sh.asm	/^     e99:	89 45 fc             	mov    %eax,-0x4(%ebp)$/;"	l
e9a	threadtest.asm	/^     e9a:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
e9b	usertests.asm	/^     e9b:	83 c4 10             	add    $0x10,%esp$/;"	l
e9c	sh.asm	/^     e9c:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
e9d	threadtest.asm	/^     e9d:	8d 55 cc             	lea    -0x34(%ebp),%edx$/;"	l
e9e	usertests.asm	/^     e9e:	83 ec 08             	sub    $0x8,%esp$/;"	l
e9f	sh.asm	/^     e9f:	89 45 f8             	mov    %eax,-0x8(%ebp)$/;"	l
ea	cat.asm	/^  ea:	50                   	push   %eax$/;"	l
ea	init.asm	/^  ea:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
ea	ln.asm	/^  ea:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ea	ls.asm	/^  ea:	e8 6d 06 00 00       	call   75c <printf>$/;"	l
ea	sh.asm	/^      ea:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ea	stressfs.asm	/^  ea:	68 3b 09 00 00       	push   $0x93b$/;"	l
ea	test_master.asm	/^  ea:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ea	test_stride.asm	/^  ea:	89 e5                	mov    %esp,%ebp$/;"	l
ea0	threadtest.asm	/^     ea0:	8b 4d f4             	mov    -0xc(%ebp),%ecx$/;"	l
ea1	usertests.asm	/^     ea1:	68 02 02 00 00       	push   $0x202$/;"	l
ea2	sh.asm	/^     ea2:	eb 17                	jmp    ebb <memmove+0x2b>$/;"	l
ea3	threadtest.asm	/^     ea3:	c1 e1 02             	shl    $0x2,%ecx$/;"	l
ea4	sh.asm	/^     ea4:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
ea6	threadtest.asm	/^     ea6:	01 ca                	add    %ecx,%edx$/;"	l
ea6	usertests.asm	/^     ea6:	68 e2 4a 00 00       	push   $0x4ae2$/;"	l
ea7	sh.asm	/^     ea7:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
ea8	threadtest.asm	/^     ea8:	83 ec 04             	sub    $0x4,%esp$/;"	l
eaa	sh.asm	/^     eaa:	89 55 fc             	mov    %edx,-0x4(%ebp)$/;"	l
eab	threadtest.asm	/^     eab:	50                   	push   %eax$/;"	l
eab	usertests.asm	/^     eab:	e8 86 31 00 00       	call   4036 <open>$/;"	l
eac	threadtest.asm	/^     eac:	68 6b 0e 00 00       	push   $0xe6b$/;"	l
ead	sh.asm	/^     ead:	8b 55 f8             	mov    -0x8(%ebp),%edx$/;"	l
eargv	sh.c	/^  char *eargv[MAXARGS];$/;"	m	struct:execcmd	file:
eax	mmu.h	/^  uint eax;          \/\/ More saved state (registers)$/;"	m	struct:taskstate
eax	x86.h	/^  uint eax;$/;"	m	struct:trapframe
eb	cat.asm	/^  eb:	68 1a 09 00 00       	push   $0x91a$/;"	l
eb	echo.asm	/^  eb:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
eb	forktest.asm	/^  eb:	6a 01                	push   $0x1$/;"	l
eb	grep.asm	/^  eb:	83 c4 10             	add    $0x10,%esp$/;"	l
eb	kill.asm	/^  eb:	38 c2                	cmp    %al,%dl$/;"	l
eb	mkdir.asm	/^  eb:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
eb	my_userapp.asm	/^  eb:	8b 55 fc             	mov    -0x4(%ebp),%edx$/;"	l
eb	rm.asm	/^  eb:	83 45 08 01          	addl   $0x1,0x8(%ebp)$/;"	l
eb	usertests.asm	/^      eb:	83 c4 10             	add    $0x10,%esp$/;"	l
eb	wc.asm	/^  eb:	90                   	nop$/;"	l
eb	zombie.asm	/^  eb:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
eb0	sh.asm	/^     eb0:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
eb0	usertests.asm	/^     eb0:	83 c4 10             	add    $0x10,%esp$/;"	l
eb1	threadtest.asm	/^     eb1:	52                   	push   %edx$/;"	l
eb2	threadtest.asm	/^     eb2:	e8 c1 06 00 00       	call   1578 <thread_create>$/;"	l
eb3	sh.asm	/^     eb3:	89 4d f8             	mov    %ecx,-0x8(%ebp)$/;"	l
eb3	usertests.asm	/^     eb3:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
eb6	sh.asm	/^     eb6:	0f b6 12             	movzbl (%edx),%edx$/;"	l
eb6	usertests.asm	/^     eb6:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
eb7	threadtest.asm	/^     eb7:	83 c4 10             	add    $0x10,%esp$/;"	l
eb9	sh.asm	/^     eb9:	88 10                	mov    %dl,(%eax)$/;"	l
eba	threadtest.asm	/^     eba:	85 c0                	test   %eax,%eax$/;"	l
eba	usertests.asm	/^     eba:	79 17                	jns    ed3 <sharedfd+0x5d>$/;"	l
ebb	sh.asm	/^     ebb:	8b 45 10             	mov    0x10(%ebp),%eax$/;"	l
ebc	threadtest.asm	/^     ebc:	74 19                	je     ed7 <sleeptest+0x4c>$/;"	l
ebc	usertests.asm	/^     ebc:	83 ec 08             	sub    $0x8,%esp$/;"	l
ebe	sh.asm	/^     ebe:	8d 50 ff             	lea    -0x1(%eax),%edx$/;"	l
ebe	threadtest.asm	/^     ebe:	83 ec 08             	sub    $0x8,%esp$/;"	l
ebf	usertests.asm	/^     ebf:	68 ec 4a 00 00       	push   $0x4aec$/;"	l
ebp	kernel.asm	/^    ebp = (uint*)ebp[0]; \/\/ saved %ebp$/;"	d
ebp	kernel.asm	/^  ebp = (uint*)v - 2;$/;"	d
ebp	mmu.h	/^  uint *ebp;$/;"	m	struct:taskstate
ebp	proc.h	/^  uint ebp;$/;"	m	struct:context
ebp	x86.h	/^  uint ebp;$/;"	m	struct:trapframe
ebx	mmu.h	/^  uint ebx;$/;"	m	struct:taskstate
ebx	proc.h	/^  uint ebx;$/;"	m	struct:context
ebx	x86.h	/^  uint ebx;$/;"	m	struct:trapframe
ec	test_stride.asm	/^  ec:	57                   	push   %edi$/;"	l
ec	wc.asm	/^  ec:	c9                   	leave  $/;"	l
ec1	sh.asm	/^     ec1:	89 55 10             	mov    %edx,0x10(%ebp)$/;"	l
ec1	threadtest.asm	/^     ec1:	68 01 1b 00 00       	push   $0x1b01$/;"	l
ec4	sh.asm	/^     ec4:	85 c0                	test   %eax,%eax$/;"	l
ec4	usertests.asm	/^     ec4:	6a 01                	push   $0x1$/;"	l
ec6	sh.asm	/^     ec6:	7f dc                	jg     ea4 <memmove+0x14>$/;"	l
ec6	threadtest.asm	/^     ec6:	6a 01                	push   $0x1$/;"	l
ec6	usertests.asm	/^     ec6:	e8 ea 32 00 00       	call   41b5 <printf>$/;"	l
ec8	sh.asm	/^     ec8:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ec8	threadtest.asm	/^     ec8:	e8 9a 07 00 00       	call   1667 <printf>$/;"	l
ecb	sh.asm	/^     ecb:	c9                   	leave  $/;"	l
ecb	usertests.asm	/^     ecb:	83 c4 10             	add    $0x10,%esp$/;"	l
ecc	sh.asm	/^     ecc:	c3                   	ret    $/;"	l
ecd	sh.asm	/^     ecd:	b8 01 00 00 00       	mov    $0x1,%eax$/;"	l
ecd	threadtest.asm	/^     ecd:	83 c4 10             	add    $0x10,%esp$/;"	l
ece	usertests.asm	/^     ece:	e9 84 01 00 00       	jmp    1057 <sharedfd+0x1e1>$/;"	l
echoargv	usertests.c	/^char *echoargv[] = { "echo", "ALL", "TESTS", "PASSED", 0 };$/;"	v
ecmd	sh.asm	/^    ecmd = (struct execcmd*)cmd;$/;"	d
ecx	mmu.h	/^  uint ecx;$/;"	m	struct:taskstate
ecx	x86.h	/^  uint ecx;$/;"	m	struct:trapframe
ed	forktest.asm	/^  ed:	e8 0e ff ff ff       	call   0 <printf>$/;"	l
ed	kill.asm	/^  ed:	74 de                	je     cd <strcmp+0x5>$/;"	l
ed	ln.asm	/^  ed:	38 c2                	cmp    %al,%dl$/;"	l
ed	sh.asm	/^      ed:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
ed	test_master.asm	/^  ed:	8d 50 01             	lea    0x1(%eax),%edx$/;"	l
ed	test_stride.asm	/^  ed:	53                   	push   %ebx$/;"	l
ed	threadtest.asm	/^      ed:	83 c4 10             	add    $0x10,%esp$/;"	l
ed	wc.asm	/^  ed:	c3                   	ret    $/;"	l
ed0	threadtest.asm	/^     ed0:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ed2	sh.asm	/^     ed2:	cd 40                	int    $0x40$/;"	l
ed3	usertests.asm	/^     ed3:	e8 16 31 00 00       	call   3fee <fork>$/;"	l
ed4	sh.asm	/^     ed4:	c3                   	ret    $/;"	l
ed5	sh.asm	/^     ed5:	b8 02 00 00 00       	mov    $0x2,%eax$/;"	l
ed5	threadtest.asm	/^     ed5:	eb 1c                	jmp    ef3 <sleeptest+0x68>$/;"	l
ed7	threadtest.asm	/^     ed7:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
ed8	usertests.asm	/^     ed8:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
eda	sh.asm	/^     eda:	cd 40                	int    $0x40$/;"	l
edb	threadtest.asm	/^     edb:	83 7d f4 09          	cmpl   $0x9,-0xc(%ebp)$/;"	l
edb	usertests.asm	/^     edb:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)$/;"	l
edc	sh.asm	/^     edc:	c3                   	ret    $/;"	l
edd	sh.asm	/^     edd:	b8 03 00 00 00       	mov    $0x3,%eax$/;"	l
edf	threadtest.asm	/^     edf:	7e b9                	jle    e9a <sleeptest+0xf>$/;"	l
edf	usertests.asm	/^     edf:	75 07                	jne    ee8 <sharedfd+0x72>$/;"	l
edi	mmu.h	/^  uint edi;$/;"	m	struct:taskstate
edi	proc.h	/^  uint edi;$/;"	m	struct:context
edi	x86.h	/^  uint edi;$/;"	m	struct:trapframe
edx	mmu.h	/^  uint edx;$/;"	m	struct:taskstate
edx	x86.h	/^  uint edx;$/;"	m	struct:trapframe
ee	echo.asm	/^  ee:	0f b6 00             	movzbl (%eax),%eax$/;"	l
ee	grep.asm	/^  ee:	89 45 ec             	mov    %eax,-0x14(%ebp)$/;"	l
ee	hugefiletest.asm	/^  ee:	8d 85 dc fd ff ff    	lea    -0x224(%ebp),%eax$/;"	l
ee	init.asm	/^  ee:	0f 88 73 ff ff ff    	js     67 <main+0x67>$/;"	l
ee	my_userapp.asm	/^  ee:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ee	test_mlfq.asm	/^  ee:	e8 1c 03 00 00       	call   40f <yield>$/;"	l
ee	test_sample.asm	/^  ee:	83 c4 10             	add    $0x10,%esp$/;"	l
ee	test_stride.asm	/^  ee:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
ee	usertests.asm	/^      ee:	90                   	nop$/;"	l
ee	wc.asm	/^  ee:	8d 4c 24 04          	lea    0x4(%esp),%ecx$/;"	l
ee	zombie.asm	/^  ee:	50                   	push   %eax$/;"	l
ee1	threadtest.asm	/^     ee1:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ee1	usertests.asm	/^     ee1:	b8 63 00 00 00       	mov    $0x63,%eax$/;"	l
ee2	sh.asm	/^     ee2:	cd 40                	int    $0x40$/;"	l
ee4	sh.asm	/^     ee4:	c3                   	ret    $/;"	l
ee4	threadtest.asm	/^     ee4:	6a 0a                	push   $0xa$/;"	l
ee5	sh.asm	/^     ee5:	b8 04 00 00 00       	mov    $0x4,%eax$/;"	l
ee6	threadtest.asm	/^     ee6:	e8 4d 06 00 00       	call   1538 <sleep>$/;"	l
ee6	usertests.asm	/^     ee6:	eb 05                	jmp    eed <sharedfd+0x77>$/;"	l
ee8	usertests.asm	/^     ee8:	b8 70 00 00 00       	mov    $0x70,%eax$/;"	l
eea	sh.asm	/^     eea:	cd 40                	int    $0x40$/;"	l
eeb	threadtest.asm	/^     eeb:	83 c4 10             	add    $0x10,%esp$/;"	l
eec	sh.asm	/^     eec:	c3                   	ret    $/;"	l
eed	sh.asm	/^     eed:	b8 05 00 00 00       	mov    $0x5,%eax$/;"	l
eed	usertests.asm	/^     eed:	83 ec 04             	sub    $0x4,%esp$/;"	l
eee	threadtest.asm	/^     eee:	b8 00 00 00 00       	mov    $0x0,%eax$/;"	l
ef	kill.asm	/^  ef:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
ef	ln.asm	/^  ef:	74 de                	je     cf <strcmp+0x5>$/;"	l
ef	ls.asm	/^  ef:	83 c4 10             	add    $0x10,%esp$/;"	l
ef	mkdir.asm	/^  ef:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
ef	rm.asm	/^  ef:	83 45 0c 01          	addl   $0x1,0xc(%ebp)$/;"	l
ef	stressfs.asm	/^  ef:	6a 01                	push   $0x1$/;"	l
ef	usertests.asm	/^      ef:	c9                   	leave  $/;"	l
ef	zombie.asm	/^  ef:	ff 75 0c             	pushl  0xc(%ebp)$/;"	l
ef0	usertests.asm	/^     ef0:	6a 0a                	push   $0xa$/;"	l
ef2	sh.asm	/^     ef2:	cd 40                	int    $0x40$/;"	l
ef2	usertests.asm	/^     ef2:	50                   	push   %eax$/;"	l
ef3	threadtest.asm	/^     ef3:	c9                   	leave  $/;"	l
ef3	usertests.asm	/^     ef3:	8d 45 d6             	lea    -0x2a(%ebp),%eax$/;"	l
ef4	sh.asm	/^     ef4:	c3                   	ret    $/;"	l
ef4	threadtest.asm	/^     ef4:	c3                   	ret    $/;"	l
ef5	sh.asm	/^     ef5:	b8 10 00 00 00       	mov    $0x10,%eax$/;"	l
ef5	threadtest.asm	/^     ef5:	55                   	push   %ebp$/;"	l
ef6	threadtest.asm	/^     ef6:	89 e5                	mov    %esp,%ebp$/;"	l
ef6	usertests.asm	/^     ef6:	50                   	push   %eax$/;"	l
ef7	usertests.asm	/^     ef7:	e8 5f 2f 00 00       	call   3e5b <memset>$/;"	l
ef8	threadtest.asm	/^     ef8:	83 ec 18             	sub    $0x18,%esp$/;"	l
efa	sh.asm	/^     efa:	cd 40                	int    $0x40$/;"	l
efb	threadtest.asm	/^     efb:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
efc	sh.asm	/^     efc:	c3                   	ret    $/;"	l
efc	usertests.asm	/^     efc:	83 c4 10             	add    $0x10,%esp$/;"	l
efd	sh.asm	/^     efd:	b8 15 00 00 00       	mov    $0x15,%eax$/;"	l
efe	threadtest.asm	/^     efe:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
eff	usertests.asm	/^     eff:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
efile	sh.c	/^  char *efile;$/;"	m	struct:redircmd	file:
eflags	kernel.asm	/^  eflags = readeflags();$/;"	d
eflags	mmu.h	/^  uint eflags;$/;"	m	struct:taskstate
eflags	x86.h	/^  uint eflags;$/;"	m	struct:trapframe
ehsize	elf.h	/^  ushort ehsize;$/;"	m	struct:elfhdr
eip	mmu.h	/^  uint *eip;         \/\/ Saved state from last task switch$/;"	m	struct:taskstate
eip	proc.h	/^  uint eip;$/;"	m	struct:context
eip	x86.h	/^  uint eip;$/;"	m	struct:trapframe
elf	bootblock.asm	/^  elf = (struct elfhdr*)0x10000;  \/\/ scratch space$/;"	d
elf	elf.h	/^  uchar elf[12];$/;"	m	struct:elfhdr
elfhdr	elf.h	/^struct elfhdr {$/;"	s
empty	kernel.asm	/^      empty = ip;$/;"	d
empty	kernel.asm	/^  empty = 0;$/;"	d
end	threadtest.asm	/^    end = atoi(argv[2]);$/;"	d
end	threadtest.asm	/^  end = oldbrk + 1000;$/;"	d
end_op	log.c	/^end_op(void)$/;"	f
entry	bootblock.asm	/^  entry = (void(*)(void))(elf->entry);$/;"	d
entry	elf.h	/^  uint entry;$/;"	m	struct:elfhdr
entry	entry.S	/^entry:$/;"	l
entry	kernel.asm	/^entry:$/;"	l
entry	mp.h	/^  ushort entry;                 \/\/ entry count$/;"	m	struct:mpconf
entrypgdir	main.c	/^pde_t entrypgdir[NPDENTRIES] = {$/;"	v
entrypgdir	main.c	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	v
ep	kernel.asm	/^  ep = (char*)(*curproc->sz);  $/;"	d
epa	bootblock.asm	/^  epa = pa + count;$/;"	d
eph	bootblock.asm	/^  eph = ph + elf->phnum;$/;"	d
err	x86.h	/^  uint err;$/;"	m	struct:trapframe
es	mmu.h	/^  ushort es;         \/\/ Even more saved state (segment selectors)$/;"	m	struct:taskstate
es	sh.asm	/^  es = s + strlen(s);$/;"	d
es	x86.h	/^  ushort es;$/;"	m	struct:trapframe
esi	mmu.h	/^  uint esi;$/;"	m	struct:taskstate
esi	proc.h	/^  uint esi;$/;"	m	struct:context
esi	x86.h	/^  uint esi;$/;"	m	struct:trapframe
esp	mmu.h	/^  uint *esp;$/;"	m	struct:taskstate
esp	x86.h	/^  uint esp;$/;"	m	struct:trapframe
esp0	mmu.h	/^  uint esp0;         \/\/ Stack pointers and segment selectors$/;"	m	struct:taskstate
esp1	mmu.h	/^  uint *esp1;$/;"	m	struct:taskstate
esp2	mmu.h	/^  uint *esp2;$/;"	m	struct:taskstate
exec	exec.c	/^exec(char *path, char **argv)$/;"	f
execcmd	sh.c	/^execcmd(void)$/;"	f
execcmd	sh.c	/^struct execcmd {$/;"	s	file:
exectest	threadtest.c	/^exectest(void)$/;"	f
exectest	usertests.c	/^exectest(void)$/;"	f
execthreadmain	threadtest.c	/^execthreadmain(void *arg)$/;"	f
exit	initcode.S	/^exit:$/;"	l
exit	initcode.asm	/^exit:$/;"	l
exit	proc.c	/^exit(void)$/;"	f
exitiputtest	usertests.c	/^exitiputtest(void)$/;"	f
exittest1	threadtest.c	/^exittest1(void)$/;"	f
exittest2	threadtest.c	/^exittest2(void)$/;"	f
exitthreadmain	threadtest.c	/^exitthreadmain(void *arg)$/;"	f
exitwait	usertests.c	/^exitwait(void)$/;"	f
f	Makefile	/^	dd if=\/dev\/zero of=xv6.img count=10000$/;"	m
f	Makefile	/^	dd if=\/dev\/zero of=xv6memfs.img count=10000$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=bootblock of=xv6memfs.img conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernel of=xv6.img seek=1 conv=notrunc$/;"	m
f	Makefile	/^	dd if=kernelmemfs of=xv6memfs.img seek=1 conv=notrunc$/;"	m
f	echo.asm	/^   f:	83 ec 10             	sub    $0x10,%esp$/;"	l
f	kill.asm	/^   f:	83 ec 10             	sub    $0x10,%esp$/;"	l
f	ln.asm	/^   f:	89 cb                	mov    %ecx,%ebx$/;"	l
f	mkdir.asm	/^   f:	83 ec 10             	sub    $0x10,%esp$/;"	l
f	rm.asm	/^   f:	83 ec 10             	sub    $0x10,%esp$/;"	l
f	test_mlfq.asm	/^   f:	83 ec 20             	sub    $0x20,%esp$/;"	l
f	test_sample.asm	/^   f:	83 ec 10             	sub    $0x10,%esp$/;"	l
f	threadtest.asm	/^       f:	83 ec 20             	sub    $0x20,%esp$/;"	l
f0	cat.asm	/^  f0:	6a 01                	push   $0x1$/;"	l
f0	sh.asm	/^      f0:	e8 c7 02 00 00       	call   3bc <fork1>$/;"	l
f0	test_master.asm	/^  f0:	89 55 08             	mov    %edx,0x8(%ebp)$/;"	l
f0	threadtest.asm	/^      f0:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
f0	usertests.asm	/^      f0:	c3                   	ret    $/;"	l
f01	threadtest.asm	/^     f01:	eb 25                	jmp    f28 <stridethreadmain+0x33>$/;"	l
f02	sh.asm	/^     f02:	cd 40                	int    $0x40$/;"	l
f03	threadtest.asm	/^     f03:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
f04	sh.asm	/^     f04:	c3                   	ret    $/;"	l
f05	sh.asm	/^     f05:	b8 06 00 00 00       	mov    $0x6,%eax$/;"	l
f06	usertests.asm	/^     f06:	eb 31                	jmp    f39 <sharedfd+0xc3>$/;"	l
f08	usertests.asm	/^     f08:	83 ec 04             	sub    $0x4,%esp$/;"	l
f0a	sh.asm	/^     f0a:	cd 40                	int    $0x40$/;"	l
f0a	threadtest.asm	/^     f0a:	eb 04                	jmp    f10 <stridethreadmain+0x1b>$/;"	l
f0b	usertests.asm	/^     f0b:	6a 0a                	push   $0xa$/;"	l
f0c	sh.asm	/^     f0c:	c3                   	ret    $/;"	l
f0c	threadtest.asm	/^     f0c:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
f0d	sh.asm	/^     f0d:	b8 07 00 00 00       	mov    $0x7,%eax$/;"	l
f0d	usertests.asm	/^     f0d:	8d 45 d6             	lea    -0x2a(%ebp),%eax$/;"	l
f1	echo.asm	/^  f1:	0f b6 c0             	movzbl %al,%eax$/;"	l
f1	grep.asm	/^  f1:	83 7d ec 00          	cmpl   $0x0,-0x14(%ebp)$/;"	l
f1	ln.asm	/^  f1:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f1	my_userapp.asm	/^  f1:	01 d0                	add    %edx,%eax$/;"	l
f1	stressfs.asm	/^  f1:	e8 72 04 00 00       	call   568 <printf>$/;"	l
f1	test_sample.asm	/^  f1:	83 ec 08             	sub    $0x8,%esp$/;"	l
f1	test_stride.asm	/^  f1:	8b 55 10             	mov    0x10(%ebp),%edx$/;"	l
f1	usertests.asm	/^      f1:	55                   	push   %ebp$/;"	l
f10	threadtest.asm	/^     f10:	83 7d f4 04          	cmpl   $0x4,-0xc(%ebp)$/;"	l
f10	usertests.asm	/^     f10:	50                   	push   %eax$/;"	l
f11	usertests.asm	/^     f11:	ff 75 e8             	pushl  -0x18(%ebp)$/;"	l
f12	sh.asm	/^     f12:	cd 40                	int    $0x40$/;"	l
f14	sh.asm	/^     f14:	c3                   	ret    $/;"	l
f14	threadtest.asm	/^     f14:	7e f6                	jle    f0c <stridethreadmain+0x17>$/;"	l
f14	usertests.asm	/^     f14:	e8 fd 30 00 00       	call   4016 <write>$/;"	l
f15	sh.asm	/^     f15:	b8 0f 00 00 00       	mov    $0xf,%eax$/;"	l
f16	threadtest.asm	/^     f16:	f0 83 05 18 23 00 00 	lock addl $0x1,0x2318$/;"	l
f19	usertests.asm	/^     f19:	83 c4 10             	add    $0x10,%esp$/;"	l
f1a	sh.asm	/^     f1a:	cd 40                	int    $0x40$/;"	l
f1c	sh.asm	/^     f1c:	c3                   	ret    $/;"	l
f1c	usertests.asm	/^     f1c:	83 f8 0a             	cmp    $0xa,%eax$/;"	l
f1d	sh.asm	/^     f1d:	b8 11 00 00 00       	mov    $0x11,%eax$/;"	l
f1d	threadtest.asm	/^     f1d:	01 $/;"	l
f1e	threadtest.asm	/^     f1e:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f1f	usertests.asm	/^     f1f:	74 14                	je     f35 <sharedfd+0xbf>$/;"	l
f2	cat.asm	/^  f2:	e8 4a 04 00 00       	call   541 <printf>$/;"	l
f2	forktest.asm	/^  f2:	83 c4 10             	add    $0x10,%esp$/;"	l
f2	kill.asm	/^  f2:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f2	ls.asm	/^  f2:	e9 e3 01 00 00       	jmp    2da <ls+0x222>$/;"	l
f2	usertests.asm	/^      f2:	89 e5                	mov    %esp,%ebp$/;"	l
f2	wc.asm	/^  f2:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
f2	zombie.asm	/^  f2:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
f21	threadtest.asm	/^     f21:	8b 00                	mov    (%eax),%eax$/;"	l
f21	usertests.asm	/^     f21:	83 ec 08             	sub    $0x8,%esp$/;"	l
f22	sh.asm	/^     f22:	cd 40                	int    $0x40$/;"	l
f23	threadtest.asm	/^     f23:	83 f8 01             	cmp    $0x1,%eax$/;"	l
f24	sh.asm	/^     f24:	c3                   	ret    $/;"	l
f24	usertests.asm	/^     f24:	68 18 4b 00 00       	push   $0x4b18$/;"	l
f25	sh.asm	/^     f25:	b8 12 00 00 00       	mov    $0x12,%eax$/;"	l
f26	threadtest.asm	/^     f26:	74 db                	je     f03 <stridethreadmain+0xe>$/;"	l
f28	threadtest.asm	/^     f28:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f29	usertests.asm	/^     f29:	6a 01                	push   $0x1$/;"	l
f2a	sh.asm	/^     f2a:	cd 40                	int    $0x40$/;"	l
f2b	threadtest.asm	/^     f2b:	8b 00                	mov    (%eax),%eax$/;"	l
f2b	usertests.asm	/^     f2b:	e8 85 32 00 00       	call   41b5 <printf>$/;"	l
f2c	sh.asm	/^     f2c:	c3                   	ret    $/;"	l
f2d	sh.asm	/^     f2d:	b8 08 00 00 00       	mov    $0x8,%eax$/;"	l
f2d	threadtest.asm	/^     f2d:	85 c0                	test   %eax,%eax$/;"	l
f2f	threadtest.asm	/^     f2f:	75 ed                	jne    f1e <stridethreadmain+0x29>$/;"	l
f3	mkdir.asm	/^  f3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f3	my_userapp.asm	/^  f3:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f3	rm.asm	/^  f3:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
f3	test_master.asm	/^  f3:	8b 55 0c             	mov    0xc(%ebp),%edx$/;"	l
f3	test_mlfq.asm	/^  f3:	e9 6b ff ff ff       	jmp    63 <main+0x63>$/;"	l
f3	threadtest.asm	/^      f3:	8b 04 85 80 22 00 00 	mov    0x2280(,%eax,4),%eax$/;"	l
f30	usertests.asm	/^     f30:	83 c4 10             	add    $0x10,%esp$/;"	l
f31	threadtest.asm	/^     f31:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f32	sh.asm	/^     f32:	cd 40                	int    $0x40$/;"	l
f33	usertests.asm	/^     f33:	eb 0d                	jmp    f42 <sharedfd+0xcc>$/;"	l
f34	sh.asm	/^     f34:	c3                   	ret    $/;"	l
f34	threadtest.asm	/^     f34:	6a 00                	push   $0x0$/;"	l
f35	sh.asm	/^     f35:	b8 13 00 00 00       	mov    $0x13,%eax$/;"	l
f35	usertests.asm	/^     f35:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
f36	threadtest.asm	/^     f36:	e8 4d 06 00 00       	call   1588 <thread_exit>$/;"	l
f39	usertests.asm	/^     f39:	81 7d f4 e7 03 00 00 	cmpl   $0x3e7,-0xc(%ebp)$/;"	l
f3a	sh.asm	/^     f3a:	cd 40                	int    $0x40$/;"	l
f3b	threadtest.asm	/^     f3b:	55                   	push   %ebp$/;"	l
f3c	sh.asm	/^     f3c:	c3                   	ret    $/;"	l
f3c	threadtest.asm	/^     f3c:	89 e5                	mov    %esp,%ebp$/;"	l
f3d	sh.asm	/^     f3d:	b8 14 00 00 00       	mov    $0x14,%eax$/;"	l
f3e	threadtest.asm	/^     f3e:	83 ec 48             	sub    $0x48,%esp$/;"	l
f4	echo.asm	/^  f4:	29 c2                	sub    %eax,%edx$/;"	l
f4	hugefiletest.asm	/^  f4:	50                   	push   %eax$/;"	l
f4	init.asm	/^  f4:	8b 45 f0             	mov    -0x10(%ebp),%eax$/;"	l
f4	ln.asm	/^  f4:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f4	test_sample.asm	/^  f4:	68 82 09 00 00       	push   $0x982$/;"	l
f4	test_stride.asm	/^  f4:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f4	usertests.asm	/^      f4:	83 ec 18             	sub    $0x18,%esp$/;"	l
f40	usertests.asm	/^     f40:	7e c6                	jle    f08 <sharedfd+0x92>$/;"	l
f41	threadtest.asm	/^     f41:	c7 05 18 23 00 00 00 	movl   $0x0,0x2318$/;"	l
f42	sh.asm	/^     f42:	cd 40                	int    $0x40$/;"	l
f42	usertests.asm	/^     f42:	83 7d e4 00          	cmpl   $0x0,-0x1c(%ebp)$/;"	l
f44	sh.asm	/^     f44:	c3                   	ret    $/;"	l
f45	sh.asm	/^     f45:	b8 09 00 00 00       	mov    $0x9,%eax$/;"	l
f46	usertests.asm	/^     f46:	75 05                	jne    f4d <sharedfd+0xd7>$/;"	l
f48	threadtest.asm	/^     f48:	00 00 00 $/;"	l
f48	usertests.asm	/^     f48:	e8 a9 30 00 00       	call   3ff6 <exit>$/;"	l
f4a	sh.asm	/^     f4a:	cd 40                	int    $0x40$/;"	l
f4b	threadtest.asm	/^     f4b:	c7 45 c4 02 00 00 00 	movl   $0x2,-0x3c(%ebp)$/;"	l
f4c	sh.asm	/^     f4c:	c3                   	ret    $/;"	l
f4d	sh.asm	/^     f4d:	b8 0a 00 00 00       	mov    $0xa,%eax$/;"	l
f4d	usertests.asm	/^     f4d:	e8 ac 30 00 00       	call   3ffe <wait>$/;"	l
f5	forktest.asm	/^  f5:	90                   	nop$/;"	l
f5	grep.asm	/^  f5:	0f 8f 17 ff ff ff    	jg     12 <grep+0x12>$/;"	l
f5	hugefiletest.asm	/^  f5:	ff 75 e0             	pushl  -0x20(%ebp)$/;"	l
f5	kill.asm	/^  f5:	0f b6 d0             	movzbl %al,%edx$/;"	l
f5	sh.asm	/^      f5:	85 c0                	test   %eax,%eax$/;"	l
f5	wc.asm	/^  f5:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
f5	zombie.asm	/^  f5:	e8 32 ff ff ff       	call   2c <stosb>$/;"	l
f52	sh.asm	/^     f52:	cd 40                	int    $0x40$/;"	l
f52	threadtest.asm	/^     f52:	e8 49 05 00 00       	call   14a0 <fork>$/;"	l
f52	usertests.asm	/^     f52:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f54	sh.asm	/^     f54:	c3                   	ret    $/;"	l
f55	sh.asm	/^     f55:	b8 0b 00 00 00       	mov    $0xb,%eax$/;"	l
f55	usertests.asm	/^     f55:	ff 75 e8             	pushl  -0x18(%ebp)$/;"	l
f57	threadtest.asm	/^     f57:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
f58	usertests.asm	/^     f58:	e8 c1 30 00 00       	call   401e <close>$/;"	l
f5a	sh.asm	/^     f5a:	cd 40                	int    $0x40$/;"	l
f5a	threadtest.asm	/^     f5a:	83 7d f0 ff          	cmpl   $0xffffffff,-0x10(%ebp)$/;"	l
f5c	sh.asm	/^     f5c:	c3                   	ret    $/;"	l
f5d	sh.asm	/^     f5d:	b8 0c 00 00 00       	mov    $0xc,%eax$/;"	l
f5d	usertests.asm	/^     f5d:	83 c4 10             	add    $0x10,%esp$/;"	l
f5e	threadtest.asm	/^     f5e:	75 17                	jne    f77 <stridetest1+0x3c>$/;"	l
f6	echo.asm	/^  f6:	89 d0                	mov    %edx,%eax$/;"	l
f6	forktest.asm	/^  f6:	c9                   	leave  $/;"	l
f6	mkdir.asm	/^  f6:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f6	my_userapp.asm	/^  f6:	84 c0                	test   %al,%al$/;"	l
f6	rm.asm	/^  f6:	0f b6 00             	movzbl (%eax),%eax$/;"	l
f6	stressfs.asm	/^  f6:	83 c4 10             	add    $0x10,%esp$/;"	l
f6	test_master.asm	/^  f6:	8d 4a 01             	lea    0x1(%edx),%ecx$/;"	l
f60	threadtest.asm	/^     f60:	83 ec 08             	sub    $0x8,%esp$/;"	l
f60	usertests.asm	/^     f60:	83 ec 08             	sub    $0x8,%esp$/;"	l
f62	sh.asm	/^     f62:	cd 40                	int    $0x40$/;"	l
f63	threadtest.asm	/^     f63:	68 62 1c 00 00       	push   $0x1c62$/;"	l
f63	usertests.asm	/^     f63:	6a 00                	push   $0x0$/;"	l
f64	sh.asm	/^     f64:	c3                   	ret    $/;"	l
f65	sh.asm	/^     f65:	b8 0d 00 00 00       	mov    $0xd,%eax$/;"	l
f65	usertests.asm	/^     f65:	68 e2 4a 00 00       	push   $0x4ae2$/;"	l
f68	threadtest.asm	/^     f68:	6a 01                	push   $0x1$/;"	l
f6a	sh.asm	/^     f6a:	cd 40                	int    $0x40$/;"	l
f6a	threadtest.asm	/^     f6a:	e8 f8 06 00 00       	call   1667 <printf>$/;"	l
f6a	usertests.asm	/^     f6a:	e8 c7 30 00 00       	call   4036 <open>$/;"	l
f6c	sh.asm	/^     f6c:	c3                   	ret    $/;"	l
f6d	sh.asm	/^     f6d:	b8 0e 00 00 00       	mov    $0xe,%eax$/;"	l
f6f	threadtest.asm	/^     f6f:	83 c4 10             	add    $0x10,%esp$/;"	l
f6f	usertests.asm	/^     f6f:	83 c4 10             	add    $0x10,%esp$/;"	l
f7	cat.asm	/^  f7:	83 c4 10             	add    $0x10,%esp$/;"	l
f7	forktest.asm	/^  f7:	c3                   	ret    $/;"	l
f7	init.asm	/^  f7:	3b 45 f4             	cmp    -0xc(%ebp),%eax$/;"	l
f7	ln.asm	/^  f7:	0f b6 d0             	movzbl %al,%edx$/;"	l
f7	ls.asm	/^  f7:	83 ec 08             	sub    $0x8,%esp$/;"	l
f7	sh.asm	/^      f7:	75 12                	jne    10b <runcmd+0x10b>$/;"	l
f7	test_stride.asm	/^  f7:	89 cb                	mov    %ecx,%ebx$/;"	l
f7	usertests.asm	/^      f7:	a1 c8 64 00 00       	mov    0x64c8,%eax$/;"	l
f72	sh.asm	/^     f72:	cd 40                	int    $0x40$/;"	l
f72	threadtest.asm	/^     f72:	e8 31 05 00 00       	call   14a8 <exit>$/;"	l
f72	usertests.asm	/^     f72:	89 45 e8             	mov    %eax,-0x18(%ebp)$/;"	l
f74	sh.asm	/^     f74:	c3                   	ret    $/;"	l
f75	sh.asm	/^     f75:	b8 16 00 00 00       	mov    $0x16,%eax$/;"	l
f75	usertests.asm	/^     f75:	83 7d e8 00          	cmpl   $0x0,-0x18(%ebp)$/;"	l
f77	threadtest.asm	/^     f77:	83 7d f0 00          	cmpl   $0x0,-0x10(%ebp)$/;"	l
f79	usertests.asm	/^     f79:	79 17                	jns    f92 <sharedfd+0x11c>$/;"	l
f7a	sh.asm	/^     f7a:	cd 40                	int    $0x40$/;"	l
f7b	threadtest.asm	/^     f7b:	75 21                	jne    f9e <stridetest1+0x63>$/;"	l
f7b	usertests.asm	/^     f7b:	83 ec 08             	sub    $0x8,%esp$/;"	l
f7c	sh.asm	/^     f7c:	c3                   	ret    $/;"	l
f7d	sh.asm	/^     f7d:	b8 17 00 00 00       	mov    $0x17,%eax$/;"	l
f7d	threadtest.asm	/^     f7d:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f7e	usertests.asm	/^     f7e:	68 38 4b 00 00       	push   $0x4b38$/;"	l
f8	echo.asm	/^  f8:	5d                   	pop    %ebp$/;"	l
f8	forktest.asm	/^  f8:	8d 4c 24 04          	lea    0x4(%esp),%ecx$/;"	l
f8	hugefiletest.asm	/^  f8:	e8 57 05 00 00       	call   654 <write>$/;"	l
f8	kill.asm	/^  f8:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
f8	my_userapp.asm	/^  f8:	75 ed                	jne    e7 <strlen+0xf>$/;"	l
f8	test_mlfq.asm	/^  f8:	55                   	push   %ebp$/;"	l
f8	wc.asm	/^  f8:	55                   	push   %ebp$/;"	l
f80	threadtest.asm	/^     f80:	6a 32                	push   $0x32$/;"	l
f82	sh.asm	/^     f82:	cd 40                	int    $0x40$/;"	l
f82	threadtest.asm	/^     f82:	e8 d1 05 00 00       	call   1558 <set_cpu_share>$/;"	l
f83	usertests.asm	/^     f83:	6a 01                	push   $0x1$/;"	l
f84	sh.asm	/^     f84:	c3                   	ret    $/;"	l
f85	sh.asm	/^     f85:	b8 18 00 00 00       	mov    $0x18,%eax$/;"	l
f85	usertests.asm	/^     f85:	e8 2b 32 00 00       	call   41b5 <printf>$/;"	l
f87	threadtest.asm	/^     f87:	83 c4 10             	add    $0x10,%esp$/;"	l
f8a	sh.asm	/^     f8a:	cd 40                	int    $0x40$/;"	l
f8a	threadtest.asm	/^     f8a:	83 ec 08             	sub    $0x8,%esp$/;"	l
f8a	usertests.asm	/^     f8a:	83 c4 10             	add    $0x10,%esp$/;"	l
f8c	sh.asm	/^     f8c:	c3                   	ret    $/;"	l
f8d	sh.asm	/^     f8d:	b8 19 00 00 00       	mov    $0x19,%eax$/;"	l
f8d	threadtest.asm	/^     f8d:	68 7d 1c 00 00       	push   $0x1c7d$/;"	l
f8d	usertests.asm	/^     f8d:	e9 c5 00 00 00       	jmp    1057 <sharedfd+0x1e1>$/;"	l
f9	echo.asm	/^  f9:	c3                   	ret    $/;"	l
f9	mkdir.asm	/^  f9:	84 c0                	test   %al,%al$/;"	l
f9	rm.asm	/^  f9:	84 c0                	test   %al,%al$/;"	l
f9	sh.asm	/^      f9:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
f9	stressfs.asm	/^  f9:	83 ec 08             	sub    $0x8,%esp$/;"	l
f9	test_master.asm	/^  f9:	89 4d 0c             	mov    %ecx,0xc(%ebp)$/;"	l
f9	test_mlfq.asm	/^  f9:	89 e5                	mov    %esp,%ebp$/;"	l
f9	test_sample.asm	/^  f9:	6a 01                	push   $0x1$/;"	l
f9	test_stride.asm	/^  f9:	89 df                	mov    %ebx,%edi$/;"	l
f9	wc.asm	/^  f9:	89 e5                	mov    %esp,%ebp$/;"	l
f92	sh.asm	/^     f92:	cd 40                	int    $0x40$/;"	l
f92	threadtest.asm	/^     f92:	6a 01                	push   $0x1$/;"	l
f92	usertests.asm	/^     f92:	c7 45 ec 00 00 00 00 	movl   $0x0,-0x14(%ebp)$/;"	l
f94	sh.asm	/^     f94:	c3                   	ret    $/;"	l
f94	threadtest.asm	/^     f94:	e8 ce 06 00 00       	call   1667 <printf>$/;"	l
f95	sh.asm	/^     f95:	b8 1a 00 00 00       	mov    $0x1a,%eax$/;"	l
f99	threadtest.asm	/^     f99:	83 c4 10             	add    $0x10,%esp$/;"	l
f99	usertests.asm	/^     f99:	8b 45 ec             	mov    -0x14(%ebp),%eax$/;"	l
f9a	sh.asm	/^     f9a:	cd 40                	int    $0x40$/;"	l
f9c	sh.asm	/^     f9c:	c3                   	ret    $/;"	l
f9c	threadtest.asm	/^     f9c:	eb 1f                	jmp    fbd <stridetest1+0x82>$/;"	l
f9c	usertests.asm	/^     f9c:	89 45 f0             	mov    %eax,-0x10(%ebp)$/;"	l
f9d	sh.asm	/^     f9d:	b8 1b 00 00 00       	mov    $0x1b,%eax$/;"	l
f9e	threadtest.asm	/^     f9e:	83 ec 0c             	sub    $0xc,%esp$/;"	l
f9f	usertests.asm	/^     f9f:	eb 3b                	jmp    fdc <sharedfd+0x166>$/;"	l
fa	cat.asm	/^  fa:	e8 83 02 00 00       	call   382 <exit>$/;"	l
fa	echo.asm	/^  fa:	55                   	push   %ebp$/;"	l
fa	init.asm	/^  fa:	75 d4                	jne    d0 <main+0xd0>$/;"	l
fa	ln.asm	/^  fa:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
fa	ls.asm	/^  fa:	8d 85 bc fd ff ff    	lea    -0x244(%ebp),%eax$/;"	l
fa	my_userapp.asm	/^  fa:	8b 45 fc             	mov    -0x4(%ebp),%eax$/;"	l
fa	threadtest.asm	/^      fa:	ff d0                	call   *%eax$/;"	l
fa	zombie.asm	/^  fa:	83 c4 0c             	add    $0xc,%esp$/;"	l
fa1	threadtest.asm	/^     fa1:	6a 0a                	push   $0xa$/;"	l
fa1	usertests.asm	/^     fa1:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
fa2	sh.asm	/^     fa2:	cd 40                	int    $0x40$/;"	l
fa3	threadtest.asm	/^     fa3:	e8 b0 05 00 00       	call   1558 <set_cpu_share>$/;"	l
fa4	sh.asm	/^     fa4:	c3                   	ret    $/;"	l
fa5	sh.asm	/^     fa5:	b8 1c 00 00 00       	mov    $0x1c,%eax$/;"	l
fa8	threadtest.asm	/^     fa8:	83 c4 10             	add    $0x10,%esp$/;"	l
fa8	usertests.asm	/^     fa8:	eb 2a                	jmp    fd4 <sharedfd+0x15e>$/;"	l
faa	sh.asm	/^     faa:	cd 40                	int    $0x40$/;"	l
faa	usertests.asm	/^     faa:	8d 55 d6             	lea    -0x2a(%ebp),%edx$/;"	l
fab	threadtest.asm	/^     fab:	83 ec 08             	sub    $0x8,%esp$/;"	l
fac	sh.asm	/^     fac:	c3                   	ret    $/;"	l
fad	sh.asm	/^     fad:	b8 1d 00 00 00       	mov    $0x1d,%eax$/;"	l
fad	usertests.asm	/^     fad:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
fae	threadtest.asm	/^     fae:	68 94 1c 00 00       	push   $0x1c94$/;"	l
fb	echo.asm	/^  fb:	89 e5                	mov    %esp,%ebp$/;"	l
fb	grep.asm	/^  fb:	90                   	nop$/;"	l
fb	kill.asm	/^  fb:	0f b6 00             	movzbl (%eax),%eax$/;"	l
fb	mkdir.asm	/^  fb:	74 10                	je     10d <strcmp+0x27>$/;"	l
fb	rm.asm	/^  fb:	74 10                	je     10d <strcmp+0x27>$/;"	l
fb	test_mlfq.asm	/^  fb:	57                   	push   %edi$/;"	l
fb	test_sample.asm	/^  fb:	e8 88 04 00 00       	call   588 <printf>$/;"	l
fb	test_stride.asm	/^  fb:	89 d1                	mov    %edx,%ecx$/;"	l
fb	wc.asm	/^  fb:	53                   	push   %ebx$/;"	l
fb0	usertests.asm	/^     fb0:	01 d0                	add    %edx,%eax$/;"	l
fb2	sh.asm	/^     fb2:	cd 40                	int    $0x40$/;"	l
fb2	usertests.asm	/^     fb2:	0f b6 00             	movzbl (%eax),%eax$/;"	l
fb3	threadtest.asm	/^     fb3:	6a 01                	push   $0x1$/;"	l
fb4	sh.asm	/^     fb4:	c3                   	ret    $/;"	l
fb5	sh.asm	/^     fb5:	b8 1e 00 00 00       	mov    $0x1e,%eax$/;"	l
fb5	threadtest.asm	/^     fb5:	e8 ad 06 00 00       	call   1667 <printf>$/;"	l
fb5	usertests.asm	/^     fb5:	3c 63                	cmp    $0x63,%al$/;"	l
fb7	usertests.asm	/^     fb7:	75 04                	jne    fbd <sharedfd+0x147>$/;"	l
fb9	usertests.asm	/^     fb9:	83 45 f0 01          	addl   $0x1,-0x10(%ebp)$/;"	l
fba	sh.asm	/^     fba:	cd 40                	int    $0x40$/;"	l
fba	threadtest.asm	/^     fba:	83 c4 10             	add    $0x10,%esp$/;"	l
fbc	sh.asm	/^     fbc:	c3                   	ret    $/;"	l
fbd	sh.asm	/^     fbd:	55                   	push   %ebp$/;"	l
fbd	threadtest.asm	/^     fbd:	c7 45 f4 00 00 00 00 	movl   $0x0,-0xc(%ebp)$/;"	l
fbd	usertests.asm	/^     fbd:	8d 55 d6             	lea    -0x2a(%ebp),%edx$/;"	l
fbe	sh.asm	/^     fbe:	89 e5                	mov    %esp,%ebp$/;"	l
fc	forktest.asm	/^  fc:	83 e4 f0             	and    $0xfffffff0,%esp$/;"	l
fc	grep.asm	/^  fc:	c9                   	leave  $/;"	l
fc	init.asm	/^  fc:	e9 66 ff ff ff       	jmp    67 <main+0x67>$/;"	l
fc	sh.asm	/^      fc:	8b 40 04             	mov    0x4(%eax),%eax$/;"	l
fc	stressfs.asm	/^  fc:	6a 00                	push   $0x0$/;"	l
fc	test_master.asm	/^  fc:	0f b6 12             	movzbl (%edx),%edx$/;"	l
fc	test_mlfq.asm	/^  fc:	53                   	push   %ebx$/;"	l
fc	threadtest.asm	/^      fc:	89 45 e4             	mov    %eax,-0x1c(%ebp)$/;"	l
fc	usertests.asm	/^      fc:	83 ec 08             	sub    $0x8,%esp$/;"	l
fc	wc.asm	/^  fc:	51                   	push   %ecx$/;"	l
fc0	sh.asm	/^     fc0:	83 ec 18             	sub    $0x18,%esp$/;"	l
fc0	usertests.asm	/^     fc0:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
fc3	sh.asm	/^     fc3:	8b 45 0c             	mov    0xc(%ebp),%eax$/;"	l
fc3	usertests.asm	/^     fc3:	01 d0                	add    %edx,%eax$/;"	l
fc4	threadtest.asm	/^     fc4:	eb 44                	jmp    100a <stridetest1+0xcf>$/;"	l
fc5	usertests.asm	/^     fc5:	0f b6 00             	movzbl (%eax),%eax$/;"	l
fc6	sh.asm	/^     fc6:	88 45 f4             	mov    %al,-0xc(%ebp)$/;"	l
fc6	threadtest.asm	/^     fc6:	8d 45 c8             	lea    -0x38(%ebp),%eax$/;"	l
fc8	usertests.asm	/^     fc8:	3c 70                	cmp    $0x70,%al$/;"	l
fc9	sh.asm	/^     fc9:	83 ec 04             	sub    $0x4,%esp$/;"	l
fc9	threadtest.asm	/^     fc9:	8b 55 f4             	mov    -0xc(%ebp),%edx$/;"	l
fca	usertests.asm	/^     fca:	75 04                	jne    fd0 <sharedfd+0x15a>$/;"	l
fcc	sh.asm	/^     fcc:	6a 01                	push   $0x1$/;"	l
fcc	threadtest.asm	/^     fcc:	c1 e2 02             	shl    $0x2,%edx$/;"	l
fcc	usertests.asm	/^     fcc:	83 45 ec 01          	addl   $0x1,-0x14(%ebp)$/;"	l
fce	sh.asm	/^     fce:	8d 45 f4             	lea    -0xc(%ebp),%eax$/;"	l
fcf	threadtest.asm	/^     fcf:	01 c2                	add    %eax,%edx$/;"	l
fd	cat.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	echo.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	echo.asm	/^  fd:	83 ec 10             	sub    $0x10,%esp$/;"	l
fd	forktest.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	grep.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	grep.asm	/^  fd:	c3                   	ret    $/;"	l
fd	hugefiletest.asm	/^        fd = open(path, O_CREATE | O_RDWR);$/;"	d
fd	hugefiletest.asm	/^    fd = open(path, O_CREATE | O_RDWR);$/;"	d
fd	hugefiletest.asm	/^    fd = open(path, O_RDONLY);$/;"	d
fd	hugefiletest.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	hugefiletest.asm	/^  fd:	83 c4 10             	add    $0x10,%esp$/;"	l
fd	init.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	kill.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ln.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	ln.asm	/^  fd:	0f b6 00             	movzbl (%eax),%eax$/;"	l
fd	ls.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	mkdir.asm	/^  fd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fd	my_userapp.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	my_userapp.asm	/^  fd:	c9                   	leave  $/;"	l
fd	rm.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	rm.asm	/^  fd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fd	sh.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	sh.c	/^  int fd;$/;"	m	struct:redircmd	file:
fd	stressfs.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_CREATE | O_RDWR);$/;"	d
fd	stressfs.asm	/^  fd = open(path, O_RDONLY);$/;"	d
fd	test_master.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	test_mlfq.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	test_mlfq.asm	/^  fd:	8b 4d 08             	mov    0x8(%ebp),%ecx$/;"	l
fd	test_sample.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	test_stride.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	test_stride.asm	/^  fd:	fc                   	cld    $/;"	l
fd	threadtest.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	usertests.asm	/^        fd = open(name, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(file, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(fname, O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^      fd = open(name, 0);$/;"	d
fd	usertests.asm	/^    fd = open("", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigarg-ok", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open("bigwrite", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^    fd = open("xx", O_CREATE);$/;"	d
fd	usertests.asm	/^    fd = open(fname, 0);$/;"	d
fd	usertests.asm	/^    fd = open(name, O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(".", 0);$/;"	d
fd	usertests.asm	/^  fd = open(".", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("123456789012345\/123456789012345\/123456789012345", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("12345678901234\/12345678901234\/12345678901234", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bd", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("big", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("bigarg-ok", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", 0);$/;"	d
fd	usertests.asm	/^  fd = open("bigfile", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/..\/ff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/dd\/ffff", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dd\/ff", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", 0);$/;"	d
fd	usertests.asm	/^  fd = open("dirfile\/xx", O_CREATE);$/;"	d
fd	usertests.asm	/^  fd = open("doesnotexist", 0);$/;"	d
fd	usertests.asm	/^  fd = open("echo", 0);$/;"	d
fd	usertests.asm	/^  fd = open("init", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("lf1", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("lf2", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", 0);$/;"	d
fd	usertests.asm	/^  fd = open("sharedfd", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_CREATE|O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("small", O_RDONLY);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open("unlinkread", O_RDWR);$/;"	d
fd	usertests.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	wc.asm	/^  fd:	83 ec 10             	sub    $0x10,%esp$/;"	l
fd	zombie.asm	/^  fd = open(n, O_RDONLY);$/;"	d
fd	zombie.asm	/^  fd:	8b 45 08             	mov    0x8(%ebp),%eax$/;"	l
fd0	kernel.asm	/^  fd0 = -1;$/;"	d
fd0	usertests.asm	/^     fd0:	83 45 f4 01          	addl   $0x1,-0xc(%ebp)$/;"	l
fd1	sh.asm	/^     fd1:	50                   	push   %eax$/;"	l
fd1	threadtest.asm	/^     fd1:	83 ec 04             	sub    $0x4,%esp$/;"	l
fd1	usertests.asm	/^  fd1 = open("unlinkread", O_CREATE | O_RDWR);$/;"	d
fd2	sh.asm	/^     fd2:	ff 75 08             	pushl  0x8(%ebp)$/;"	l
fd4	threadtest.asm	/^     fd4:	8d 45 c4             	lea    -0x3c(%ebp),%eax$/;"	l
fd4	usertests.asm	/^     fd4:	8b 45 f4             	mov    -0xc(%ebp),%eax$/;"	l
fd5	sh.asm	/^     fd5:	e8 1b ff ff ff       	call   ef5 <write>$/;"	l
fd7	threadtest.asm	/^     fd7:	50                   	push   %eax$/;"	l
fd7	usertests.asm	/^     fd7:	83 f8 09             	cmp    $0x9,%eax$/;"	l
fd8	threadtest.asm	/^     fd8:	68 f5 0e 00 00       	push   $0xef5$/;"	l
fda	sh.asm	/^     fda:	83 c4 10             	add    $0x10,%esp$/;"	l
fda	usertests.asm	/^     fda:	76 ce                	jbe    faa <sharedfd+0x134>$/;"	l
fdalloc	sysfile.c	/^fdalloc(struct file *f)$/;"	f	file:
fdc	usertests.asm	/^     fdc:	83 ec 04             	sub    $0x4,%esp$/;"	l
fdd	sh.asm	/^     fdd:	90                   	nop$/;"	l
fdd	threadtest.asm	/^     fdd:	52                   	push   %edx$/;"	l
fde	sh.asm	/^     fde:	c9                   	leave  $/;"	l
fde	threadtest.asm	/^     fde:	e8 95 05 00 00       	call   1578 <thread_create>$/;"	l
fdf	sh.asm	/^     fdf:	c3                   	ret    $/;"	l
fdf	usertests.asm	/^     fdf:	6a 0a                	push   $0xa$/;"	l
fe	grep.asm	/^  fe:	8d 4c 24 04          	lea    0x4(%esp),%ecx$/;"	l
fe	kill.asm	/^  fe:	0f b6 c0             	movzbl %al,%eax$/;"	l
fe	my_userapp.asm	/^  fe:	c3                   	ret    $/;"	l
fe	stressfs.asm	/^  fe:	8d 45 e6             	lea    -0x1a(%ebp),%eax$/;"	l
fe	test_stride.asm	/^  fe:	f3 aa                	rep stos %al,%es:(%edi)$/;"	l
fe0	sh.asm	/^     fe0:	55                   	push   %ebp$/;"	l
fe1	sh.asm	/^     fe1:	89 e5                	mov    %esp,%ebp$/;"	l
fe1	usertests.asm	/^     fe1:	8d 45 d6             	lea    -0x2a(%ebp),%eax$/;"	l
fe3	sh.asm	/^     fe3:	53                   	push   %ebx$/;"	l
fe3	threadtest.asm	/^     fe3:	83 c4 10             	add    $0x10,%esp$/;"	l
fe4	sh.asm	/^     fe4:	83 ec 24             	sub    $0x24,%esp$/;"	l
fe4	usertests.asm	/^     fe4:	50                   	push   %eax$/;"	l
fe5	usertests.asm	/^     fe5:	ff 75 e8             	pushl  -0x18(%ebp)$/;"	l
fe6	threadtest.asm	/^     fe6:	85 c0                	test   %eax,%eax$/;"	l
fe7	sh.asm	/^     fe7:	c7 45 f0 00 00 00 00 	movl   $0x0,-0x10(%ebp)$/;"	l
fe8	threadtest.asm	/^     fe8:	74 1c                	je     1006 <stridetest1+0xcb>$/;"	l
fe8	usertests.asm	/^     fe8:	e8 21 30 00 00       	call   400e <read>$/;"	l
fea	threadtest.asm	/^     fea:	83 ec 08             	sub    $0x8,%esp$/;"	l
feature	mp.h	/^  uint feature;                 \/\/ feature flags from CPUID instruction$/;"	m	struct:mpproc
fed	threadtest.asm	/^     fed:	68 01 1b 00 00       	push   $0x1b01$/;"	l
fed	usertests.asm	/^     fed:	83 c4 10             	add    $0x10,%esp$/;"	l
fee	sh.asm	/^     fee:	83 7d 14 00          	cmpl   $0x0,0x14(%ebp)$/;"	l
fetchint	syscall.c	/^fetchint(uint addr, int *ip)$/;"	f
fetchstr	syscall.c	/^fetchstr(uint addr, char **pp)$/;"	f
ff	cat.asm	/^  ff:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ff	forktest.asm	/^  ff:	ff 71 fc             	pushl  -0x4(%ecx)$/;"	l
ff	kernel.asm	/^  ff = *f;$/;"	d
ff	my_userapp.asm	/^  ff:	55                   	push   %ebp$/;"	l
ff	sh.asm	/^      ff:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ff	test_master.asm	/^  ff:	88 10                	mov    %dl,(%eax)$/;"	l
ff	threadtest.asm	/^      ff:	a1 20 23 00 00       	mov    0x2320,%eax$/;"	l
ff	usertests.asm	/^      ff:	68 fe 45 00 00       	push   $0x45fe$/;"	l
ff0	usertests.asm	/^     ff0:	89 45 e0             	mov    %eax,-0x20(%ebp)$/;"	l
ff2	sh.asm	/^     ff2:	74 17                	je     100b <printint+0x2b>$/;"	l
ff2	threadtest.asm	/^     ff2:	6a 01                	push   $0x1$/;"	l
ff3	usertests.asm	/^     ff3:	83 7d e0 00          	cmpl   $0x0,-0x20(%ebp)$/;"	l
ff4	sh.asm	/^     ff4:	83 7d 0c 00          	cmpl   $0x0,0xc(%ebp)$/;"	l
ff4	threadtest.asm	/^     ff4:	e8 6e 06 00 00       	call   1667 <printf>$/;"	l
ff7	usertests.asm	/^     ff7:	7f a8                	jg     fa1 <sharedfd+0x12b>$/;"	l
ff8	sh.asm	/^     ff8:	79 11                	jns    100b <printint+0x2b>$/;"	l
ff9	threadtest.asm	/^     ff9:	83 c4 10             	add    $0x10,%esp$/;"	l
ff9	usertests.asm	/^     ff9:	83 ec 0c             	sub    $0xc,%esp$/;"	l
ffa	sh.asm	/^     ffa:	c7 45 f0 01 00 00 00 	movl   $0x1,-0x10(%ebp)$/;"	l
ffc	threadtest.asm	/^     ffc:	b8 ff ff ff ff       	mov    $0xffffffff,%eax$/;"	l
ffc	usertests.asm	/^     ffc:	ff 75 e8             	pushl  -0x18(%ebp)$/;"	l
fff	usertests.asm	/^     fff:	e8 1a 30 00 00       	call   401e <close>$/;"	l
file	file.c	/^  struct file file[NFILE];$/;"	m	struct:__anon4	typeref:struct:__anon4::file	file:
file	file.h	/^struct file {$/;"	s
file	sh.c	/^  char *file;$/;"	m	struct:redircmd	file:
filealloc	file.c	/^filealloc(void)$/;"	f
fileclose	file.c	/^fileclose(struct file *f)$/;"	f
filedup	file.c	/^filedup(struct file *f)$/;"	f
fileinit	file.c	/^fileinit(void)$/;"	f
fileread	file.c	/^fileread(struct file *f, char *addr, int n)$/;"	f
filestat	file.c	/^filestat(struct file *f, struct stat *st)$/;"	f
filesz	elf.h	/^  uint filesz;$/;"	m	struct:proghdr
filewrite	file.c	/^filewrite(struct file *f, char *addr, int n)$/;"	f
fill_rtcdate	lapic.c	/^static void fill_rtcdate(struct rtcdate *r)$/;"	f	file:
first	kernel.asm	/^    first = 0;$/;"	d
flag	threadtest.asm	/^  flag = 0;$/;"	d
flag	threadtest.asm	/^  flag = 1;$/;"	d
flag	threadtest.asm	/^  flag = 2;$/;"	d
flags	buf.h	/^  int flags;$/;"	m	struct:buf
flags	elf.h	/^  uint flags;$/;"	m	struct:elfhdr
flags	elf.h	/^  uint flags;$/;"	m	struct:proghdr
flags	kernel.asm	/^    flags = PTE_FLAGS(*pte);$/;"	d
flags	mp.h	/^  uchar flags;                  \/\/ CPU flags$/;"	m	struct:mpproc
flags	mp.h	/^  uchar flags;                  \/\/ I\/O APIC flags$/;"	m	struct:mpioapic
fmtname	ls.c	/^fmtname(char *path)$/;"	f
fname	usertests.asm	/^    fname = names[i];$/;"	d
fname	usertests.asm	/^    fname = names[pi];$/;"	d
fork	proc.c	/^fork(void)$/;"	f
fork1	sh.c	/^fork1(void)$/;"	f
forkret	proc.c	/^forkret(void)$/;"	f
forktest	forktest.c	/^forktest(void)$/;"	f
forktest	usertests.c	/^forktest(void)$/;"	f
found	kernel.asm	/^found:$/;"	l
fourfiles	usertests.c	/^fourfiles(void)$/;"	f
fourteen	usertests.c	/^fourteen(void)$/;"	f
free	umalloc.c	/^free(void *ap)$/;"	f
freeblock	mkfs.c	/^uint freeblock;$/;"	v
freeinode	mkfs.c	/^uint freeinode = 1;$/;"	v
freelist	kalloc.c	/^  struct run *freelist;$/;"	m	struct:__anon6	typeref:struct:__anon6::run	file:
freep	cat.asm	/^      freep = prevp;$/;"	d
freep	cat.asm	/^  freep = p;$/;"	d
freep	echo.asm	/^      freep = prevp;$/;"	d
freep	echo.asm	/^  freep = p;$/;"	d
freep	grep.asm	/^      freep = prevp;$/;"	d
freep	grep.asm	/^  freep = p;$/;"	d
freep	hugefiletest.asm	/^      freep = prevp;$/;"	d
freep	hugefiletest.asm	/^  freep = p;$/;"	d
freep	init.asm	/^      freep = prevp;$/;"	d
freep	init.asm	/^  freep = p;$/;"	d
freep	kill.asm	/^      freep = prevp;$/;"	d
freep	kill.asm	/^  freep = p;$/;"	d
freep	ln.asm	/^      freep = prevp;$/;"	d
freep	ln.asm	/^  freep = p;$/;"	d
freep	ls.asm	/^      freep = prevp;$/;"	d
freep	ls.asm	/^  freep = p;$/;"	d
freep	mkdir.asm	/^      freep = prevp;$/;"	d
freep	mkdir.asm	/^  freep = p;$/;"	d
freep	my_userapp.asm	/^      freep = prevp;$/;"	d
freep	my_userapp.asm	/^  freep = p;$/;"	d
freep	rm.asm	/^      freep = prevp;$/;"	d
freep	rm.asm	/^  freep = p;$/;"	d
freep	sh.asm	/^      freep = prevp;$/;"	d
freep	sh.asm	/^  freep = p;$/;"	d
freep	stressfs.asm	/^      freep = prevp;$/;"	d
freep	stressfs.asm	/^  freep = p;$/;"	d
freep	test_master.asm	/^      freep = prevp;$/;"	d
freep	test_master.asm	/^  freep = p;$/;"	d
freep	test_mlfq.asm	/^      freep = prevp;$/;"	d
freep	test_mlfq.asm	/^  freep = p;$/;"	d
freep	test_sample.asm	/^      freep = prevp;$/;"	d
freep	test_sample.asm	/^  freep = p;$/;"	d
freep	test_stride.asm	/^      freep = prevp;$/;"	d
freep	test_stride.asm	/^  freep = p;$/;"	d
freep	threadtest.asm	/^      freep = prevp;$/;"	d
freep	threadtest.asm	/^  freep = p;$/;"	d
freep	umalloc.c	/^static Header *freep;$/;"	v	file:
freep	usertests.asm	/^      freep = prevp;$/;"	d
freep	usertests.asm	/^  freep = p;$/;"	d
freep	wc.asm	/^      freep = prevp;$/;"	d
freep	wc.asm	/^  freep = p;$/;"	d
freep	zombie.asm	/^      freep = prevp;$/;"	d
freep	zombie.asm	/^  freep = p;$/;"	d
freerange	kalloc.c	/^freerange(void *vstart, void *vend)$/;"	f
freevm	vm.c	/^freevm(pde_t *pgdir)$/;"	f
fs	mmu.h	/^  ushort fs;$/;"	m	struct:taskstate
fs	x86.h	/^  ushort fs;$/;"	m	struct:trapframe
fsfd	mkfs.c	/^int fsfd;$/;"	v
fsfull	usertests.c	/^fsfull()$/;"	f
ftable	file.c	/^} ftable;$/;"	v	typeref:struct:__anon4
g	mmu.h	/^  uint g : 1;          \/\/ Granularity: limit scaled by 4K when set$/;"	m	struct:segdesc
gatedesc	mmu.h	/^struct gatedesc {$/;"	s
gcnt	threadtest.asm	/^    gcnt = 0;$/;"	d
gcnt	threadtest.asm	/^    gcnt = tmp;$/;"	d
gcnt	threadtest.asm	/^  gcnt = 0;$/;"	d
gcnt	threadtest.c	/^int gcnt;$/;"	v
gdt	bootasm.S	/^gdt:$/;"	l
gdt	entryother.S	/^gdt:$/;"	l
gdt	proc.h	/^  struct segdesc gdt[NSEGS];   \/\/ x86 global descriptor table$/;"	m	struct:cpu	typeref:struct:cpu::segdesc
gdtdesc	bootasm.S	/^gdtdesc:$/;"	l
gdtdesc	entryother.S	/^gdtdesc:$/;"	l
getcallerpcs	spinlock.c	/^getcallerpcs(void *v, uint pcs[])$/;"	f
getcmd	sh.c	/^getcmd(char *buf, int nbuf)$/;"	f
gets	ulib.c	/^gets(char *buf, int max)$/;"	f
gettoken	sh.c	/^gettoken(char **ps, char *es, char **q, char **eq)$/;"	f
gpipe	threadtest.c	/^int gpipe[2];$/;"	v
grep	grep.c	/^grep(char *pattern, int fd)$/;"	f
growproc	proc.c	/^growproc(int n)$/;"	f
gs	mmu.h	/^  ushort gs;$/;"	m	struct:taskstate
gs	x86.h	/^  ushort gs;$/;"	m	struct:trapframe
havedisk1	ide.c	/^static int havedisk1;$/;"	v	file:
havedisk1	kernel.asm	/^      havedisk1 = 1;$/;"	d
havekids	kernel.asm	/^		  havekids = 1;$/;"	d
havekids	kernel.asm	/^		havekids = 0;$/;"	d
havekids	kernel.asm	/^      havekids = 1;$/;"	d
havekids	kernel.asm	/^    havekids = 0;$/;"	d
head	bio.c	/^  struct buf head;$/;"	m	struct:__anon1	typeref:struct:__anon1::buf	file:
header	umalloc.c	/^union header {$/;"	u	file:
heap_size	proc.h	/^  int heap_size;			   \/\/ Check the heap size that allocate to the child thread$/;"	m	struct:proc
hi	usertests.asm	/^  hi = 1100*1024;$/;"	d
holding	spinlock.c	/^holding(struct spinlock *lock)$/;"	f
holdingsleep	sleeplock.c	/^holdingsleep(struct sleeplock *lk)$/;"	f
hour	date.h	/^  uint hour;$/;"	m	struct:rtcdate
hp	cat.asm	/^  hp = (Header*)p;$/;"	d
hp	echo.asm	/^  hp = (Header*)p;$/;"	d
hp	grep.asm	/^  hp = (Header*)p;$/;"	d
hp	hugefiletest.asm	/^  hp = (Header*)p;$/;"	d
hp	init.asm	/^  hp = (Header*)p;$/;"	d
hp	kill.asm	/^  hp = (Header*)p;$/;"	d
hp	ln.asm	/^  hp = (Header*)p;$/;"	d
hp	ls.asm	/^  hp = (Header*)p;$/;"	d
hp	mkdir.asm	/^  hp = (Header*)p;$/;"	d
hp	my_userapp.asm	/^  hp = (Header*)p;$/;"	d
hp	rm.asm	/^  hp = (Header*)p;$/;"	d
hp	sh.asm	/^  hp = (Header*)p;$/;"	d
hp	stressfs.asm	/^  hp = (Header*)p;$/;"	d
hp	test_master.asm	/^  hp = (Header*)p;$/;"	d
hp	test_mlfq.asm	/^  hp = (Header*)p;$/;"	d
hp	test_sample.asm	/^  hp = (Header*)p;$/;"	d
hp	test_stride.asm	/^  hp = (Header*)p;$/;"	d
hp	threadtest.asm	/^  hp = (Header*)p;$/;"	d
hp	usertests.asm	/^  hp = (Header*)p;$/;"	d
hp	wc.asm	/^  hp = (Header*)p;$/;"	d
hp	zombie.asm	/^  hp = (Header*)p;$/;"	d
i	cat.asm	/^  i = 0;$/;"	d
i	echo.asm	/^  i = 0;$/;"	d
i	grep.asm	/^  i = 0;$/;"	d
i	hugefiletest.asm	/^  i = 0;$/;"	d
i	init.asm	/^  i = 0;$/;"	d
i	kernel.asm	/^  i = 0;$/;"	d
i	kill.asm	/^  i = 0;$/;"	d
i	ln.asm	/^  i = 0;$/;"	d
i	ls.asm	/^  i = 0;$/;"	d
i	mkdir.asm	/^  i = 0;$/;"	d
i	my_userapp.asm	/^  i = 0;$/;"	d
i	rm.asm	/^  i = 0;$/;"	d
i	sh.asm	/^  i = 0;$/;"	d
i	stressfs.asm	/^  i = 0;$/;"	d
i	test_master.asm	/^  i = 0;$/;"	d
i	test_mlfq.asm	/^    i = 0;$/;"	d
i	test_mlfq.asm	/^  i = 0;$/;"	d
i	test_sample.asm	/^  i = 0;$/;"	d
i	test_stride.asm	/^      i = 0;$/;"	d
i	test_stride.asm	/^  i = 0;$/;"	d
i	threadtest.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^      i = de.name[1] - '0';$/;"	d
i	usertests.asm	/^    i = read(fd, buf, 512);$/;"	d
i	usertests.asm	/^  i = 0;$/;"	d
i	usertests.asm	/^  i = read(fd, buf, 2000);$/;"	d
i	wc.asm	/^  i = 0;$/;"	d
i	zombie.asm	/^  i = 0;$/;"	d
ialloc	fs.c	/^ialloc(uint dev, short type)$/;"	f
ialloc	mkfs.c	/^ialloc(ushort type)$/;"	f
iappend	mkfs.c	/^iappend(uint inum, void *xp, int n)$/;"	f
icache	fs.c	/^} icache;$/;"	v	typeref:struct:__anon5
id	kernel.asm	/^  id = ioapicread(REG_ID) >> 24;$/;"	d
ideinit	ide.c	/^ideinit(void)$/;"	f
ideinit	memide.c	/^ideinit(void)$/;"	f
ideintr	ide.c	/^ideintr(void)$/;"	f
ideintr	memide.c	/^ideintr(void)$/;"	f
idelock	ide.c	/^static struct spinlock idelock;$/;"	v	typeref:struct:spinlock	file:
idequeue	ide.c	/^static struct buf *idequeue;$/;"	v	typeref:struct:buf	file:
idequeue	kernel.asm	/^  idequeue = b->qnext;$/;"	d
iderw	ide.c	/^iderw(struct buf *b)$/;"	f
iderw	memide.c	/^iderw(struct buf *b)$/;"	f
idestart	ide.c	/^idestart(struct buf *b)$/;"	f	file:
idewait	ide.c	/^idewait(int checkerr)$/;"	f	file:
idt	trap.c	/^struct gatedesc idt[256];$/;"	v	typeref:struct:gatedesc
idtinit	trap.c	/^idtinit(void)$/;"	f
idup	fs.c	/^idup(struct inode *ip)$/;"	f
iget	fs.c	/^iget(uint dev, uint inum)$/;"	f	file:
iinit	fs.c	/^iinit(int dev)$/;"	f
ilock	fs.c	/^ilock(struct inode *ip)$/;"	f
imcrp	mp.h	/^  uchar imcrp;$/;"	m	struct:mp
inb	x86.h	/^inb(ushort port)$/;"	f
init	initcode.S	/^init:$/;"	l
initlock	spinlock.c	/^initlock(struct spinlock *lk, char *name)$/;"	f
initlog	log.c	/^initlog(int dev)$/;"	f
initproc	kernel.asm	/^  initproc = p;$/;"	d
initproc	proc.c	/^static struct proc *initproc;$/;"	v	typeref:struct:proc	file:
initsleeplock	sleeplock.c	/^initsleeplock(struct sleeplock *lk, char *name)$/;"	f
inituvm	vm.c	/^inituvm(pde_t *pgdir, char *init, uint sz)$/;"	f
ino	stat.h	/^  uint ino;    \/\/ Inode number$/;"	m	struct:stat
inode	file.h	/^struct inode {$/;"	s
inode	fs.c	/^  struct inode inode[NINODE];$/;"	m	struct:__anon5	typeref:struct:__anon5::inode	file:
inodestart	fs.h	/^  uint inodestart;   \/\/ Block number of first inode block$/;"	m	struct:superblock
input	console.c	/^} input;$/;"	v	typeref:struct:__anon8
insl	x86.h	/^insl(int port, void *addr, int cnt)$/;"	f
install_trans	log.c	/^install_trans(void)$/;"	f	file:
int	cat.asm	/^int$/;"	l
int	echo.asm	/^int$/;"	l
int	forktest.asm	/^int$/;"	l
int	grep.asm	/^int match(char*, char*);$/;"	l
int	grep.asm	/^int matchhere(char *re, char *text)$/;"	l
int	grep.asm	/^int matchhere(char*, char*);$/;"	l
int	grep.asm	/^int matchstar(int c, char *re, char *text)$/;"	l
int	grep.asm	/^int matchstar(int, char*, char*);$/;"	l
int	grep.asm	/^int$/;"	l
int	hugefiletest.asm	/^int$/;"	l
int	init.asm	/^int$/;"	l
int	kernel.asm	/^int ncpu;$/;"	l
int	kernel.asm	/^int printk_str(char *str){$/;"	l
int	kernel.asm	/^int sys_myfunction(void){$/;"	l
int	kernel.asm	/^int$/;"	l
int	kill.asm	/^int$/;"	l
int	ln.asm	/^int$/;"	l
int	ls.asm	/^int$/;"	l
int	mkdir.asm	/^int$/;"	l
int	my_userapp.asm	/^int main(int argc, char *argv[]){$/;"	l
int	my_userapp.asm	/^int$/;"	l
int	rm.asm	/^int$/;"	l
int	sh.asm	/^int$/;"	l
int	stressfs.asm	/^int$/;"	l
int	test_master.asm	/^int$/;"	l
int	test_mlfq.asm	/^int$/;"	l
int	test_sample.asm	/^int$/;"	l
int	test_stride.asm	/^int$/;"	l
int	threadtest.asm	/^int$/;"	l
int	usertests.asm	/^int stdout = 1;$/;"	l
int	usertests.asm	/^int$/;"	l
int	wc.asm	/^int$/;"	l
int	zombie.asm	/^int$/;"	l
intena	kernel.asm	/^  intena = mycpu()->intena;$/;"	d
intena	proc.h	/^  int intena;                  \/\/ Were interrupts enabled before pushcli?$/;"	m	struct:cpu
inum	file.h	/^  uint inum;          \/\/ Inode number$/;"	m	struct:inode
inum	fs.h	/^  ushort inum;$/;"	m	struct:dirent
inum	kernel.asm	/^      inum = de.inum;$/;"	d
inword	wc.asm	/^        inword = 0;$/;"	d
inword	wc.asm	/^        inword = 1;$/;"	d
inword	wc.asm	/^  inword = 0;$/;"	d
ioapic	ioapic.c	/^struct ioapic {$/;"	s	file:
ioapic	ioapic.c	/^volatile struct ioapic *ioapic;$/;"	v	typeref:struct:ioapic
ioapic	kernel.asm	/^      ioapic = (struct mpioapic*)p;$/;"	d
ioapic	kernel.asm	/^  ioapic = (volatile struct ioapic*)IOAPIC;$/;"	d
ioapicenable	ioapic.c	/^ioapicenable(int irq, int cpunum)$/;"	f
ioapicid	kernel.asm	/^      ioapicid = ioapic->apicno;$/;"	d
ioapicid	mp.c	/^uchar ioapicid;$/;"	v
ioapicinit	ioapic.c	/^ioapicinit(void)$/;"	f
ioapicread	ioapic.c	/^ioapicread(int reg)$/;"	f	file:
ioapicwrite	ioapic.c	/^ioapicwrite(int reg, uint data)$/;"	f	file:
iomb	mmu.h	/^  ushort iomb;       \/\/ I\/O map base address$/;"	m	struct:taskstate
ip	file.h	/^  struct inode *ip;$/;"	m	struct:file	typeref:struct:file::inode
ip	kernel.asm	/^    ip = create(path, T_FILE, 0, 0);$/;"	d
ip	kernel.asm	/^    ip = idup(myproc()->cwd);$/;"	d
ip	kernel.asm	/^    ip = iget(ROOTDEV, ROOTINO);$/;"	d
ip	kernel.asm	/^    ip = next;$/;"	d
ip	kernel.asm	/^  ip = 0;$/;"	d
ip	kernel.asm	/^  ip = empty;$/;"	d
iput	fs.c	/^iput(struct inode *ip)$/;"	f
iputtest	usertests.c	/^iputtest(void)$/;"	f
iref	usertests.c	/^iref(void)$/;"	f
isNewStride	ptable.h	/^  int isNewStride;					\/\/ same as Newbiecome, a process call set_cpu_share,$/;"	m	struct:__anon3
isNewbieComing	ptable.h	/^  int isNewbieComing;				\/\/ if isNewbieComing is 1, then new process is allocated$/;"	m	struct:__anon3
isQueueEmpty	proc.c	/^isQueueEmpty(int lev) {$/;"	f
isStride	proc.h	/^  int isStride;				   \/\/ if 1, this proc is stride$/;"	m	struct:proc
isThread	proc.h	/^  int isThread;				   \/\/ Signal that it is child thread$/;"	m	struct:proc
isdirempty	sysfile.c	/^isdirempty(struct inode *dp)$/;"	f	file:
ismp	kernel.asm	/^      ismp = 0;$/;"	d
ismp	kernel.asm	/^  ismp = 1;$/;"	d
itrunc	fs.c	/^itrunc(struct inode *ip)$/;"	f	file:
iunlock	fs.c	/^iunlock(struct inode *ip)$/;"	f
iunlockput	fs.c	/^iunlockput(struct inode *ip)$/;"	f
iupdate	fs.c	/^iupdate(struct inode *ip)$/;"	f
jointest1	threadtest.c	/^jointest1(void)$/;"	f
jointest2	threadtest.c	/^jointest2(void)$/;"	f
jointhreadmain	threadtest.c	/^jointhreadmain(void *arg)$/;"	f
k	test_sample.asm	/^    k = 0;$/;"	d
kalloc	kalloc.c	/^kalloc(void)$/;"	f
kbdgetc	kbd.c	/^kbdgetc(void)$/;"	f
kbdintr	kbd.c	/^kbdintr(void)$/;"	f
kernel	kernel.asm	/^kernel:     file format elf32-i386$/;"	l
kfree	kalloc.c	/^kfree(char *v)$/;"	f
kill	proc.c	/^kill(int pid)$/;"	f
killed	proc.h	/^  int killed;                  \/\/ If non-zero, have been killed$/;"	m	struct:proc
killtest	threadtest.c	/^killtest(void)$/;"	f
killthreadmain	threadtest.c	/^killthreadmain(void *arg)$/;"	f
kinit1	kalloc.c	/^kinit1(void *vstart, void *vend)$/;"	f
kinit2	kalloc.c	/^kinit2(void *vstart, void *vend)$/;"	f
kmap	vm.c	/^static struct kmap {$/;"	s	file:
kmap	vm.c	/^} kmap[] = {$/;"	v	typeref:struct:kmap	file:
kmem	kalloc.c	/^} kmem;$/;"	v	typeref:struct:__anon6
kpgdir	kernel.asm	/^  kpgdir = setupkvm();$/;"	d
kpgdir	vm.c	/^pde_t *kpgdir;  \/\/ for use in scheduler()$/;"	v
kstack	proc.h	/^  char *kstack;                \/\/ Bottom of kernel stack for this process$/;"	m	struct:proc
kvmalloc	vm.c	/^kvmalloc(void)$/;"	f
l	wc.asm	/^  l = w = c = 0;$/;"	d
lapic	kernel.asm	/^  lapic = (uint*)conf->lapicaddr;$/;"	d
lapic	lapic.c	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	v
lapicaddr	mp.h	/^  uint *lapicaddr;              \/\/ address of local APIC$/;"	m	struct:mpconf
lapiceoi	lapic.c	/^lapiceoi(void)$/;"	f
lapicid	lapic.c	/^lapicid(void)$/;"	f
lapicinit	lapic.c	/^lapicinit(void)$/;"	f
lapicstartap	lapic.c	/^lapicstartap(uchar apicid, uint addr)$/;"	f
lapicw	lapic.c	/^lapicw(int index, int value)$/;"	f	file:
last	kernel.asm	/^      last = s+1;$/;"	d
last	kernel.asm	/^  last = (char*)PGROUNDDOWN(((uint)va) + size - 1);$/;"	d
lastaddr	usertests.asm	/^  lastaddr = (char*) (BIG-1);$/;"	d
lcmd	sh.asm	/^    lcmd = (struct listcmd*)cmd;$/;"	d
lcr3	x86.h	/^lcr3(uint val)$/;"	f
ldt	mmu.h	/^  ushort ldt;$/;"	m	struct:taskstate
left	sh.c	/^  struct cmd *left;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
left	sh.c	/^  struct cmd *left;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
len	kernel.asm	/^  len = path - s;$/;"	d
length	mp.h	/^  uchar length;                 \/\/ 1$/;"	m	struct:mp
length	mp.h	/^  ushort length;                \/\/ total table length$/;"	m	struct:mpconf
lev	kernel.asm	/^				lev = -1;$/;"	d
lgdt	x86.h	/^lgdt(struct segdesc *p, int size)$/;"	f
lh	log.c	/^  struct logheader lh;$/;"	m	struct:log	typeref:struct:log::logheader	file:
lidt	x86.h	/^lidt(struct gatedesc *p, int size)$/;"	f
lim_15_0	mmu.h	/^  uint lim_15_0 : 16;  \/\/ Low bits of segment limit$/;"	m	struct:segdesc
lim_19_16	mmu.h	/^  uint lim_19_16 : 4;  \/\/ High bits of segment limit$/;"	m	struct:segdesc
link	mmu.h	/^  uint link;         \/\/ Old ts selector$/;"	m	struct:taskstate
linktest	usertests.c	/^linktest(void)$/;"	f
linkunlink	usertests.c	/^linkunlink()$/;"	f
listcmd	sh.c	/^listcmd(struct cmd *left, struct cmd *right)$/;"	f
listcmd	sh.c	/^struct listcmd {$/;"	s	file:
lk	sleeplock.h	/^  struct spinlock lk; \/\/ spinlock protecting this sleep lock$/;"	m	struct:sleeplock	typeref:struct:sleeplock::spinlock
loadgs	x86.h	/^loadgs(ushort v)$/;"	f
loaduvm	vm.c	/^loaduvm(pde_t *pgdir, char *addr, struct inode *ip, uint offset, uint sz)$/;"	f
lock	bio.c	/^  struct spinlock lock;$/;"	m	struct:__anon1	typeref:struct:__anon1::spinlock	file:
lock	buf.h	/^  struct sleeplock lock;$/;"	m	struct:buf	typeref:struct:buf::sleeplock
lock	console.c	/^  struct spinlock lock;$/;"	m	struct:__anon7	typeref:struct:__anon7::spinlock	file:
lock	file.c	/^  struct spinlock lock;$/;"	m	struct:__anon4	typeref:struct:__anon4::spinlock	file:
lock	file.h	/^  struct sleeplock lock; \/\/ protects everything below here$/;"	m	struct:inode	typeref:struct:inode::sleeplock
lock	fs.c	/^  struct spinlock lock;$/;"	m	struct:__anon5	typeref:struct:__anon5::spinlock	file:
lock	kalloc.c	/^  struct spinlock lock;$/;"	m	struct:__anon6	typeref:struct:__anon6::spinlock	file:
lock	log.c	/^  struct spinlock lock;$/;"	m	struct:log	typeref:struct:log::spinlock	file:
lock	pipe.c	/^  struct spinlock lock;$/;"	m	struct:pipe	typeref:struct:pipe::spinlock	file:
lock	ptable.h	/^  struct spinlock lock;$/;"	m	struct:__anon3	typeref:struct:__anon3::spinlock
locked	sleeplock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:sleeplock
locked	spinlock.h	/^  uint locked;       \/\/ Is the lock held?$/;"	m	struct:spinlock
locking	console.c	/^  int locking;$/;"	m	struct:__anon7	file:
locking	kernel.asm	/^  locking = cons.locking;$/;"	d
log	log.c	/^struct log log;$/;"	v	typeref:struct:log
log	log.c	/^struct log {$/;"	s	file:
log_write	log.c	/^log_write(struct buf *b)$/;"	f
logheader	log.c	/^struct logheader {$/;"	s	file:
logstart	fs.h	/^  uint logstart;     \/\/ Block number of first log block$/;"	m	struct:superblock
ls	ls.c	/^ls(char *path)$/;"	f
ltr	x86.h	/^ltr(ushort sel)$/;"	f
m	grep.asm	/^      m = 0;$/;"	d
m	grep.asm	/^  m = 0;$/;"	d
m	kernel.asm	/^      m = 1 << (bi % 8);$/;"	d
m	kernel.asm	/^    m = min(n - tot, BSIZE - off%BSIZE);$/;"	d
m	kernel.asm	/^  m = 1 << (bi % 8);$/;"	d
m1	usertests.asm	/^      m1 = m2;$/;"	d
m1	usertests.asm	/^    m1 = 0;$/;"	d
m1	usertests.asm	/^    m1 = malloc(1024*20);$/;"	d
m2	usertests.asm	/^      m2 = *(char**)m1;$/;"	d
machine	elf.h	/^  ushort machine;$/;"	m	struct:elfhdr
magic	elf.h	/^  uint magic;  \/\/ must equal ELF_MAGIC$/;"	m	struct:elfhdr
main	cat.c	/^main(int argc, char *argv[])$/;"	f
main	echo.c	/^main(int argc, char *argv[])$/;"	f
main	forktest.c	/^main(void)$/;"	f
main	grep.c	/^main(int argc, char *argv[])$/;"	f
main	hugefiletest.c	/^main(int argc, char *argv[])$/;"	f
main	init.c	/^main(void)$/;"	f
main	kill.c	/^main(int argc, char **argv)$/;"	f
main	ln.c	/^main(int argc, char *argv[])$/;"	f
main	ls.c	/^main(int argc, char *argv[])$/;"	f
main	main.c	/^main(void)$/;"	f
main	mkdir.c	/^main(int argc, char *argv[])$/;"	f
main	mkfs.c	/^main(int argc, char *argv[])$/;"	f
main	my_userapp.c	/^int main(int argc, char *argv[]){$/;"	f
main	rm.c	/^main(int argc, char *argv[])$/;"	f
main	sh.c	/^main(void)$/;"	f
main	stressfs.c	/^main(int argc, char *argv[])$/;"	f
main	test_master.c	/^main(int argc, char *argv[])$/;"	f
main	test_mlfq.c	/^main(int argc, char *argv[])$/;"	f
main	test_sample.c	/^main(int argc, char *argv[])$/;"	f
main	test_stride.c	/^main(int argc, char *argv[])$/;"	f
main	threadtest.c	/^main(int argc, char *argv[])$/;"	f
main	usertests.c	/^main(int argc, char *argv[])$/;"	f
main	wc.c	/^main(int argc, char *argv[])$/;"	f
main	zombie.c	/^main(void)$/;"	f
major	file.h	/^  short major;$/;"	m	struct:inode
major	fs.h	/^  short major;          \/\/ Major device number (T_DEV only)$/;"	m	struct:dinode
malloc	umalloc.c	/^malloc(uint nbytes)$/;"	f
mappages	vm.c	/^mappages(pde_t *pgdir, void *va, uint size, uint pa, int perm)$/;"	f	file:
match	grep.c	/^match(char *re, char *text)$/;"	f
matchhere	grep.c	/^int matchhere(char *re, char *text)$/;"	f
matchstar	grep.c	/^int matchstar(int c, char *re, char *text)$/;"	f
maxintr	kernel.asm	/^  maxintr = (ioapicread(REG_VER) >> 16) & 0xFF;$/;"	d
mem	kernel.asm	/^    mem = kalloc();$/;"	d
mem	kernel.asm	/^  mem = kalloc();$/;"	d
mem	usertests.c	/^mem(void)$/;"	f
memcmp	string.c	/^memcmp(const void *v1, const void *v2, uint n)$/;"	f
memcpy	string.c	/^memcpy(void *dst, const void *src, uint n)$/;"	f
memdisk	memide.c	/^static uchar *memdisk;$/;"	v	file:
memmove	string.c	/^memmove(void *dst, const void *src, uint n)$/;"	f
memmove	ulib.c	/^memmove(void *vdst, void *vsrc, int n)$/;"	f
memset	string.c	/^memset(void *dst, int c, uint n)$/;"	f
memset	ulib.c	/^memset(void *dst, int c, uint n)$/;"	f
memsz	elf.h	/^  uint memsz;$/;"	m	struct:proghdr
microdelay	lapic.c	/^microdelay(int us)$/;"	f
min	fs.c	24;"	d	file:
min	mkfs.c	253;"	d	file:
minor	file.h	/^  short minor;$/;"	m	struct:inode
minor	fs.h	/^  short minor;          \/\/ Minor device number (T_DEV only)$/;"	m	struct:dinode
minute	date.h	/^  uint minute;$/;"	m	struct:rtcdate
mlfq	ptable.h	/^  struct proc* mlfq[3][NPROC];		\/\/ queue for MLFQ$/;"	m	struct:__anon3	typeref:struct:__anon3::proc
mode	sh.c	/^  int mode;$/;"	m	struct:redircmd	file:
month	date.h	/^  uint month;$/;"	m	struct:rtcdate
morecore	umalloc.c	/^morecore(uint nu)$/;"	f	file:
mp	mp.h	/^struct mp {             \/\/ floating pointer$/;"	s
mpconf	mp.h	/^struct mpconf {         \/\/ configuration table header$/;"	s
mpconfig	mp.c	/^mpconfig(struct mp **pmp)$/;"	f	file:
mpenter	main.c	/^mpenter(void)$/;"	f	file:
mpinit	mp.c	/^mpinit(void)$/;"	f
mpioapic	mp.h	/^struct mpioapic {       \/\/ I\/O APIC table entry$/;"	s
mpmain	main.c	/^mpmain(void)$/;"	f	file:
mpproc	mp.h	/^struct mpproc {         \/\/ processor table entry$/;"	s
mpsearch	mp.c	/^mpsearch(void)$/;"	f	file:
mpsearch1	mp.c	/^mpsearch1(uint a, int len)$/;"	f	file:
multiboot_header	entry.S	/^multiboot_header:$/;"	l
mycpu	proc.c	/^mycpu(void)$/;"	f
myproc	proc.c	/^myproc(void) {$/;"	f
n	cat.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	cat.asm	/^  n = 0;$/;"	d
n	echo.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	echo.asm	/^  n = 0;$/;"	d
n	forktest.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	forktest.asm	/^  n = 0;$/;"	d
n	grep.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	grep.asm	/^  n = 0;$/;"	d
n	hugefiletest.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	hugefiletest.asm	/^  n = 0;$/;"	d
n	init.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	init.asm	/^  n = 0;$/;"	d
n	kernel.asm	/^      n = PGSIZE;$/;"	d
n	kernel.asm	/^      n = len;$/;"	d
n	kernel.asm	/^      n = sz - i;$/;"	d
n	kernel.asm	/^    n = PGSIZE - (va - va0);$/;"	d
n	kernel.asm	/^    n = ip->size - off;$/;"	d
n	kill.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	kill.asm	/^  n = 0;$/;"	d
n	ln.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ln.asm	/^  n = 0;$/;"	d
n	log.c	/^  int n;$/;"	m	struct:logheader	file:
n	ls.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	ls.asm	/^  n = 0;$/;"	d
n	mkdir.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	mkdir.asm	/^  n = 0;$/;"	d
n	my_userapp.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	my_userapp.asm	/^  n = 0;$/;"	d
n	rm.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	rm.asm	/^  n = 0;$/;"	d
n	sh.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	sh.asm	/^  n = 0;$/;"	d
n	stressfs.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	stressfs.asm	/^  n = 0;$/;"	d
n	test_master.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	test_master.asm	/^  n = 0;$/;"	d
n	test_mlfq.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	test_mlfq.asm	/^  n = 0;$/;"	d
n	test_sample.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	test_sample.asm	/^  n = 0;$/;"	d
n	test_stride.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	test_stride.asm	/^  n = 0;$/;"	d
n	threadtest.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	threadtest.asm	/^  n = 0;$/;"	d
n	usertests.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	usertests.asm	/^  n = 0;$/;"	d
n	wc.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	wc.asm	/^  n = 0;$/;"	d
n	zombie.asm	/^    n = n*10 + *s++ - '0';$/;"	d
n	zombie.asm	/^  n = 0;$/;"	d
n1	kernel.asm	/^        n1 = max;$/;"	d
name	cat.asm	/^  name: \\$/;"	l
name	echo.asm	/^  name: \\$/;"	l
name	forktest.asm	/^  name: \\$/;"	l
name	fs.h	/^  char name[DIRSIZ];$/;"	m	struct:dirent
name	grep.asm	/^  name: \\$/;"	l
name	hugefiletest.asm	/^  name: \\$/;"	l
name	init.asm	/^  name: \\$/;"	l
name	kill.asm	/^  name: \\$/;"	l
name	ln.asm	/^  name: \\$/;"	l
name	ls.asm	/^  name: \\$/;"	l
name	mkdir.asm	/^  name: \\$/;"	l
name	my_userapp.asm	/^  name: \\$/;"	l
name	proc.h	/^  char name[16];               \/\/ Process name (debugging)$/;"	m	struct:proc
name	rm.asm	/^  name: \\$/;"	l
name	sh.asm	/^  name: \\$/;"	l
name	sleeplock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:sleeplock
name	spinlock.h	/^  char *name;        \/\/ Name of lock.$/;"	m	struct:spinlock
name	stressfs.asm	/^  name: \\$/;"	l
name	test_master.asm	/^  name: \\$/;"	l
name	test_mlfq.asm	/^  name: \\$/;"	l
name	test_sample.asm	/^  name: \\$/;"	l
name	test_stride.asm	/^  name: \\$/;"	l
name	threadtest.asm	/^  name: \\$/;"	l
name	usertests.asm	/^  name: \\$/;"	l
name	usertests.c	/^char name[3];$/;"	v
name	usys.S	/^  name: \\$/;"	l
name	wc.asm	/^  name: \\$/;"	l
name	zombie.asm	/^  name: \\$/;"	l
namecmp	fs.c	/^namecmp(const char *s, const char *t)$/;"	f
namei	fs.c	/^namei(char *path)$/;"	f
nameiparent	fs.c	/^nameiparent(char *path, char *name)$/;"	f
namex	fs.c	/^namex(char *path, int nameiparent, char *name)$/;"	f	file:
nbitmap	mkfs.c	/^int nbitmap = FSSIZE\/(BSIZE*8) + 1;$/;"	v
nblocks	fs.h	/^  uint nblocks;      \/\/ Number of data blocks$/;"	m	struct:superblock
nblocks	mkfs.c	/^int nblocks;  \/\/ Number of data blocks$/;"	v
nc	usertests.asm	/^  nc = np = 0;$/;"	d
ncli	proc.h	/^  int ncli;                    \/\/ Depth of pushcli nesting.$/;"	m	struct:cpu
ncpu	mp.c	/^int ncpu;$/;"	v
neg	cat.asm	/^    neg = 1;$/;"	d
neg	cat.asm	/^  neg = 0;$/;"	d
neg	echo.asm	/^    neg = 1;$/;"	d
neg	echo.asm	/^  neg = 0;$/;"	d
neg	grep.asm	/^    neg = 1;$/;"	d
neg	grep.asm	/^  neg = 0;$/;"	d
neg	hugefiletest.asm	/^    neg = 1;$/;"	d
neg	hugefiletest.asm	/^  neg = 0;$/;"	d
neg	init.asm	/^    neg = 1;$/;"	d
neg	init.asm	/^  neg = 0;$/;"	d
neg	kill.asm	/^    neg = 1;$/;"	d
neg	kill.asm	/^  neg = 0;$/;"	d
neg	ln.asm	/^    neg = 1;$/;"	d
neg	ln.asm	/^  neg = 0;$/;"	d
neg	ls.asm	/^    neg = 1;$/;"	d
neg	ls.asm	/^  neg = 0;$/;"	d
neg	mkdir.asm	/^    neg = 1;$/;"	d
neg	mkdir.asm	/^  neg = 0;$/;"	d
neg	my_userapp.asm	/^    neg = 1;$/;"	d
neg	my_userapp.asm	/^  neg = 0;$/;"	d
neg	rm.asm	/^    neg = 1;$/;"	d
neg	rm.asm	/^  neg = 0;$/;"	d
neg	sh.asm	/^    neg = 1;$/;"	d
neg	sh.asm	/^  neg = 0;$/;"	d
neg	stressfs.asm	/^    neg = 1;$/;"	d
neg	stressfs.asm	/^  neg = 0;$/;"	d
neg	test_master.asm	/^    neg = 1;$/;"	d
neg	test_master.asm	/^  neg = 0;$/;"	d
neg	test_mlfq.asm	/^    neg = 1;$/;"	d
neg	test_mlfq.asm	/^  neg = 0;$/;"	d
neg	test_sample.asm	/^    neg = 1;$/;"	d
neg	test_sample.asm	/^  neg = 0;$/;"	d
neg	test_stride.asm	/^    neg = 1;$/;"	d
neg	test_stride.asm	/^  neg = 0;$/;"	d
neg	threadtest.asm	/^    neg = 1;$/;"	d
neg	threadtest.asm	/^  neg = 0;$/;"	d
neg	usertests.asm	/^    neg = 1;$/;"	d
neg	usertests.asm	/^  neg = 0;$/;"	d
neg	wc.asm	/^    neg = 1;$/;"	d
neg	wc.asm	/^  neg = 0;$/;"	d
neg	zombie.asm	/^    neg = 1;$/;"	d
neg	zombie.asm	/^  neg = 0;$/;"	d
next	buf.h	/^  struct buf *next;$/;"	m	struct:buf	typeref:struct:buf::buf
next	kalloc.c	/^  struct run *next;$/;"	m	struct:run	typeref:struct:run::run	file:
next_tid	proc.c	/^int next_tid = 1;$/;"	v
nextpid	proc.c	/^int nextpid = 1;$/;"	v
ninodeblocks	mkfs.c	/^int ninodeblocks = NINODES \/ IPB + 1;$/;"	v
ninodes	fs.h	/^  uint ninodes;      \/\/ Number of inodes.$/;"	m	struct:superblock
nlink	file.h	/^  short nlink;$/;"	m	struct:inode
nlink	fs.h	/^  short nlink;          \/\/ Number of links to inode in file system$/;"	m	struct:dinode
nlink	stat.h	/^  short nlink; \/\/ Number of links to file$/;"	m	struct:stat
nlog	fs.h	/^  uint nlog;         \/\/ Number of log blocks$/;"	m	struct:superblock
nlog	mkfs.c	/^int nlog = LOGSIZE;$/;"	v
nmeta	mkfs.c	/^int nmeta;    \/\/ Number of meta blocks (boot, sb, nlog, inode, bitmap)$/;"	v
nop	threadtest.c	/^void nop(){ }$/;"	f
normalmap	kbd.h	/^static uchar normalmap[256] =$/;"	v
nread	pipe.c	/^  uint nread;     \/\/ number of bytes read$/;"	m	struct:pipe	file:
nu	cat.asm	/^    nu = 4096;$/;"	d
nu	echo.asm	/^    nu = 4096;$/;"	d
nu	grep.asm	/^    nu = 4096;$/;"	d
nu	hugefiletest.asm	/^    nu = 4096;$/;"	d
nu	init.asm	/^    nu = 4096;$/;"	d
nu	kill.asm	/^    nu = 4096;$/;"	d
nu	ln.asm	/^    nu = 4096;$/;"	d
nu	ls.asm	/^    nu = 4096;$/;"	d
nu	mkdir.asm	/^    nu = 4096;$/;"	d
nu	my_userapp.asm	/^    nu = 4096;$/;"	d
nu	rm.asm	/^    nu = 4096;$/;"	d
nu	sh.asm	/^    nu = 4096;$/;"	d
nu	stressfs.asm	/^    nu = 4096;$/;"	d
nu	test_master.asm	/^    nu = 4096;$/;"	d
nu	test_mlfq.asm	/^    nu = 4096;$/;"	d
nu	test_sample.asm	/^    nu = 4096;$/;"	d
nu	test_stride.asm	/^    nu = 4096;$/;"	d
nu	threadtest.asm	/^    nu = 4096;$/;"	d
nu	usertests.asm	/^    nu = 4096;$/;"	d
nu	wc.asm	/^    nu = 4096;$/;"	d
nu	zombie.asm	/^    nu = 4096;$/;"	d
nulterminate	sh.c	/^nulterminate(struct cmd *cmd)$/;"	f
num	kernel.asm	/^  num = curproc->tf->eax;$/;"	d
num_thread	proc.h	/^  int num_thread;			   \/\/ Number of threads that process made$/;"	m	struct:proc
nunits	cat.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	echo.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	grep.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	hugefiletest.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	init.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	kill.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ln.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	ls.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	mkdir.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	my_userapp.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	rm.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	sh.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	stressfs.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	test_master.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	test_mlfq.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	test_sample.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	test_stride.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	threadtest.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	usertests.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	wc.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nunits	zombie.asm	/^  nunits = (nbytes + sizeof(Header) - 1)\/sizeof(Header) + 1;$/;"	d
nwrite	pipe.c	/^  uint nwrite;    \/\/ number of bytes written$/;"	m	struct:pipe	file:
oemlength	mp.h	/^  ushort oemlength;             \/\/ OEM table length$/;"	m	struct:mpconf
oemtable	mp.h	/^  uint *oemtable;               \/\/ OEM table pointer$/;"	m	struct:mpconf
oesp	x86.h	/^  uint oesp;      \/\/ useless & ignored$/;"	m	struct:trapframe
off	elf.h	/^  uint off;$/;"	m	struct:proghdr
off	file.h	/^  uint off;$/;"	m	struct:file
off_15_0	mmu.h	/^  uint off_15_0 : 16;   \/\/ low 16 bits of offset in segment$/;"	m	struct:gatedesc
off_31_16	mmu.h	/^  uint off_31_16 : 16;  \/\/ high bits of offset in segment$/;"	m	struct:gatedesc
offset	bootblock.asm	/^  offset = (offset \/ SECTSIZE) + 1;$/;"	d
ofile	proc.h	/^  struct file *ofile[NOFILE];  \/\/ Open files$/;"	m	struct:proc	typeref:struct:proc::file
oldbrk	threadtest.asm	/^  oldbrk = sbrk(1000);$/;"	d
oldbrk	usertests.asm	/^  oldbrk = sbrk(0);$/;"	d
oldpgdir	kernel.asm	/^  oldpgdir = curproc->pgdir;$/;"	d
openiputtest	usertests.c	/^openiputtest(void)$/;"	f
opentest	usertests.c	/^opentest(void)$/;"	f
os	cat.asm	/^  os = s;$/;"	d
os	echo.asm	/^  os = s;$/;"	d
os	forktest.asm	/^  os = s;$/;"	d
os	grep.asm	/^  os = s;$/;"	d
os	hugefiletest.asm	/^  os = s;$/;"	d
os	init.asm	/^  os = s;$/;"	d
os	kernel.asm	/^  os = s;$/;"	d
os	kill.asm	/^  os = s;$/;"	d
os	ln.asm	/^  os = s;$/;"	d
os	ls.asm	/^  os = s;$/;"	d
os	mkdir.asm	/^  os = s;$/;"	d
os	my_userapp.asm	/^  os = s;$/;"	d
os	rm.asm	/^  os = s;$/;"	d
os	sh.asm	/^  os = s;$/;"	d
os	stressfs.asm	/^  os = s;$/;"	d
os	test_master.asm	/^  os = s;$/;"	d
os	test_mlfq.asm	/^  os = s;$/;"	d
os	test_sample.asm	/^  os = s;$/;"	d
os	test_stride.asm	/^  os = s;$/;"	d
os	threadtest.asm	/^  os = s;$/;"	d
os	usertests.asm	/^  os = s;$/;"	d
os	wc.asm	/^  os = s;$/;"	d
os	zombie.asm	/^  os = s;$/;"	d
outb	x86.h	/^outb(ushort port, uchar data)$/;"	f
outsl	x86.h	/^outsl(int port, const void *addr, int cnt)$/;"	f
outstanding	log.c	/^  int outstanding; \/\/ how many FS sys calls are executing.$/;"	m	struct:log	file:
outw	x86.h	/^outw(ushort port, ushort data)$/;"	f
p	cat.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	echo.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	grep.asm	/^      p = q+1;$/;"	d
p	grep.asm	/^    p = buf;$/;"	d
p	grep.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	hugefiletest.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	init.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	kernel.asm	/^			 	p = ptable.mlfq[lev][qhead];$/;"	d
p	kernel.asm	/^			p = ptable.mlfq[lev][i];	\/\/ the small loss of last proc will be very large $/;"	d
p	kernel.asm	/^			p = ptable.mlfq[lev][index];		$/;"	d
p	kernel.asm	/^			p = ptable.stride[qhead];$/;"	d
p	kernel.asm	/^	p = myproc();$/;"	d
p	kernel.asm	/^    p = ((bda[0x14]<<8)|bda[0x13])*1024;$/;"	d
p	kernel.asm	/^  p = (char*)PGROUNDUP((uint)vstart);$/;"	d
p	kernel.asm	/^  p = 0;$/;"	d
p	kernel.asm	/^  p = allocproc();$/;"	d
p	kernel.asm	/^  p = c->proc;$/;"	d
p	kernel.asm	/^  p = myproc();						\/\/ Each time total share added, the check of total share is not correctly working.$/;"	d
p	kill.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ln.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	ls.asm	/^    p = buf+strlen(buf);$/;"	d
p	ls.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mkdir.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	mmu.h	/^  uint p : 1;           \/\/ Present$/;"	m	struct:gatedesc
p	mmu.h	/^  uint p : 1;          \/\/ Present$/;"	m	struct:segdesc
p	my_userapp.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	rm.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	sh.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	stressfs.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	test_master.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	test_mlfq.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	test_sample.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	test_stride.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	threadtest.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	usertests.asm	/^  p = sbrk(amt);$/;"	d
p	usertests.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	wc.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
p	zombie.asm	/^  p = sbrk(nu * sizeof(Header));$/;"	d
pa	bootblock.asm	/^    pa = (uchar*)ph->paddr;$/;"	d
pa	kernel.asm	/^      pa = PTE_ADDR(*pte);$/;"	d
pa	kernel.asm	/^    pa = PTE_ADDR(*pte);$/;"	d
pa0	kernel.asm	/^    pa0 = uva2ka(pgdir, (char*)va0);$/;"	d
pad	ioapic.c	/^  uint pad[3];$/;"	m	struct:ioapic	file:
pad	runoff	/^pad()$/;"	f
padding1	mmu.h	/^  ushort padding1;$/;"	m	struct:taskstate
padding1	x86.h	/^  ushort padding1;$/;"	m	struct:trapframe
padding10	mmu.h	/^  ushort padding10;$/;"	m	struct:taskstate
padding2	mmu.h	/^  ushort padding2;$/;"	m	struct:taskstate
padding2	x86.h	/^  ushort padding2;$/;"	m	struct:trapframe
padding3	mmu.h	/^  ushort padding3;$/;"	m	struct:taskstate
padding3	x86.h	/^  ushort padding3;$/;"	m	struct:trapframe
padding4	mmu.h	/^  ushort padding4;$/;"	m	struct:taskstate
padding4	x86.h	/^  ushort padding4;$/;"	m	struct:trapframe
padding5	mmu.h	/^  ushort padding5;$/;"	m	struct:taskstate
padding5	x86.h	/^  ushort padding5;$/;"	m	struct:trapframe
padding6	mmu.h	/^  ushort padding6;$/;"	m	struct:taskstate
padding6	x86.h	/^  ushort padding6;$/;"	m	struct:trapframe
padding7	mmu.h	/^  ushort padding7;$/;"	m	struct:taskstate
padding8	mmu.h	/^  ushort padding8;$/;"	m	struct:taskstate
padding9	mmu.h	/^  ushort padding9;$/;"	m	struct:taskstate
paddr	elf.h	/^  uint paddr;$/;"	m	struct:proghdr
panic	console.c	/^panic(char *s)$/;"	f
panic	sh.c	/^panic(char *s)$/;"	f
panicked	console.c	/^static int panicked = 0;$/;"	v	file:
panicked	kernel.asm	/^  panicked = 1; \/\/ freeze other CPU$/;"	d
parent	proc.h	/^  struct proc *parent;         \/\/ Parent process$/;"	m	struct:proc	typeref:struct:proc::proc
parseblock	sh.c	/^parseblock(char **ps, char *es)$/;"	f
parsecmd	sh.c	/^parsecmd(char *s)$/;"	f
parseexec	sh.c	/^parseexec(char **ps, char *es)$/;"	f
parseline	sh.c	/^parseline(char **ps, char *es)$/;"	f
parsepipe	sh.c	/^parsepipe(char **ps, char *es)$/;"	f
parseredirs	sh.c	/^parseredirs(struct cmd *cmd, char **ps, char *es)$/;"	f
pattern	grep.asm	/^  pattern = argv[1];$/;"	d
pcmd	sh.asm	/^    pcmd = (struct pipecmd*)cmd;$/;"	d
pcs	spinlock.h	/^  uint pcs[10];      \/\/ The call stack (an array of program counters)$/;"	m	struct:spinlock
pde	kernel.asm	/^  pde = &pgdir[PDX(va)];$/;"	d
pde_t	kernel.asm	/^pde_t entrypgdir[];  \/\/ For entry.S$/;"	l
pde_t	types.h	/^typedef uint pde_t;$/;"	t
peek	sh.c	/^peek(char **ps, char *es, char *toks)$/;"	f
perm	vm.c	/^  int perm;$/;"	m	struct:kmap	file:
pgdir	kernel.asm	/^  pgdir = 0;$/;"	d
pgdir	proc.h	/^  pde_t* pgdir;                \/\/ Page table$/;"	m	struct:proc
pgtab	kernel.asm	/^    pgtab = (pte_t*)P2V(PTE_ADDR(*pde));$/;"	d
ph	bootblock.asm	/^  ph = (struct proghdr*)((uchar*)elf + elf->phoff);$/;"	d
phentsize	elf.h	/^  ushort phentsize;$/;"	m	struct:elfhdr
phnum	elf.h	/^  ushort phnum;$/;"	m	struct:elfhdr
phoff	elf.h	/^  uint phoff;$/;"	m	struct:elfhdr
phys_end	vm.c	/^  uint phys_end;$/;"	m	struct:kmap	file:
phys_start	vm.c	/^  uint phys_start;$/;"	m	struct:kmap	file:
physaddr	mp.h	/^  void *physaddr;               \/\/ phys addr of MP config table$/;"	m	struct:mp
picinit	picirq.c	/^picinit(void)$/;"	f
pid	forktest.asm	/^    pid = fork();$/;"	d
pid	init.asm	/^    pid = fork();$/;"	d
pid	kernel.asm	/^        pid = p->pid;$/;"	d
pid	kernel.asm	/^  pid = np->pid;$/;"	d
pid	proc.h	/^  int pid;                     \/\/ Process ID$/;"	m	struct:proc
pid	sh.asm	/^  pid = fork();$/;"	d
pid	sleeplock.h	/^  int pid;           \/\/ Process holding lock$/;"	m	struct:sleeplock
pid	test_master.asm	/^    pid = fork();$/;"	d
pid	test_sample.asm	/^      pid = fork();$/;"	d
pid	usertests.asm	/^    pid = fork();$/;"	d
pid	usertests.asm	/^  pid = fork();$/;"	d
pid1	usertests.asm	/^  pid1 = fork();$/;"	d
pid2	usertests.asm	/^  pid2 = fork();$/;"	d
pid3	usertests.asm	/^  pid3 = fork();$/;"	d
pinit	proc.c	/^pinit(void)$/;"	f
pipe	file.h	/^  struct pipe *pipe;$/;"	m	struct:file	typeref:struct:file::pipe
pipe	pipe.c	/^struct pipe {$/;"	s	file:
pipe1	usertests.c	/^pipe1(void)$/;"	f
pipealloc	pipe.c	/^pipealloc(struct file **f0, struct file **f1)$/;"	f
pipeclose	pipe.c	/^pipeclose(struct pipe *p, int writable)$/;"	f
pipecmd	sh.c	/^pipecmd(struct cmd *left, struct cmd *right)$/;"	f
pipecmd	sh.c	/^struct pipecmd {$/;"	s	file:
piperead	pipe.c	/^piperead(struct pipe *p, char *addr, int n)$/;"	f
pipetest	threadtest.c	/^pipetest(void)$/;"	f
pipethreadmain	threadtest.c	/^pipethreadmain(void *arg)$/;"	f
pipewrite	pipe.c	/^pipewrite(struct pipe *p, char *addr, int n)$/;"	f
pop_queue	proc.c	/^pop_queue(struct proc* p) {$/;"	f
pop_stride	proc.c	/^pop_stride(struct proc* p) {$/;"	f
popcli	spinlock.c	/^popcli(void)$/;"	f
port	usertests.asm	/^    port = RTC_ADDR;$/;"	d
port	usertests.asm	/^    port = RTC_DATA;$/;"	d
pos	kernel.asm	/^  pos = inb(CRTPORT+1) << 8;$/;"	d
ppid	usertests.asm	/^    ppid = getpid();$/;"	d
ppid	usertests.asm	/^  ppid = getpid();$/;"	d
preempt	usertests.c	/^preempt(void)$/;"	f
prev	buf.h	/^  struct buf *prev; \/\/ LRU cache list$/;"	m	struct:buf	typeref:struct:buf::buf
printf	forktest.c	/^printf(int fd, char *s, ...)$/;"	f
printf	printf.c	/^printf(int fd, char *fmt, ...)$/;"	f
printint	console.c	/^printint(int xx, int base, int sign)$/;"	f	file:
printint	printf.c	/^printint(int fd, int xx, int base, int sgn)$/;"	f	file:
printk_str	prac_syscall.c	/^int printk_str(char *str){$/;"	f
proc	kernel.asm	/^      proc = (struct mpproc*)p;$/;"	d
proc	proc.h	/^  struct proc *proc;           \/\/ The process running on this cpu or null$/;"	m	struct:cpu	typeref:struct:cpu::proc
proc	proc.h	/^struct proc {$/;"	s
proc	ptable.h	/^  struct proc proc[NPROC];$/;"	m	struct:__anon3	typeref:struct:__anon3::proc
procdump	proc.c	/^procdump(void)$/;"	f
procstate	proc.h	/^enum procstate { UNUSED, EMBRYO, SLEEPING, RUNNABLE, RUNNING, ZOMBIE };$/;"	g
product	mp.h	/^  uchar product[20];            \/\/ product id$/;"	m	struct:mpconf
proghdr	elf.h	/^struct proghdr {$/;"	s
ptable	ptable.h	/^} ptable;							\/\/ so that it turns to stride scheduling, isNewStride becomes$/;"	v	typeref:struct:__anon3
pte	kernel.asm	/^    pte = walkpgdir(pgdir, (char*)a, 0);$/;"	d
pte	kernel.asm	/^  pte = walkpgdir(pgdir, uva, 0);$/;"	d
pte_t	mmu.h	/^typedef uint pte_t;$/;"	t
ptr	umalloc.c	/^    union header *ptr;$/;"	m	struct:header::__anon9	typeref:union:header::__anon9::header	file:
push_queue	proc.c	/^push_queue(struct proc* p, int lev) {$/;"	f
push_stride	proc.c	/^push_stride(struct proc* p) {$/;"	f
pushcli	spinlock.c	/^pushcli(void)$/;"	f
putc	printf.c	/^putc(int fd, char c)$/;"	f	file:
q_index	proc.h	/^  int q_index;				   \/\/ index of queue both MLFQ and Stride$/;"	m	struct:proc
q_lev	proc.h	/^  int q_lev;				   \/\/ level of MLFQ of process$/;"	m	struct:proc
qhead	kernel.asm	/^						qhead = -1;$/;"	d
qhead	kernel.asm	/^				qhead = -1;$/;"	d
qnext	buf.h	/^  struct buf *qnext; \/\/ disk queue$/;"	m	struct:buf	typeref:struct:buf::buf
r	cat.asm	/^  r = fstat(fd, st);$/;"	d
r	console.c	/^  uint r;  \/\/ Read index$/;"	m	struct:__anon8	file:
r	echo.asm	/^  r = fstat(fd, st);$/;"	d
r	forktest.asm	/^  r = fstat(fd, st);$/;"	d
r	grep.asm	/^  r = fstat(fd, st);$/;"	d
r	hugefiletest.asm	/^  r = fstat(fd, st);$/;"	d
r	init.asm	/^  r = fstat(fd, st);$/;"	d
r	kernel.asm	/^  r = (struct run*)v;$/;"	d
r	kernel.asm	/^  r = kmem.freelist;$/;"	d
r	kernel.asm	/^  r = lk->locked;$/;"	d
r	kill.asm	/^  r = fstat(fd, st);$/;"	d
r	ln.asm	/^  r = fstat(fd, st);$/;"	d
r	ls.asm	/^  r = fstat(fd, st);$/;"	d
r	mkdir.asm	/^  r = fstat(fd, st);$/;"	d
r	my_userapp.asm	/^  r = fstat(fd, st);$/;"	d
r	rm.asm	/^  r = fstat(fd, st);$/;"	d
r	sh.asm	/^  r = fstat(fd, st);$/;"	d
r	stressfs.asm	/^  r = fstat(fd, st);$/;"	d
r	test_master.asm	/^  r = fstat(fd, st);$/;"	d
r	test_mlfq.asm	/^  r = fstat(fd, st);$/;"	d
r	test_sample.asm	/^  r = fstat(fd, st);$/;"	d
r	test_stride.asm	/^  r = fstat(fd, st);$/;"	d
r	threadtest.asm	/^  r = fstat(fd, st);$/;"	d
r	usertests.asm	/^  r = fstat(fd, st);$/;"	d
r	wc.asm	/^  r = fstat(fd, st);$/;"	d
r	zombie.asm	/^  r = fstat(fd, st);$/;"	d
racingtest	threadtest.c	/^racingtest(void)$/;"	f
racingthreadmain	threadtest.c	/^racingthreadmain(void *arg)$/;"	f
rand	usertests.c	/^rand()$/;"	f
randstate	usertests.asm	/^  randstate = randstate * 1664525 + 1013904223;$/;"	d
randstate	usertests.c	/^unsigned long randstate = 1;$/;"	v
rcmd	sh.asm	/^    rcmd = (struct redircmd*)cmd;$/;"	d
rcr2	x86.h	/^rcr2(void)$/;"	f
read	file.h	/^  int (*read)(struct inode*, char*, int);$/;"	m	struct:devsw
read_head	log.c	/^read_head(void)$/;"	f	file:
readable	file.h	/^  char readable;$/;"	m	struct:file
readeflags	x86.h	/^readeflags(void)$/;"	f
readi	fs.c	/^readi(struct inode *ip, char *dst, uint off, uint n)$/;"	f
readopen	pipe.c	/^  int readopen;   \/\/ read fd is still open$/;"	m	struct:pipe	file:
readsb	fs.c	/^readsb(int dev, struct superblock *sb)$/;"	f
readsect	bootmain.c	/^readsect(void *dst, uint offset)$/;"	f
readseg	bootmain.c	/^readseg(uchar* pa, uint count, uint offset)$/;"	f
recover_from_log	log.c	/^recover_from_log(void)$/;"	f	file:
redircmd	sh.c	/^redircmd(struct cmd *subcmd, char *file, char *efile, int mode, int fd)$/;"	f
redircmd	sh.c	/^struct redircmd {$/;"	s	file:
ref	file.h	/^  int ref;            \/\/ Reference count$/;"	m	struct:inode
ref	file.h	/^  int ref; \/\/ reference count$/;"	m	struct:file
refcnt	buf.h	/^  uint refcnt;$/;"	m	struct:buf
reg	ioapic.c	/^  uint reg;$/;"	m	struct:ioapic	file:
release	spinlock.c	/^release(struct spinlock *lk)$/;"	f
releasesleep	sleeplock.c	/^releasesleep(struct sleeplock *lk)$/;"	f
reserved	mp.h	/^  uchar reserved;$/;"	m	struct:mpconf
reserved	mp.h	/^  uchar reserved[3];$/;"	m	struct:mp
reserved	mp.h	/^  uchar reserved[8];$/;"	m	struct:mpproc
result	proc.h	/^  int result;				   \/\/ parameter to deliver the return value to main thread$/;"	m	struct:proc
ret	sh.asm	/^      ret = '+';$/;"	d
ret	sh.asm	/^    ret = 'a';$/;"	d
ret	sh.asm	/^    ret = parseredirs(ret, ps, es);$/;"	d
ret	sh.asm	/^  ret = *s;$/;"	d
ret	sh.asm	/^  ret = execcmd();$/;"	d
ret	sh.asm	/^  ret = parseredirs(ret, ps, es);$/;"	d
ret	threadtest.asm	/^      ret = testfunc[i]();$/;"	d
ret	threadtest.asm	/^    ret = 0;$/;"	d
ret_val	my_userapp.asm	/^	ret_val = myfunction(buf);$/;"	d
return	kernel.asm	/^  return d;$/;"	d
retval	kernel.asm	/^	retval = (void*) n;$/;"	d
retval	kernel.asm	/^	retval = (void**) n;$/;"	d
right	sh.c	/^  struct cmd *right;$/;"	m	struct:listcmd	typeref:struct:listcmd::cmd	file:
right	sh.c	/^  struct cmd *right;$/;"	m	struct:pipecmd	typeref:struct:pipecmd::cmd	file:
rinode	mkfs.c	/^rinode(uint inum, struct dinode *ip)$/;"	f
rmdot	usertests.c	/^rmdot(void)$/;"	f
rsect	mkfs.c	/^rsect(uint sec, void *buf)$/;"	f
rsv1	mmu.h	/^  uint rsv1 : 1;       \/\/ Reserved$/;"	m	struct:segdesc
rsv1	mmu.h	/^  uint rsv1 : 3;        \/\/ reserved(should be zero I guess)$/;"	m	struct:gatedesc
rtcdate	date.h	/^struct rtcdate {$/;"	s
rtick	proc.h	/^  int rtick;			   	   \/\/ tick for check whether we should call yield$/;"	m	struct:proc
rtick_for_boost	proc.h	/^  int rtick_for_boost;		   \/\/ total tick proc run in one boosting cycle$/;"	m	struct:proc
run	kalloc.c	/^struct run {$/;"	s	file:
runcmd	sh.c	/^runcmd(struct cmd *cmd)$/;"	f
s	cat.asm	/^          s = "(null)";$/;"	d
s	cat.asm	/^        s = (char*)*ap;$/;"	d
s	echo.asm	/^          s = "(null)";$/;"	d
s	echo.asm	/^        s = (char*)*ap;$/;"	d
s	grep.asm	/^          s = "(null)";$/;"	d
s	grep.asm	/^        s = (char*)*ap;$/;"	d
s	hugefiletest.asm	/^          s = "(null)";$/;"	d
s	hugefiletest.asm	/^        s = (char*)*ap;$/;"	d
s	init.asm	/^          s = "(null)";$/;"	d
s	init.asm	/^        s = (char*)*ap;$/;"	d
s	kernel.asm	/^        s = "(null)";$/;"	d
s	kernel.asm	/^  s = path;$/;"	d
s	kernel.asm	/^  s = src;$/;"	d
s	kill.asm	/^          s = "(null)";$/;"	d
s	kill.asm	/^        s = (char*)*ap;$/;"	d
s	ln.asm	/^          s = "(null)";$/;"	d
s	ln.asm	/^        s = (char*)*ap;$/;"	d
s	ls.asm	/^          s = "(null)";$/;"	d
s	ls.asm	/^        s = (char*)*ap;$/;"	d
s	mkdir.asm	/^          s = "(null)";$/;"	d
s	mkdir.asm	/^        s = (char*)*ap;$/;"	d
s	mmu.h	/^  uint s : 1;           \/\/ must be 0 (system)$/;"	m	struct:gatedesc
s	mmu.h	/^  uint s : 1;          \/\/ 0 = system, 1 = application$/;"	m	struct:segdesc
s	my_userapp.asm	/^          s = "(null)";$/;"	d
s	my_userapp.asm	/^        s = (char*)*ap;$/;"	d
s	rm.asm	/^          s = "(null)";$/;"	d
s	rm.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^          s = "(null)";$/;"	d
s	sh.asm	/^        s = (char*)*ap;$/;"	d
s	sh.asm	/^  s = *ps;$/;"	d
s	stressfs.asm	/^          s = "(null)";$/;"	d
s	stressfs.asm	/^        s = (char*)*ap;$/;"	d
s	test_master.asm	/^          s = "(null)";$/;"	d
s	test_master.asm	/^        s = (char*)*ap;$/;"	d
s	test_mlfq.asm	/^          s = "(null)";$/;"	d
s	test_mlfq.asm	/^        s = (char*)*ap;$/;"	d
s	test_sample.asm	/^          s = "(null)";$/;"	d
s	test_sample.asm	/^        s = (char*)*ap;$/;"	d
s	test_stride.asm	/^          s = "(null)";$/;"	d
s	test_stride.asm	/^        s = (char*)*ap;$/;"	d
s	threadtest.asm	/^          s = "(null)";$/;"	d
s	threadtest.asm	/^        s = (char*)*ap;$/;"	d
s	umalloc.c	/^  } s;$/;"	m	union:header	typeref:struct:header::__anon9	file:
s	usertests.asm	/^          s = "(null)";$/;"	d
s	usertests.asm	/^        s = (char*)*ap;$/;"	d
s	wc.asm	/^          s = "(null)";$/;"	d
s	wc.asm	/^        s = (char*)*ap;$/;"	d
s	zombie.asm	/^          s = "(null)";$/;"	d
s	zombie.asm	/^        s = (char*)*ap;$/;"	d
s1	kernel.asm	/^  s1 = v1;$/;"	d
s2	kernel.asm	/^  s2 = v2;$/;"	d
safestrcpy	string.c	/^safestrcpy(char *s, const char *t, int n)$/;"	f
sb	fs.c	/^struct superblock sb; $/;"	v	typeref:struct:superblock
sb	kernel.asm	/^  sb = cmos_read(CMOS_STATB);$/;"	d
sb	mkfs.c	/^struct superblock sb;$/;"	v	typeref:struct:superblock
sbrktest	threadtest.c	/^sbrktest(void)$/;"	f
sbrktest	usertests.c	/^sbrktest(void)$/;"	f
sbrkthreadmain	threadtest.c	/^sbrkthreadmain(void *arg)$/;"	f
sched	proc.c	/^sched(void)$/;"	f
schedule	kernel.asm	/^schedule:$/;"	l
scheduler	proc.c	/^scheduler(void)$/;"	f
scheduler	proc.h	/^  struct context *scheduler;   \/\/ swtch() here to enter scheduler$/;"	m	struct:cpu	typeref:struct:cpu::context
second	date.h	/^  uint second;$/;"	m	struct:rtcdate
segdesc	mmu.h	/^struct segdesc {$/;"	s
seginit	vm.c	/^seginit(void)$/;"	f
seq	usertests.asm	/^  seq = 0;$/;"	d
set_cpu_share	proc.c	/^set_cpu_share(int share)$/;"	f
setupkvm	vm.c	/^setupkvm(void)$/;"	f
sh	proc.h	/^  int sh;				  	   \/\/ cpu share of process, MLFQ is time allotment at each level$/;"	m	struct:proc
sharedfd	usertests.c	/^sharedfd(void)$/;"	f
shentsize	elf.h	/^  ushort shentsize;$/;"	m	struct:elfhdr
shiftcode	kbd.h	/^static uchar shiftcode[256] =$/;"	v
shiftmap	kbd.h	/^static uchar shiftmap[256] =$/;"	v
shnum	elf.h	/^  ushort shnum;$/;"	m	struct:elfhdr
shoff	elf.h	/^  uint shoff;$/;"	m	struct:elfhdr
shstrndx	elf.h	/^  ushort shstrndx;$/;"	m	struct:elfhdr
signature	mp.h	/^  uchar signature[4];           \/\/ "PCMP"$/;"	m	struct:mpconf
signature	mp.h	/^  uchar signature[4];           \/\/ "_MP_"$/;"	m	struct:mp
signature	mp.h	/^  uchar signature[4];           \/\/ CPU signature$/;"	m	struct:mpproc
size	file.h	/^  uint size;$/;"	m	struct:inode
size	fs.h	/^  uint size;            \/\/ Size of file (bytes)$/;"	m	struct:dinode
size	fs.h	/^  uint size;         \/\/ Size of file system image (blocks)$/;"	m	struct:superblock
size	log.c	/^  int size;$/;"	m	struct:log	file:
size	stat.h	/^  uint size;   \/\/ Size of file in bytes$/;"	m	struct:stat
size	umalloc.c	/^    uint size;$/;"	m	struct:header::__anon9	file:
skipelem	fs.c	/^skipelem(char *path, char *name)$/;"	f	file:
sleep	proc.c	/^sleep(void *chan, struct spinlock *lk)$/;"	f
sleeplock	sleeplock.h	/^struct sleeplock {$/;"	s
sleeptest	threadtest.c	/^sleeptest(void)$/;"	f
sleepthreadmain	threadtest.c	/^sleepthreadmain(void *arg)$/;"	f
sp	kernel.asm	/^	sp = sz;$/;"	d
sp	kernel.asm	/^    sp = (sp - (strlen(argv[argc]) + 1)) & ~3;$/;"	d
sp	kernel.asm	/^  sp = p->kstack + KSTACKSIZE;$/;"	d
sp	kernel.asm	/^  sp = sz;$/;"	d
specrev	mp.h	/^  uchar specrev;                \/\/ [14]$/;"	m	struct:mp
spin	bootasm.S	/^spin:$/;"	l
spin	bootblock.asm	/^spin:$/;"	l
spin	entryother.S	/^spin:$/;"	l
spin	entryother.asm	/^spin:$/;"	l
spinlock	spinlock.h	/^struct spinlock {$/;"	s
src	cat.asm	/^  src = vsrc;$/;"	d
src	echo.asm	/^  src = vsrc;$/;"	d
src	forktest.asm	/^  src = vsrc;$/;"	d
src	grep.asm	/^  src = vsrc;$/;"	d
src	hugefiletest.asm	/^  src = vsrc;$/;"	d
src	init.asm	/^  src = vsrc;$/;"	d
src	kill.asm	/^  src = vsrc;$/;"	d
src	ln.asm	/^  src = vsrc;$/;"	d
src	ls.asm	/^  src = vsrc;$/;"	d
src	mkdir.asm	/^  src = vsrc;$/;"	d
src	my_userapp.asm	/^  src = vsrc;$/;"	d
src	rm.asm	/^  src = vsrc;$/;"	d
src	sh.asm	/^  src = vsrc;$/;"	d
src	stressfs.asm	/^  src = vsrc;$/;"	d
src	test_master.asm	/^  src = vsrc;$/;"	d
src	test_mlfq.asm	/^  src = vsrc;$/;"	d
src	test_sample.asm	/^  src = vsrc;$/;"	d
src	test_stride.asm	/^  src = vsrc;$/;"	d
src	threadtest.asm	/^  src = vsrc;$/;"	d
src	usertests.asm	/^  src = vsrc;$/;"	d
src	wc.asm	/^  src = vsrc;$/;"	d
src	zombie.asm	/^  src = vsrc;$/;"	d
ss	mmu.h	/^  ushort ss;$/;"	m	struct:taskstate
ss	x86.h	/^  ushort ss;$/;"	m	struct:trapframe
ss0	mmu.h	/^  ushort ss0;        \/\/   after an increase in privilege level$/;"	m	struct:taskstate
ss1	mmu.h	/^  ushort ss1;$/;"	m	struct:taskstate
ss2	mmu.h	/^  ushort ss2;$/;"	m	struct:taskstate
st	kernel.asm	/^  st = inb(KBSTATP);$/;"	d
stack	kernel.asm	/^    stack = kalloc();$/;"	d
start	bootasm.S	/^start:$/;"	l
start	bootblock.asm	/^start:$/;"	l
start	entryother.S	/^start:$/;"	l
start	entryother.asm	/^start:$/;"	l
start	initcode.S	/^start:$/;"	l
start	initcode.asm	/^start:$/;"	l
start	log.c	/^  int start;$/;"	m	struct:log	file:
start	threadtest.asm	/^    start = atoi(argv[1]);$/;"	d
start32	bootasm.S	/^start32:$/;"	l
start32	bootblock.asm	/^start32:$/;"	l
start32	entryother.S	/^start32:$/;"	l
start32	entryother.asm	/^start32:$/;"	l
start_routine	kernel.asm	/^	start_routine = (void*) n;$/;"	d
start_tick	test_stride.asm	/^  start_tick = uptime();$/;"	d
started	proc.h	/^  volatile uint started;       \/\/ Has the CPU started?$/;"	m	struct:cpu
startothers	main.c	/^startothers(void)$/;"	f	file:
stat	mkfs.c	8;"	d	file:
stat	stat.h	/^struct stat {$/;"	s
stat	ulib.c	/^stat(char *n, struct stat *st)$/;"	f
state	cat.asm	/^        state = '%';$/;"	d
state	cat.asm	/^      state = 0;$/;"	d
state	cat.asm	/^  state = 0;$/;"	d
state	echo.asm	/^        state = '%';$/;"	d
state	echo.asm	/^      state = 0;$/;"	d
state	echo.asm	/^  state = 0;$/;"	d
state	grep.asm	/^        state = '%';$/;"	d
state	grep.asm	/^      state = 0;$/;"	d
state	grep.asm	/^  state = 0;$/;"	d
state	hugefiletest.asm	/^        state = '%';$/;"	d
state	hugefiletest.asm	/^      state = 0;$/;"	d
state	hugefiletest.asm	/^  state = 0;$/;"	d
state	init.asm	/^        state = '%';$/;"	d
state	init.asm	/^      state = 0;$/;"	d
state	init.asm	/^  state = 0;$/;"	d
state	kernel.asm	/^      state = "???";$/;"	d
state	kernel.asm	/^      state = states[p->state];$/;"	d
state	kill.asm	/^        state = '%';$/;"	d
state	kill.asm	/^      state = 0;$/;"	d
state	kill.asm	/^  state = 0;$/;"	d
state	ln.asm	/^        state = '%';$/;"	d
state	ln.asm	/^      state = 0;$/;"	d
state	ln.asm	/^  state = 0;$/;"	d
state	ls.asm	/^        state = '%';$/;"	d
state	ls.asm	/^      state = 0;$/;"	d
state	ls.asm	/^  state = 0;$/;"	d
state	mkdir.asm	/^        state = '%';$/;"	d
state	mkdir.asm	/^      state = 0;$/;"	d
state	mkdir.asm	/^  state = 0;$/;"	d
state	my_userapp.asm	/^        state = '%';$/;"	d
state	my_userapp.asm	/^      state = 0;$/;"	d
state	my_userapp.asm	/^  state = 0;$/;"	d
state	proc.h	/^  enum procstate state;        \/\/ Process state$/;"	m	struct:proc	typeref:enum:proc::procstate
state	rm.asm	/^        state = '%';$/;"	d
state	rm.asm	/^      state = 0;$/;"	d
state	rm.asm	/^  state = 0;$/;"	d
state	sh.asm	/^        state = '%';$/;"	d
state	sh.asm	/^      state = 0;$/;"	d
state	sh.asm	/^  state = 0;$/;"	d
state	stressfs.asm	/^        state = '%';$/;"	d
state	stressfs.asm	/^      state = 0;$/;"	d
state	stressfs.asm	/^  state = 0;$/;"	d
state	test_master.asm	/^        state = '%';$/;"	d
state	test_master.asm	/^      state = 0;$/;"	d
state	test_master.asm	/^  state = 0;$/;"	d
state	test_mlfq.asm	/^        state = '%';$/;"	d
state	test_mlfq.asm	/^      state = 0;$/;"	d
state	test_mlfq.asm	/^  state = 0;$/;"	d
state	test_sample.asm	/^        state = '%';$/;"	d
state	test_sample.asm	/^      state = 0;$/;"	d
state	test_sample.asm	/^  state = 0;$/;"	d
state	test_stride.asm	/^        state = '%';$/;"	d
state	test_stride.asm	/^      state = 0;$/;"	d
state	test_stride.asm	/^  state = 0;$/;"	d
state	threadtest.asm	/^        state = '%';$/;"	d
state	threadtest.asm	/^      state = 0;$/;"	d
state	threadtest.asm	/^  state = 0;$/;"	d
state	usertests.asm	/^        state = '%';$/;"	d
state	usertests.asm	/^      state = 0;$/;"	d
state	usertests.asm	/^  state = 0;$/;"	d
state	wc.asm	/^        state = '%';$/;"	d
state	wc.asm	/^      state = 0;$/;"	d
state	wc.asm	/^  state = 0;$/;"	d
state	zombie.asm	/^        state = '%';$/;"	d
state	zombie.asm	/^      state = 0;$/;"	d
state	zombie.asm	/^  state = 0;$/;"	d
stati	fs.c	/^stati(struct inode *ip, struct stat *st)$/;"	f
static	bootblock.asm	/^static inline uchar$/;"	l
static	bootblock.asm	/^static inline void$/;"	l
static	cat.asm	/^static Header *freep;$/;"	l
static	cat.asm	/^static Header base;$/;"	l
static	cat.asm	/^static Header*$/;"	l
static	cat.asm	/^static inline void$/;"	l
static	cat.asm	/^static void$/;"	l
static	echo.asm	/^static Header *freep;$/;"	l
static	echo.asm	/^static Header base;$/;"	l
static	echo.asm	/^static Header*$/;"	l
static	echo.asm	/^static inline void$/;"	l
static	echo.asm	/^static void$/;"	l
static	forktest.asm	/^static inline void$/;"	l
static	grep.asm	/^static Header *freep;$/;"	l
static	grep.asm	/^static Header base;$/;"	l
static	grep.asm	/^static Header*$/;"	l
static	grep.asm	/^static inline void$/;"	l
static	grep.asm	/^static void$/;"	l
static	hugefiletest.asm	/^static Header *freep;$/;"	l
static	hugefiletest.asm	/^static Header base;$/;"	l
static	hugefiletest.asm	/^static Header*$/;"	l
static	hugefiletest.asm	/^static inline void$/;"	l
static	hugefiletest.asm	/^static void$/;"	l
static	init.asm	/^static Header *freep;$/;"	l
static	init.asm	/^static Header base;$/;"	l
static	init.asm	/^static Header*$/;"	l
static	init.asm	/^static inline void$/;"	l
static	init.asm	/^static void$/;"	l
static	kernel.asm	/^static char*$/;"	l
static	kernel.asm	/^static inline uchar$/;"	l
static	kernel.asm	/^static inline uint$/;"	l
static	kernel.asm	/^static inline void$/;"	l
static	kernel.asm	/^static int uart;    \/\/ is there a uart?$/;"	l
static	kernel.asm	/^static int$/;"	l
static	kernel.asm	/^static pte_t *$/;"	l
static	kernel.asm	/^static struct buf*$/;"	t
static	kernel.asm	/^static struct inode*$/;"	t
static	kernel.asm	/^static struct mp*$/;"	t
static	kernel.asm	/^static struct mpconf*$/;"	t
static	kernel.asm	/^static struct proc*$/;"	t
static	kernel.asm	/^static uchar$/;"	l
static	kernel.asm	/^static uint cmos_read(uint reg)$/;"	l
static	kernel.asm	/^static uint$/;"	l
static	kernel.asm	/^static ushort *crt = (ushort*)P2V(0xb8000);  \/\/ CGA memory$/;"	l
static	kernel.asm	/^static void commit();$/;"	l
static	kernel.asm	/^static void fill_rtcdate(struct rtcdate *r)$/;"	l
static	kernel.asm	/^static void idestart(struct buf*);$/;"	l
static	kernel.asm	/^static void recover_from_log(void);$/;"	l
static	kernel.asm	/^static void wakeup1(void *chan);$/;"	l
static	kernel.asm	/^static void$/;"	l
static	kill.asm	/^static Header *freep;$/;"	l
static	kill.asm	/^static Header base;$/;"	l
static	kill.asm	/^static Header*$/;"	l
static	kill.asm	/^static inline void$/;"	l
static	kill.asm	/^static void$/;"	l
static	ln.asm	/^static Header *freep;$/;"	l
static	ln.asm	/^static Header base;$/;"	l
static	ln.asm	/^static Header*$/;"	l
static	ln.asm	/^static inline void$/;"	l
static	ln.asm	/^static void$/;"	l
static	ls.asm	/^static Header *freep;$/;"	l
static	ls.asm	/^static Header base;$/;"	l
static	ls.asm	/^static Header*$/;"	l
static	ls.asm	/^static inline void$/;"	l
static	ls.asm	/^static void$/;"	l
static	mkdir.asm	/^static Header *freep;$/;"	l
static	mkdir.asm	/^static Header base;$/;"	l
static	mkdir.asm	/^static Header*$/;"	l
static	mkdir.asm	/^static inline void$/;"	l
static	mkdir.asm	/^static void$/;"	l
static	my_userapp.asm	/^static Header *freep;$/;"	l
static	my_userapp.asm	/^static Header base;$/;"	l
static	my_userapp.asm	/^static Header*$/;"	l
static	my_userapp.asm	/^static inline void$/;"	l
static	my_userapp.asm	/^static void$/;"	l
static	rm.asm	/^static Header *freep;$/;"	l
static	rm.asm	/^static Header base;$/;"	l
static	rm.asm	/^static Header*$/;"	l
static	rm.asm	/^static inline void$/;"	l
static	rm.asm	/^static void$/;"	l
static	sh.asm	/^static Header *freep;$/;"	l
static	sh.asm	/^static Header base;$/;"	l
static	sh.asm	/^static Header*$/;"	l
static	sh.asm	/^static inline void$/;"	l
static	sh.asm	/^static void$/;"	l
static	stressfs.asm	/^static Header *freep;$/;"	l
static	stressfs.asm	/^static Header base;$/;"	l
static	stressfs.asm	/^static Header*$/;"	l
static	stressfs.asm	/^static inline void$/;"	l
static	stressfs.asm	/^static void$/;"	l
static	test_master.asm	/^static Header *freep;$/;"	l
static	test_master.asm	/^static Header base;$/;"	l
static	test_master.asm	/^static Header*$/;"	l
static	test_master.asm	/^static inline void$/;"	l
static	test_master.asm	/^static void$/;"	l
static	test_mlfq.asm	/^static Header *freep;$/;"	l
static	test_mlfq.asm	/^static Header base;$/;"	l
static	test_mlfq.asm	/^static Header*$/;"	l
static	test_mlfq.asm	/^static inline void$/;"	l
static	test_mlfq.asm	/^static void$/;"	l
static	test_sample.asm	/^static Header *freep;$/;"	l
static	test_sample.asm	/^static Header base;$/;"	l
static	test_sample.asm	/^static Header*$/;"	l
static	test_sample.asm	/^static inline void$/;"	l
static	test_sample.asm	/^static void$/;"	l
static	test_stride.asm	/^static Header *freep;$/;"	l
static	test_stride.asm	/^static Header base;$/;"	l
static	test_stride.asm	/^static Header*$/;"	l
static	test_stride.asm	/^static inline void$/;"	l
static	test_stride.asm	/^static void$/;"	l
static	threadtest.asm	/^static Header *freep;$/;"	l
static	threadtest.asm	/^static Header base;$/;"	l
static	threadtest.asm	/^static Header*$/;"	l
static	threadtest.asm	/^static inline void$/;"	l
static	threadtest.asm	/^static void$/;"	l
static	usertests.asm	/^static Header *freep;$/;"	l
static	usertests.asm	/^static Header base;$/;"	l
static	usertests.asm	/^static Header*$/;"	l
static	usertests.asm	/^static inline void$/;"	l
static	usertests.asm	/^static void$/;"	l
static	wc.asm	/^static Header *freep;$/;"	l
static	wc.asm	/^static Header base;$/;"	l
static	wc.asm	/^static Header*$/;"	l
static	wc.asm	/^static inline void$/;"	l
static	wc.asm	/^static void$/;"	l
static	zombie.asm	/^static Header *freep;$/;"	l
static	zombie.asm	/^static Header base;$/;"	l
static	zombie.asm	/^static Header*$/;"	l
static	zombie.asm	/^static inline void$/;"	l
static	zombie.asm	/^static void$/;"	l
static_assert	mkfs.c	15;"	d	file:
stdout	usertests.c	/^int stdout = 1;$/;"	v
sti	x86.h	/^sti(void)$/;"	f
stosb	x86.h	/^stosb(void *addr, int data, int cnt)$/;"	f
stosl	x86.h	/^stosl(void *addr, int data, int cnt)$/;"	f
strchr	ulib.c	/^strchr(const char *s, char c)$/;"	f
strcmp	ulib.c	/^strcmp(const char *p, const char *q)$/;"	f
strcpy	ulib.c	/^strcpy(char *s, char *t)$/;"	f
stresstest	threadtest.c	/^stresstest(void)$/;"	f
stressthreadmain	threadtest.c	/^stressthreadmain(void *arg)$/;"	f
stride	ptable.h	/^  struct proc* stride[NPROC];		\/\/ queue for stride$/;"	m	struct:__anon3	typeref:struct:__anon3::proc
stridetest1	threadtest.c	/^stridetest1(void)$/;"	f
stridetest2	threadtest.c	/^stridetest2(void)$/;"	f
stridethreadmain	threadtest.c	/^stridethreadmain(void *arg)$/;"	f
strlen	string.c	/^strlen(const char *s)$/;"	f
strlen	ulib.c	/^strlen(char *s)$/;"	f
strncmp	string.c	/^strncmp(const char *p, const char *q, uint n)$/;"	f
strncpy	string.c	/^strncpy(char *s, const char *t, int n)$/;"	f
struct	kernel.asm	/^	struct proc *curproc = myproc();$/;"	l
struct	kernel.asm	/^	struct proc *p;$/;"	l
struct	kernel.asm	/^  struct proc *curproc = myproc();$/;"	l
struct	kernel.asm	/^  struct proc *np;$/;"	l
struct	kernel.asm	/^  struct proc *p = myproc();$/;"	l
struct	kernel.asm	/^  struct proc *p;$/;"	l
subdir	usertests.c	/^subdir(void)$/;"	f
sum	kernel.asm	/^  sum = 0;$/;"	d
sum	mp.c	/^sum(uchar *addr, int len)$/;"	f	file:
superblock	fs.h	/^struct superblock {$/;"	s
switchkvm	vm.c	/^switchkvm(void)$/;"	f
switchuvm	vm.c	/^switchuvm(struct proc *p)$/;"	f
swtch	kernel.asm	/^swtch:$/;"	l
swtch	swtch.S	/^swtch:$/;"	l
symbols	sh.c	/^char symbols[] = "<|>&;()";$/;"	v
sys_alarm	sysproc.c	/^sys_alarm(void)$/;"	f
sys_chdir	sysfile.c	/^sys_chdir(void)$/;"	f
sys_close	sysfile.c	/^sys_close(void)$/;"	f
sys_dup	sysfile.c	/^sys_dup(void)$/;"	f
sys_exec	sysfile.c	/^sys_exec(void)$/;"	f
sys_exit	sysproc.c	/^sys_exit(void)$/;"	f
sys_fork	sysproc.c	/^sys_fork(void)$/;"	f
sys_fstat	sysfile.c	/^sys_fstat(void)$/;"	f
sys_getlev	sysproc.c	/^sys_getlev(void)$/;"	f
sys_getpid	sysproc.c	/^sys_getpid(void)$/;"	f
sys_getppid	sysproc.c	/^sys_getppid(void){$/;"	f
sys_kill	sysproc.c	/^sys_kill(void)$/;"	f
sys_link	sysfile.c	/^sys_link(void)$/;"	f
sys_mkdir	sysfile.c	/^sys_mkdir(void)$/;"	f
sys_mknod	sysfile.c	/^sys_mknod(void)$/;"	f
sys_myfunction	prac_syscall.c	/^int sys_myfunction(void){$/;"	f
sys_open	sysfile.c	/^sys_open(void)$/;"	f
sys_pipe	sysfile.c	/^sys_pipe(void)$/;"	f
sys_read	sysfile.c	/^sys_read(void)$/;"	f
sys_sbrk	sysproc.c	/^sys_sbrk(void)$/;"	f
sys_set_cpu_share	sysproc.c	/^sys_set_cpu_share(void)$/;"	f
sys_sleep	sysproc.c	/^sys_sleep(void)$/;"	f
sys_thread_create	sysproc.c	/^sys_thread_create(void) $/;"	f
sys_thread_exit	sysproc.c	/^sys_thread_exit(void)$/;"	f
sys_thread_join	sysproc.c	/^sys_thread_join(void)$/;"	f
sys_unlink	sysfile.c	/^sys_unlink(void)$/;"	f
sys_uptime	sysproc.c	/^sys_uptime(void)$/;"	f
sys_wait	sysproc.c	/^sys_wait(void)$/;"	f
sys_write	sysfile.c	/^sys_write(void)$/;"	f
sys_yield	sysproc.c	/^sys_yield(void)$/;"	f
syscall	syscall.c	/^syscall(void)$/;"	f
syscalls	syscall.c	/^static int (*syscalls[])(void) = {$/;"	v	file:
sz	kernel.asm	/^	sz = *curproc->sz;$/;"	d
sz	kernel.asm	/^	sz = PGROUNDUP(sz);$/;"	d
sz	kernel.asm	/^  sz = *(curproc->sz);$/;"	d
sz	kernel.asm	/^  sz = 0;$/;"	d
sz	kernel.asm	/^  sz = PGROUNDUP(sz);$/;"	d
sz	proc.h	/^  uint* sz;                     \/\/ Size of process memory (bytes)$/;"	m	struct:proc
t	mmu.h	/^  ushort t;          \/\/ Trap on task switch$/;"	m	struct:taskstate
target	kernel.asm	/^  target = n;$/;"	d
taskstate	mmu.h	/^struct taskstate {$/;"	s
testfunc	threadtest.c	/^int (*testfunc[NTEST])(void) = {$/;"	v
testname	threadtest.c	/^char *testname[NTEST] = {$/;"	v
tf	proc.h	/^  struct trapframe *tf;        \/\/ Trap frame for current syscall$/;"	m	struct:proc	typeref:struct:proc::trapframe
thread	kernel.asm	/^	thread = (thread_t) n;$/;"	d
thread	kernel.asm	/^	thread = (void*) n;$/;"	d
thread_create	proc.c	/^thread_create(thread_t* thread, void* (*start_routine)(void*), void* arg)$/;"	f
thread_exit	proc.c	/^thread_exit(void *retval)$/;"	f
thread_join	proc.c	/^thread_join(thread_t thread, void** retval)$/;"	f
thread_t	types.h	/^typedef int thread_t;$/;"	t
ticks	trap.c	/^uint ticks;$/;"	v
ticks0	kernel.asm	/^  ticks0 = ticks;$/;"	d
tickslock	trap.c	/^struct spinlock tickslock;$/;"	v	typeref:struct:spinlock
tid	proc.h	/^  int tid;					   \/\/ Thread ID$/;"	m	struct:proc
time_allotment	proc.h	/^  int time_allotment;		   \/\/ ticks for check whether we should drop the priority for mlfq$/;"	m	struct:proc
tmp	threadtest.asm	/^    tmp = gcnt;$/;"	d
togglecode	kbd.h	/^static uchar togglecode[256] =$/;"	v
tok	sh.asm	/^    tok = gettoken(ps, es, 0, 0);$/;"	d
total	hugefiletest.asm	/^    total = 0;$/;"	d
total	usertests.asm	/^    total = 0;$/;"	d
total	usertests.asm	/^  total = 0;$/;"	d
total_share	kernel.asm	/^  total_share = 0;$/;"	d
total_share	proc.h	/^int total_share;$/;"	v
total_share_for_process	proc.h	/^  int total_share_for_process; \/\/ process total share of stride $/;"	m	struct:proc
trap	trap.c	/^trap(struct trapframe *tf)$/;"	f
trapframe	x86.h	/^struct trapframe {$/;"	s
trapno	x86.h	/^  uint trapno;$/;"	m	struct:trapframe
trapret	kernel.asm	/^trapret:$/;"	l
trapret	trapasm.S	/^trapret:$/;"	l
ts	proc.h	/^  struct taskstate ts;         \/\/ Used by x86 to find stack for interrupt$/;"	m	struct:cpu	typeref:struct:cpu::taskstate
tvinit	trap.c	/^tvinit(void)$/;"	f
type	elf.h	/^  uint type;$/;"	m	struct:proghdr
type	elf.h	/^  ushort type;$/;"	m	struct:elfhdr
type	file.h	/^  enum { FD_NONE, FD_PIPE, FD_INODE } type;$/;"	m	struct:file	typeref:enum:file::__anon2
type	file.h	/^  short type;         \/\/ copy of disk inode$/;"	m	struct:inode
type	fs.h	/^  short type;           \/\/ File type$/;"	m	struct:dinode
type	mmu.h	/^  uint type : 4;        \/\/ type(STS_{TG,IG32,TG32})$/;"	m	struct:gatedesc
type	mmu.h	/^  uint type : 4;       \/\/ Segment type (see STS_ constants)$/;"	m	struct:segdesc
type	mp.h	/^  uchar type;                   \/\/ MP system config type$/;"	m	struct:mp
type	mp.h	/^  uchar type;                   \/\/ entry type (0)$/;"	m	struct:mpproc
type	mp.h	/^  uchar type;                   \/\/ entry type (2)$/;"	m	struct:mpioapic
type	sh.c	/^  int type;$/;"	m	struct:backcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:cmd	file:
type	sh.c	/^  int type;$/;"	m	struct:execcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:listcmd	file:
type	sh.c	/^  int type;$/;"	m	struct:pipecmd	file:
type	sh.c	/^  int type;$/;"	m	struct:redircmd	file:
type	stat.h	/^  short type;  \/\/ Type of file$/;"	m	struct:stat
uart	kernel.asm	/^  uart = 1;$/;"	d
uart	uart.c	/^static int uart;    \/\/ is there a uart?$/;"	v	file:
uartgetc	uart.c	/^uartgetc(void)$/;"	f	file:
uartinit	uart.c	/^uartinit(void)$/;"	f
uartintr	uart.c	/^uartintr(void)$/;"	f
uartputc	uart.c	/^uartputc(int c)$/;"	f
uchar	kernel.asm	/^uchar ioapicid;$/;"	l
uchar	types.h	/^typedef unsigned char  uchar;$/;"	t
uint	cat.asm	/^uint$/;"	l
uint	echo.asm	/^uint$/;"	l
uint	forktest.asm	/^uint$/;"	l
uint	grep.asm	/^uint$/;"	l
uint	hugefiletest.asm	/^uint$/;"	l
uint	init.asm	/^uint$/;"	l
uint	kernel.asm	/^uint ticks;$/;"	l
uint	kill.asm	/^uint$/;"	l
uint	ln.asm	/^uint$/;"	l
uint	ls.asm	/^uint$/;"	l
uint	mkdir.asm	/^uint$/;"	l
uint	my_userapp.asm	/^uint$/;"	l
uint	rm.asm	/^uint$/;"	l
uint	sh.asm	/^uint$/;"	l
uint	stressfs.asm	/^uint$/;"	l
uint	test_master.asm	/^uint$/;"	l
uint	test_mlfq.asm	/^uint$/;"	l
uint	test_sample.asm	/^uint$/;"	l
uint	test_stride.asm	/^uint$/;"	l
uint	threadtest.asm	/^uint$/;"	l
uint	types.h	/^typedef unsigned int   uint;$/;"	t
uint	usertests.asm	/^uint$/;"	l
uint	wc.asm	/^uint$/;"	l
uint	zombie.asm	/^uint$/;"	l
uio	usertests.c	/^uio()$/;"	f
uninit	usertests.c	/^char uninit[10000];$/;"	v
unlinkread	usertests.c	/^unlinkread(void)$/;"	f
unsigned	usertests.asm	/^unsigned int$/;"	l
unsigned	usertests.asm	/^unsigned long randstate = 1;$/;"	l
use_lock	kalloc.c	/^  int use_lock;$/;"	m	struct:__anon6	file:
userinit	proc.c	/^userinit(void)$/;"	f
ushort	types.h	/^typedef unsigned short ushort;$/;"	t
usz	proc.h	/^  uint usz;$/;"	m	struct:proc
uva2ka	vm.c	/^uva2ka(pde_t *pgdir, char *uva)$/;"	f
va	kernel.asm	/^    va = va0 + PGSIZE;$/;"	d
va0	kernel.asm	/^    va0 = (uint)PGROUNDDOWN(va);$/;"	d
vaddr	elf.h	/^  uint vaddr;$/;"	m	struct:proghdr
val	usertests.asm	/^    val = 0x09;  \/* year *\/$/;"	d
valid	file.h	/^  int valid;          \/\/ inode has been read from disk?$/;"	m	struct:inode
validateint	usertests.c	/^validateint(int *p)$/;"	f
validatetest	usertests.c	/^validatetest(void)$/;"	f
vector0	kernel.asm	/^vector0:$/;"	l
vector0	vectors.S	/^vector0:$/;"	l
vector1	kernel.asm	/^vector1:$/;"	l
vector1	vectors.S	/^vector1:$/;"	l
vector10	kernel.asm	/^vector10:$/;"	l
vector10	vectors.S	/^vector10:$/;"	l
vector100	kernel.asm	/^vector100:$/;"	l
vector100	vectors.S	/^vector100:$/;"	l
vector101	kernel.asm	/^vector101:$/;"	l
vector101	vectors.S	/^vector101:$/;"	l
vector102	kernel.asm	/^vector102:$/;"	l
vector102	vectors.S	/^vector102:$/;"	l
vector103	kernel.asm	/^vector103:$/;"	l
vector103	vectors.S	/^vector103:$/;"	l
vector104	kernel.asm	/^vector104:$/;"	l
vector104	vectors.S	/^vector104:$/;"	l
vector105	kernel.asm	/^vector105:$/;"	l
vector105	vectors.S	/^vector105:$/;"	l
vector106	kernel.asm	/^vector106:$/;"	l
vector106	vectors.S	/^vector106:$/;"	l
vector107	kernel.asm	/^vector107:$/;"	l
vector107	vectors.S	/^vector107:$/;"	l
vector108	kernel.asm	/^vector108:$/;"	l
vector108	vectors.S	/^vector108:$/;"	l
vector109	kernel.asm	/^vector109:$/;"	l
vector109	vectors.S	/^vector109:$/;"	l
vector11	kernel.asm	/^vector11:$/;"	l
vector11	vectors.S	/^vector11:$/;"	l
vector110	kernel.asm	/^vector110:$/;"	l
vector110	vectors.S	/^vector110:$/;"	l
vector111	kernel.asm	/^vector111:$/;"	l
vector111	vectors.S	/^vector111:$/;"	l
vector112	kernel.asm	/^vector112:$/;"	l
vector112	vectors.S	/^vector112:$/;"	l
vector113	kernel.asm	/^vector113:$/;"	l
vector113	vectors.S	/^vector113:$/;"	l
vector114	kernel.asm	/^vector114:$/;"	l
vector114	vectors.S	/^vector114:$/;"	l
vector115	kernel.asm	/^vector115:$/;"	l
vector115	vectors.S	/^vector115:$/;"	l
vector116	kernel.asm	/^vector116:$/;"	l
vector116	vectors.S	/^vector116:$/;"	l
vector117	kernel.asm	/^vector117:$/;"	l
vector117	vectors.S	/^vector117:$/;"	l
vector118	kernel.asm	/^vector118:$/;"	l
vector118	vectors.S	/^vector118:$/;"	l
vector119	kernel.asm	/^vector119:$/;"	l
vector119	vectors.S	/^vector119:$/;"	l
vector12	kernel.asm	/^vector12:$/;"	l
vector12	vectors.S	/^vector12:$/;"	l
vector120	kernel.asm	/^vector120:$/;"	l
vector120	vectors.S	/^vector120:$/;"	l
vector121	kernel.asm	/^vector121:$/;"	l
vector121	vectors.S	/^vector121:$/;"	l
vector122	kernel.asm	/^vector122:$/;"	l
vector122	vectors.S	/^vector122:$/;"	l
vector123	kernel.asm	/^vector123:$/;"	l
vector123	vectors.S	/^vector123:$/;"	l
vector124	kernel.asm	/^vector124:$/;"	l
vector124	vectors.S	/^vector124:$/;"	l
vector125	kernel.asm	/^vector125:$/;"	l
vector125	vectors.S	/^vector125:$/;"	l
vector126	kernel.asm	/^vector126:$/;"	l
vector126	vectors.S	/^vector126:$/;"	l
vector127	kernel.asm	/^vector127:$/;"	l
vector127	vectors.S	/^vector127:$/;"	l
vector128	kernel.asm	/^vector128:$/;"	l
vector128	vectors.S	/^vector128:$/;"	l
vector129	kernel.asm	/^vector129:$/;"	l
vector129	vectors.S	/^vector129:$/;"	l
vector13	kernel.asm	/^vector13:$/;"	l
vector13	vectors.S	/^vector13:$/;"	l
vector130	kernel.asm	/^vector130:$/;"	l
vector130	vectors.S	/^vector130:$/;"	l
vector131	kernel.asm	/^vector131:$/;"	l
vector131	vectors.S	/^vector131:$/;"	l
vector132	kernel.asm	/^vector132:$/;"	l
vector132	vectors.S	/^vector132:$/;"	l
vector133	kernel.asm	/^vector133:$/;"	l
vector133	vectors.S	/^vector133:$/;"	l
vector134	kernel.asm	/^vector134:$/;"	l
vector134	vectors.S	/^vector134:$/;"	l
vector135	kernel.asm	/^vector135:$/;"	l
vector135	vectors.S	/^vector135:$/;"	l
vector136	kernel.asm	/^vector136:$/;"	l
vector136	vectors.S	/^vector136:$/;"	l
vector137	kernel.asm	/^vector137:$/;"	l
vector137	vectors.S	/^vector137:$/;"	l
vector138	kernel.asm	/^vector138:$/;"	l
vector138	vectors.S	/^vector138:$/;"	l
vector139	kernel.asm	/^vector139:$/;"	l
vector139	vectors.S	/^vector139:$/;"	l
vector14	kernel.asm	/^vector14:$/;"	l
vector14	vectors.S	/^vector14:$/;"	l
vector140	kernel.asm	/^vector140:$/;"	l
vector140	vectors.S	/^vector140:$/;"	l
vector141	kernel.asm	/^vector141:$/;"	l
vector141	vectors.S	/^vector141:$/;"	l
vector142	kernel.asm	/^vector142:$/;"	l
vector142	vectors.S	/^vector142:$/;"	l
vector143	kernel.asm	/^vector143:$/;"	l
vector143	vectors.S	/^vector143:$/;"	l
vector144	kernel.asm	/^vector144:$/;"	l
vector144	vectors.S	/^vector144:$/;"	l
vector145	kernel.asm	/^vector145:$/;"	l
vector145	vectors.S	/^vector145:$/;"	l
vector146	kernel.asm	/^vector146:$/;"	l
vector146	vectors.S	/^vector146:$/;"	l
vector147	kernel.asm	/^vector147:$/;"	l
vector147	vectors.S	/^vector147:$/;"	l
vector148	kernel.asm	/^vector148:$/;"	l
vector148	vectors.S	/^vector148:$/;"	l
vector149	kernel.asm	/^vector149:$/;"	l
vector149	vectors.S	/^vector149:$/;"	l
vector15	kernel.asm	/^vector15:$/;"	l
vector15	vectors.S	/^vector15:$/;"	l
vector150	kernel.asm	/^vector150:$/;"	l
vector150	vectors.S	/^vector150:$/;"	l
vector151	kernel.asm	/^vector151:$/;"	l
vector151	vectors.S	/^vector151:$/;"	l
vector152	kernel.asm	/^vector152:$/;"	l
vector152	vectors.S	/^vector152:$/;"	l
vector153	kernel.asm	/^vector153:$/;"	l
vector153	vectors.S	/^vector153:$/;"	l
vector154	kernel.asm	/^vector154:$/;"	l
vector154	vectors.S	/^vector154:$/;"	l
vector155	kernel.asm	/^vector155:$/;"	l
vector155	vectors.S	/^vector155:$/;"	l
vector156	kernel.asm	/^vector156:$/;"	l
vector156	vectors.S	/^vector156:$/;"	l
vector157	kernel.asm	/^vector157:$/;"	l
vector157	vectors.S	/^vector157:$/;"	l
vector158	kernel.asm	/^vector158:$/;"	l
vector158	vectors.S	/^vector158:$/;"	l
vector159	kernel.asm	/^vector159:$/;"	l
vector159	vectors.S	/^vector159:$/;"	l
vector16	kernel.asm	/^vector16:$/;"	l
vector16	vectors.S	/^vector16:$/;"	l
vector160	kernel.asm	/^vector160:$/;"	l
vector160	vectors.S	/^vector160:$/;"	l
vector161	kernel.asm	/^vector161:$/;"	l
vector161	vectors.S	/^vector161:$/;"	l
vector162	kernel.asm	/^vector162:$/;"	l
vector162	vectors.S	/^vector162:$/;"	l
vector163	kernel.asm	/^vector163:$/;"	l
vector163	vectors.S	/^vector163:$/;"	l
vector164	kernel.asm	/^vector164:$/;"	l
vector164	vectors.S	/^vector164:$/;"	l
vector165	kernel.asm	/^vector165:$/;"	l
vector165	vectors.S	/^vector165:$/;"	l
vector166	kernel.asm	/^vector166:$/;"	l
vector166	vectors.S	/^vector166:$/;"	l
vector167	kernel.asm	/^vector167:$/;"	l
vector167	vectors.S	/^vector167:$/;"	l
vector168	kernel.asm	/^vector168:$/;"	l
vector168	vectors.S	/^vector168:$/;"	l
vector169	kernel.asm	/^vector169:$/;"	l
vector169	vectors.S	/^vector169:$/;"	l
vector17	kernel.asm	/^vector17:$/;"	l
vector17	vectors.S	/^vector17:$/;"	l
vector170	kernel.asm	/^vector170:$/;"	l
vector170	vectors.S	/^vector170:$/;"	l
vector171	kernel.asm	/^vector171:$/;"	l
vector171	vectors.S	/^vector171:$/;"	l
vector172	kernel.asm	/^vector172:$/;"	l
vector172	vectors.S	/^vector172:$/;"	l
vector173	kernel.asm	/^vector173:$/;"	l
vector173	vectors.S	/^vector173:$/;"	l
vector174	kernel.asm	/^vector174:$/;"	l
vector174	vectors.S	/^vector174:$/;"	l
vector175	kernel.asm	/^vector175:$/;"	l
vector175	vectors.S	/^vector175:$/;"	l
vector176	kernel.asm	/^vector176:$/;"	l
vector176	vectors.S	/^vector176:$/;"	l
vector177	kernel.asm	/^vector177:$/;"	l
vector177	vectors.S	/^vector177:$/;"	l
vector178	kernel.asm	/^vector178:$/;"	l
vector178	vectors.S	/^vector178:$/;"	l
vector179	kernel.asm	/^vector179:$/;"	l
vector179	vectors.S	/^vector179:$/;"	l
vector18	kernel.asm	/^vector18:$/;"	l
vector18	vectors.S	/^vector18:$/;"	l
vector180	kernel.asm	/^vector180:$/;"	l
vector180	vectors.S	/^vector180:$/;"	l
vector181	kernel.asm	/^vector181:$/;"	l
vector181	vectors.S	/^vector181:$/;"	l
vector182	kernel.asm	/^vector182:$/;"	l
vector182	vectors.S	/^vector182:$/;"	l
vector183	kernel.asm	/^vector183:$/;"	l
vector183	vectors.S	/^vector183:$/;"	l
vector184	kernel.asm	/^vector184:$/;"	l
vector184	vectors.S	/^vector184:$/;"	l
vector185	kernel.asm	/^vector185:$/;"	l
vector185	vectors.S	/^vector185:$/;"	l
vector186	kernel.asm	/^vector186:$/;"	l
vector186	vectors.S	/^vector186:$/;"	l
vector187	kernel.asm	/^vector187:$/;"	l
vector187	vectors.S	/^vector187:$/;"	l
vector188	kernel.asm	/^vector188:$/;"	l
vector188	vectors.S	/^vector188:$/;"	l
vector189	kernel.asm	/^vector189:$/;"	l
vector189	vectors.S	/^vector189:$/;"	l
vector19	kernel.asm	/^vector19:$/;"	l
vector19	vectors.S	/^vector19:$/;"	l
vector190	kernel.asm	/^vector190:$/;"	l
vector190	vectors.S	/^vector190:$/;"	l
vector191	kernel.asm	/^vector191:$/;"	l
vector191	vectors.S	/^vector191:$/;"	l
vector192	kernel.asm	/^vector192:$/;"	l
vector192	vectors.S	/^vector192:$/;"	l
vector193	kernel.asm	/^vector193:$/;"	l
vector193	vectors.S	/^vector193:$/;"	l
vector194	kernel.asm	/^vector194:$/;"	l
vector194	vectors.S	/^vector194:$/;"	l
vector195	kernel.asm	/^vector195:$/;"	l
vector195	vectors.S	/^vector195:$/;"	l
vector196	kernel.asm	/^vector196:$/;"	l
vector196	vectors.S	/^vector196:$/;"	l
vector197	kernel.asm	/^vector197:$/;"	l
vector197	vectors.S	/^vector197:$/;"	l
vector198	kernel.asm	/^vector198:$/;"	l
vector198	vectors.S	/^vector198:$/;"	l
vector199	kernel.asm	/^vector199:$/;"	l
vector199	vectors.S	/^vector199:$/;"	l
vector2	kernel.asm	/^vector2:$/;"	l
vector2	vectors.S	/^vector2:$/;"	l
vector20	kernel.asm	/^vector20:$/;"	l
vector20	vectors.S	/^vector20:$/;"	l
vector200	kernel.asm	/^vector200:$/;"	l
vector200	vectors.S	/^vector200:$/;"	l
vector201	kernel.asm	/^vector201:$/;"	l
vector201	vectors.S	/^vector201:$/;"	l
vector202	kernel.asm	/^vector202:$/;"	l
vector202	vectors.S	/^vector202:$/;"	l
vector203	kernel.asm	/^vector203:$/;"	l
vector203	vectors.S	/^vector203:$/;"	l
vector204	kernel.asm	/^vector204:$/;"	l
vector204	vectors.S	/^vector204:$/;"	l
vector205	kernel.asm	/^vector205:$/;"	l
vector205	vectors.S	/^vector205:$/;"	l
vector206	kernel.asm	/^vector206:$/;"	l
vector206	vectors.S	/^vector206:$/;"	l
vector207	kernel.asm	/^vector207:$/;"	l
vector207	vectors.S	/^vector207:$/;"	l
vector208	kernel.asm	/^vector208:$/;"	l
vector208	vectors.S	/^vector208:$/;"	l
vector209	kernel.asm	/^vector209:$/;"	l
vector209	vectors.S	/^vector209:$/;"	l
vector21	kernel.asm	/^vector21:$/;"	l
vector21	vectors.S	/^vector21:$/;"	l
vector210	kernel.asm	/^vector210:$/;"	l
vector210	vectors.S	/^vector210:$/;"	l
vector211	kernel.asm	/^vector211:$/;"	l
vector211	vectors.S	/^vector211:$/;"	l
vector212	kernel.asm	/^vector212:$/;"	l
vector212	vectors.S	/^vector212:$/;"	l
vector213	kernel.asm	/^vector213:$/;"	l
vector213	vectors.S	/^vector213:$/;"	l
vector214	kernel.asm	/^vector214:$/;"	l
vector214	vectors.S	/^vector214:$/;"	l
vector215	kernel.asm	/^vector215:$/;"	l
vector215	vectors.S	/^vector215:$/;"	l
vector216	kernel.asm	/^vector216:$/;"	l
vector216	vectors.S	/^vector216:$/;"	l
vector217	kernel.asm	/^vector217:$/;"	l
vector217	vectors.S	/^vector217:$/;"	l
vector218	kernel.asm	/^vector218:$/;"	l
vector218	vectors.S	/^vector218:$/;"	l
vector219	kernel.asm	/^vector219:$/;"	l
vector219	vectors.S	/^vector219:$/;"	l
vector22	kernel.asm	/^vector22:$/;"	l
vector22	vectors.S	/^vector22:$/;"	l
vector220	kernel.asm	/^vector220:$/;"	l
vector220	vectors.S	/^vector220:$/;"	l
vector221	kernel.asm	/^vector221:$/;"	l
vector221	vectors.S	/^vector221:$/;"	l
vector222	kernel.asm	/^vector222:$/;"	l
vector222	vectors.S	/^vector222:$/;"	l
vector223	kernel.asm	/^vector223:$/;"	l
vector223	vectors.S	/^vector223:$/;"	l
vector224	kernel.asm	/^vector224:$/;"	l
vector224	vectors.S	/^vector224:$/;"	l
vector225	kernel.asm	/^vector225:$/;"	l
vector225	vectors.S	/^vector225:$/;"	l
vector226	kernel.asm	/^vector226:$/;"	l
vector226	vectors.S	/^vector226:$/;"	l
vector227	kernel.asm	/^vector227:$/;"	l
vector227	vectors.S	/^vector227:$/;"	l
vector228	kernel.asm	/^vector228:$/;"	l
vector228	vectors.S	/^vector228:$/;"	l
vector229	kernel.asm	/^vector229:$/;"	l
vector229	vectors.S	/^vector229:$/;"	l
vector23	kernel.asm	/^vector23:$/;"	l
vector23	vectors.S	/^vector23:$/;"	l
vector230	kernel.asm	/^vector230:$/;"	l
vector230	vectors.S	/^vector230:$/;"	l
vector231	kernel.asm	/^vector231:$/;"	l
vector231	vectors.S	/^vector231:$/;"	l
vector232	kernel.asm	/^vector232:$/;"	l
vector232	vectors.S	/^vector232:$/;"	l
vector233	kernel.asm	/^vector233:$/;"	l
vector233	vectors.S	/^vector233:$/;"	l
vector234	kernel.asm	/^vector234:$/;"	l
vector234	vectors.S	/^vector234:$/;"	l
vector235	kernel.asm	/^vector235:$/;"	l
vector235	vectors.S	/^vector235:$/;"	l
vector236	kernel.asm	/^vector236:$/;"	l
vector236	vectors.S	/^vector236:$/;"	l
vector237	kernel.asm	/^vector237:$/;"	l
vector237	vectors.S	/^vector237:$/;"	l
vector238	kernel.asm	/^vector238:$/;"	l
vector238	vectors.S	/^vector238:$/;"	l
vector239	kernel.asm	/^vector239:$/;"	l
vector239	vectors.S	/^vector239:$/;"	l
vector24	kernel.asm	/^vector24:$/;"	l
vector24	vectors.S	/^vector24:$/;"	l
vector240	kernel.asm	/^vector240:$/;"	l
vector240	vectors.S	/^vector240:$/;"	l
vector241	kernel.asm	/^vector241:$/;"	l
vector241	vectors.S	/^vector241:$/;"	l
vector242	kernel.asm	/^vector242:$/;"	l
vector242	vectors.S	/^vector242:$/;"	l
vector243	kernel.asm	/^vector243:$/;"	l
vector243	vectors.S	/^vector243:$/;"	l
vector244	kernel.asm	/^vector244:$/;"	l
vector244	vectors.S	/^vector244:$/;"	l
vector245	kernel.asm	/^vector245:$/;"	l
vector245	vectors.S	/^vector245:$/;"	l
vector246	kernel.asm	/^vector246:$/;"	l
vector246	vectors.S	/^vector246:$/;"	l
vector247	kernel.asm	/^vector247:$/;"	l
vector247	vectors.S	/^vector247:$/;"	l
vector248	kernel.asm	/^vector248:$/;"	l
vector248	vectors.S	/^vector248:$/;"	l
vector249	kernel.asm	/^vector249:$/;"	l
vector249	vectors.S	/^vector249:$/;"	l
vector25	kernel.asm	/^vector25:$/;"	l
vector25	vectors.S	/^vector25:$/;"	l
vector250	kernel.asm	/^vector250:$/;"	l
vector250	vectors.S	/^vector250:$/;"	l
vector251	kernel.asm	/^vector251:$/;"	l
vector251	vectors.S	/^vector251:$/;"	l
vector252	kernel.asm	/^vector252:$/;"	l
vector252	vectors.S	/^vector252:$/;"	l
vector253	kernel.asm	/^vector253:$/;"	l
vector253	vectors.S	/^vector253:$/;"	l
vector254	kernel.asm	/^vector254:$/;"	l
vector254	vectors.S	/^vector254:$/;"	l
vector255	kernel.asm	/^vector255:$/;"	l
vector255	vectors.S	/^vector255:$/;"	l
vector26	kernel.asm	/^vector26:$/;"	l
vector26	vectors.S	/^vector26:$/;"	l
vector27	kernel.asm	/^vector27:$/;"	l
vector27	vectors.S	/^vector27:$/;"	l
vector28	kernel.asm	/^vector28:$/;"	l
vector28	vectors.S	/^vector28:$/;"	l
vector29	kernel.asm	/^vector29:$/;"	l
vector29	vectors.S	/^vector29:$/;"	l
vector3	kernel.asm	/^vector3:$/;"	l
vector3	vectors.S	/^vector3:$/;"	l
vector30	kernel.asm	/^vector30:$/;"	l
vector30	vectors.S	/^vector30:$/;"	l
vector31	kernel.asm	/^vector31:$/;"	l
vector31	vectors.S	/^vector31:$/;"	l
vector32	kernel.asm	/^vector32:$/;"	l
vector32	vectors.S	/^vector32:$/;"	l
vector33	kernel.asm	/^vector33:$/;"	l
vector33	vectors.S	/^vector33:$/;"	l
vector34	kernel.asm	/^vector34:$/;"	l
vector34	vectors.S	/^vector34:$/;"	l
vector35	kernel.asm	/^vector35:$/;"	l
vector35	vectors.S	/^vector35:$/;"	l
vector36	kernel.asm	/^vector36:$/;"	l
vector36	vectors.S	/^vector36:$/;"	l
vector37	kernel.asm	/^vector37:$/;"	l
vector37	vectors.S	/^vector37:$/;"	l
vector38	kernel.asm	/^vector38:$/;"	l
vector38	vectors.S	/^vector38:$/;"	l
vector39	kernel.asm	/^vector39:$/;"	l
vector39	vectors.S	/^vector39:$/;"	l
vector4	kernel.asm	/^vector4:$/;"	l
vector4	vectors.S	/^vector4:$/;"	l
vector40	kernel.asm	/^vector40:$/;"	l
vector40	vectors.S	/^vector40:$/;"	l
vector41	kernel.asm	/^vector41:$/;"	l
vector41	vectors.S	/^vector41:$/;"	l
vector42	kernel.asm	/^vector42:$/;"	l
vector42	vectors.S	/^vector42:$/;"	l
vector43	kernel.asm	/^vector43:$/;"	l
vector43	vectors.S	/^vector43:$/;"	l
vector44	kernel.asm	/^vector44:$/;"	l
vector44	vectors.S	/^vector44:$/;"	l
vector45	kernel.asm	/^vector45:$/;"	l
vector45	vectors.S	/^vector45:$/;"	l
vector46	kernel.asm	/^vector46:$/;"	l
vector46	vectors.S	/^vector46:$/;"	l
vector47	kernel.asm	/^vector47:$/;"	l
vector47	vectors.S	/^vector47:$/;"	l
vector48	kernel.asm	/^vector48:$/;"	l
vector48	vectors.S	/^vector48:$/;"	l
vector49	kernel.asm	/^vector49:$/;"	l
vector49	vectors.S	/^vector49:$/;"	l
vector5	kernel.asm	/^vector5:$/;"	l
vector5	vectors.S	/^vector5:$/;"	l
vector50	kernel.asm	/^vector50:$/;"	l
vector50	vectors.S	/^vector50:$/;"	l
vector51	kernel.asm	/^vector51:$/;"	l
vector51	vectors.S	/^vector51:$/;"	l
vector52	kernel.asm	/^vector52:$/;"	l
vector52	vectors.S	/^vector52:$/;"	l
vector53	kernel.asm	/^vector53:$/;"	l
vector53	vectors.S	/^vector53:$/;"	l
vector54	kernel.asm	/^vector54:$/;"	l
vector54	vectors.S	/^vector54:$/;"	l
vector55	kernel.asm	/^vector55:$/;"	l
vector55	vectors.S	/^vector55:$/;"	l
vector56	kernel.asm	/^vector56:$/;"	l
vector56	vectors.S	/^vector56:$/;"	l
vector57	kernel.asm	/^vector57:$/;"	l
vector57	vectors.S	/^vector57:$/;"	l
vector58	kernel.asm	/^vector58:$/;"	l
vector58	vectors.S	/^vector58:$/;"	l
vector59	kernel.asm	/^vector59:$/;"	l
vector59	vectors.S	/^vector59:$/;"	l
vector6	kernel.asm	/^vector6:$/;"	l
vector6	vectors.S	/^vector6:$/;"	l
vector60	kernel.asm	/^vector60:$/;"	l
vector60	vectors.S	/^vector60:$/;"	l
vector61	kernel.asm	/^vector61:$/;"	l
vector61	vectors.S	/^vector61:$/;"	l
vector62	kernel.asm	/^vector62:$/;"	l
vector62	vectors.S	/^vector62:$/;"	l
vector63	kernel.asm	/^vector63:$/;"	l
vector63	vectors.S	/^vector63:$/;"	l
vector64	kernel.asm	/^vector64:$/;"	l
vector64	vectors.S	/^vector64:$/;"	l
vector65	kernel.asm	/^vector65:$/;"	l
vector65	vectors.S	/^vector65:$/;"	l
vector66	kernel.asm	/^vector66:$/;"	l
vector66	vectors.S	/^vector66:$/;"	l
vector67	kernel.asm	/^vector67:$/;"	l
vector67	vectors.S	/^vector67:$/;"	l
vector68	kernel.asm	/^vector68:$/;"	l
vector68	vectors.S	/^vector68:$/;"	l
vector69	kernel.asm	/^vector69:$/;"	l
vector69	vectors.S	/^vector69:$/;"	l
vector7	kernel.asm	/^vector7:$/;"	l
vector7	vectors.S	/^vector7:$/;"	l
vector70	kernel.asm	/^vector70:$/;"	l
vector70	vectors.S	/^vector70:$/;"	l
vector71	kernel.asm	/^vector71:$/;"	l
vector71	vectors.S	/^vector71:$/;"	l
vector72	kernel.asm	/^vector72:$/;"	l
vector72	vectors.S	/^vector72:$/;"	l
vector73	kernel.asm	/^vector73:$/;"	l
vector73	vectors.S	/^vector73:$/;"	l
vector74	kernel.asm	/^vector74:$/;"	l
vector74	vectors.S	/^vector74:$/;"	l
vector75	kernel.asm	/^vector75:$/;"	l
vector75	vectors.S	/^vector75:$/;"	l
vector76	kernel.asm	/^vector76:$/;"	l
vector76	vectors.S	/^vector76:$/;"	l
vector77	kernel.asm	/^vector77:$/;"	l
vector77	vectors.S	/^vector77:$/;"	l
vector78	kernel.asm	/^vector78:$/;"	l
vector78	vectors.S	/^vector78:$/;"	l
vector79	kernel.asm	/^vector79:$/;"	l
vector79	vectors.S	/^vector79:$/;"	l
vector8	kernel.asm	/^vector8:$/;"	l
vector8	vectors.S	/^vector8:$/;"	l
vector80	kernel.asm	/^vector80:$/;"	l
vector80	vectors.S	/^vector80:$/;"	l
vector81	kernel.asm	/^vector81:$/;"	l
vector81	vectors.S	/^vector81:$/;"	l
vector82	kernel.asm	/^vector82:$/;"	l
vector82	vectors.S	/^vector82:$/;"	l
vector83	kernel.asm	/^vector83:$/;"	l
vector83	vectors.S	/^vector83:$/;"	l
vector84	kernel.asm	/^vector84:$/;"	l
vector84	vectors.S	/^vector84:$/;"	l
vector85	kernel.asm	/^vector85:$/;"	l
vector85	vectors.S	/^vector85:$/;"	l
vector86	kernel.asm	/^vector86:$/;"	l
vector86	vectors.S	/^vector86:$/;"	l
vector87	kernel.asm	/^vector87:$/;"	l
vector87	vectors.S	/^vector87:$/;"	l
vector88	kernel.asm	/^vector88:$/;"	l
vector88	vectors.S	/^vector88:$/;"	l
vector89	kernel.asm	/^vector89:$/;"	l
vector89	vectors.S	/^vector89:$/;"	l
vector9	kernel.asm	/^vector9:$/;"	l
vector9	vectors.S	/^vector9:$/;"	l
vector90	kernel.asm	/^vector90:$/;"	l
vector90	vectors.S	/^vector90:$/;"	l
vector91	kernel.asm	/^vector91:$/;"	l
vector91	vectors.S	/^vector91:$/;"	l
vector92	kernel.asm	/^vector92:$/;"	l
vector92	vectors.S	/^vector92:$/;"	l
vector93	kernel.asm	/^vector93:$/;"	l
vector93	vectors.S	/^vector93:$/;"	l
vector94	kernel.asm	/^vector94:$/;"	l
vector94	vectors.S	/^vector94:$/;"	l
vector95	kernel.asm	/^vector95:$/;"	l
vector95	vectors.S	/^vector95:$/;"	l
vector96	kernel.asm	/^vector96:$/;"	l
vector96	vectors.S	/^vector96:$/;"	l
vector97	kernel.asm	/^vector97:$/;"	l
vector97	vectors.S	/^vector97:$/;"	l
vector98	kernel.asm	/^vector98:$/;"	l
vector98	vectors.S	/^vector98:$/;"	l
vector99	kernel.asm	/^vector99:$/;"	l
vector99	vectors.S	/^vector99:$/;"	l
vectors	vectors.S	/^vectors:$/;"	l
version	elf.h	/^  uint version;$/;"	m	struct:elfhdr
version	mp.h	/^  uchar version;                \/\/ I\/O APIC version$/;"	m	struct:mpioapic
version	mp.h	/^  uchar version;                \/\/ [14]$/;"	m	struct:mpconf
version	mp.h	/^  uchar version;                \/\/ local APIC verison$/;"	m	struct:mpproc
virt	vm.c	/^  void *virt;$/;"	m	struct:kmap	file:
void	bootblock.asm	/^void readseg(uchar*, uint, uint);$/;"	l
void	bootblock.asm	/^void$/;"	l
void	cat.asm	/^void$/;"	l
void	echo.asm	/^void$/;"	l
void	forktest.asm	/^void$/;"	l
void	grep.asm	/^void$/;"	l
void	hugefiletest.asm	/^void$/;"	l
void	init.asm	/^void$/;"	l
void	kernel.asm	/^void cmostime(struct rtcdate *r)$/;"	l
void	kernel.asm	/^void$/;"	l
void	kill.asm	/^void$/;"	l
void	ln.asm	/^void$/;"	l
void	ls.asm	/^void$/;"	l
void	mkdir.asm	/^void$/;"	l
void	my_userapp.asm	/^void$/;"	l
void	rm.asm	/^void$/;"	l
void	sh.asm	/^void$/;"	l
void	stressfs.asm	/^void$/;"	l
void	test_master.asm	/^void$/;"	l
void	test_mlfq.asm	/^void$/;"	l
void	test_sample.asm	/^void$/;"	l
void	test_stride.asm	/^void$/;"	l
void	threadtest.asm	/^void nop(){ }$/;"	l
void	threadtest.asm	/^void$/;"	l
void	usertests.asm	/^void argptest()$/;"	l
void	usertests.asm	/^void dirtest(void)$/;"	l
void	usertests.asm	/^void$/;"	l
void	wc.asm	/^void$/;"	l
void	zombie.asm	/^void$/;"	l
volatile	kernel.asm	/^volatile uint *lapic;  \/\/ Initialized in mp.c$/;"	l
w	console.c	/^  uint w;  \/\/ Write index$/;"	m	struct:__anon8	file:
wait	proc.c	/^wait(void)$/;"	f
waitdisk	bootmain.c	/^waitdisk(void)$/;"	f
wakeup	proc.c	/^wakeup(void *chan)$/;"	f
wakeup1	proc.c	/^wakeup1(void *chan)$/;"	f	file:
walkpgdir	vm.c	/^walkpgdir(pde_t *pgdir, const void *va, int alloc)$/;"	f	file:
wc	wc.c	/^wc(int fd, char *name)$/;"	f
whitespace	sh.c	/^char whitespace[] = " \\t\\r\\n\\v";$/;"	v
winode	mkfs.c	/^winode(uint inum, struct dinode *ip)$/;"	f
writable	file.h	/^  char writable;$/;"	m	struct:file
write	file.h	/^  int (*write)(struct inode*, char*, int);$/;"	m	struct:devsw
write_head	log.c	/^write_head(void)$/;"	f	file:
write_log	log.c	/^write_log(void)$/;"	f	file:
writefile	cuth	/^sub writefile($@){$/;"	s
writei	fs.c	/^writei(struct inode *ip, char *src, uint off, uint n)$/;"	f
writeopen	pipe.c	/^  int writeopen;  \/\/ write fd is still open$/;"	m	struct:pipe	file:
writetest	usertests.c	/^writetest(void)$/;"	f
writetest1	usertests.c	/^writetest1(void)$/;"	f
wrv	kernel.asm	/^  wrv = (ushort*)P2V((0x40<<4 | 0x67));  \/\/ Warm reset vector$/;"	d
wsect	mkfs.c	/^wsect(uint sec, void *buf)$/;"	f
x	cat.asm	/^    x = -xx;$/;"	d
x	cat.asm	/^    x = xx;$/;"	d
x	echo.asm	/^    x = -xx;$/;"	d
x	echo.asm	/^    x = xx;$/;"	d
x	grep.asm	/^    x = -xx;$/;"	d
x	grep.asm	/^    x = xx;$/;"	d
x	hugefiletest.asm	/^    x = -xx;$/;"	d
x	hugefiletest.asm	/^    x = xx;$/;"	d
x	init.asm	/^    x = -xx;$/;"	d
x	init.asm	/^    x = xx;$/;"	d
x	kernel.asm	/^    x = -xx;$/;"	d
x	kernel.asm	/^    x = xx;$/;"	d
x	kill.asm	/^    x = -xx;$/;"	d
x	kill.asm	/^    x = xx;$/;"	d
x	ln.asm	/^    x = -xx;$/;"	d
x	ln.asm	/^    x = xx;$/;"	d
x	ls.asm	/^    x = -xx;$/;"	d
x	ls.asm	/^    x = xx;$/;"	d
x	mkdir.asm	/^    x = -xx;$/;"	d
x	mkdir.asm	/^    x = xx;$/;"	d
x	my_userapp.asm	/^    x = -xx;$/;"	d
x	my_userapp.asm	/^    x = xx;$/;"	d
x	rm.asm	/^    x = -xx;$/;"	d
x	rm.asm	/^    x = xx;$/;"	d
x	sh.asm	/^    x = -xx;$/;"	d
x	sh.asm	/^    x = xx;$/;"	d
x	stressfs.asm	/^    x = -xx;$/;"	d
x	stressfs.asm	/^    x = xx;$/;"	d
x	test_master.asm	/^    x = -xx;$/;"	d
x	test_master.asm	/^    x = xx;$/;"	d
x	test_mlfq.asm	/^    x = -xx;$/;"	d
x	test_mlfq.asm	/^    x = xx;$/;"	d
x	test_sample.asm	/^    x = -xx;$/;"	d
x	test_sample.asm	/^    x = xx;$/;"	d
x	test_stride.asm	/^    x = -xx;$/;"	d
x	test_stride.asm	/^    x = xx;$/;"	d
x	threadtest.asm	/^    x = -xx;$/;"	d
x	threadtest.asm	/^    x = xx;$/;"	d
x	umalloc.c	/^  Align x;$/;"	m	union:header	file:
x	usertests.asm	/^    x = -xx;$/;"	d
x	usertests.asm	/^    x = x * 1103515245 + 12345;$/;"	d
x	usertests.asm	/^    x = xx;$/;"	d
x	wc.asm	/^    x = -xx;$/;"	d
x	wc.asm	/^    x = xx;$/;"	d
x	zombie.asm	/^    x = -xx;$/;"	d
x	zombie.asm	/^    x = xx;$/;"	d
xchecksum	mp.h	/^  uchar xchecksum;              \/\/ extended table checksum$/;"	m	struct:mpconf
xchg	x86.h	/^xchg(volatile uint *addr, uint newval)$/;"	f
xint	mkfs.c	/^xint(uint x)$/;"	f
xlength	mp.h	/^  ushort xlength;               \/\/ extended table length$/;"	m	struct:mpconf
xshort	mkfs.c	/^xshort(ushort x)$/;"	f
xticks	kernel.asm	/^  xticks = ticks;$/;"	d
year	date.h	/^  uint year;$/;"	m	struct:rtcdate
yield	proc.c	/^yield(void)$/;"	f
zeroes	mkfs.c	/^char zeroes[BSIZE];$/;"	v
